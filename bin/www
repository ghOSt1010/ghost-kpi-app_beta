#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var mongoose = require('mongoose');
var logger = require('../modules/logger/logger');
var { execSync } = require('child_process')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
logger.status('HTTP SERVER', "STARTED")
logger.status('Server hosted on', process.platform)
logger.status('Server PID', process.pid)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
logger.status('Server is listening on port', port)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
   var port = parseInt(val, 10);

   if (isNaN(port)) {
      // named pipe
      return val;
   }

   if (port >= 0) {
      // port number
      return port;
   }

   return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
   if (error.syscall !== 'listen') {
      throw error;
   }

   var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

   // handle specific listen errors with friendly messages
   switch (error.code) {
      case 'EACCES':
         console.error(bind + ' requires elevated privileges');
         process.exit(1);
         break;
      case 'EADDRINUSE':
         console.error(bind + ' is already in use');
         process.exit(1);
         break;
      default:
         throw error;
   }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
   debug('Listening on ' + bind);
}

/**
 *    App shutdown
 */
if (process.platform === 'win32') {
   require('readline')
      .createInterface({
         input: process.stdin,
         output: process.stdout
      })
      .on('SIGINT', function () {
         process.emit('SIGINT');
      });
}

process.on('SIGINT', function () {
   // graceful shutdown
   logger.important('SIGINT signal received');
   logger.status('Server shutdown', 'ok')
   execSync('killall mongod')
   shutdown();
});

process.on('SIGTERM', () => {
   logger.important('SIGTERM signal received');
   logger.status('Server shutdown', 'ok')
   execSync('killall mongod')
   shutdown();
});

function shutdown(cb) {
   server.close(() => {
      logger.info('Server shutdown');
      logger.status('Server shutdown', 'closed')
      // boolean means [force], see in mongoose doc
      mongoose.connection.close(false, () => {
         logger.info('MongoDB connection closed');
         logger.status('MongoDB connection', 'closed')
         execSync('killall mongod')

         process.exit(0);
      });
   });
}
