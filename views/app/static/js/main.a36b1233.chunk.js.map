{"version":3,"sources":["Data_OldStatic/old_data.js","Modules/Client/API/Routes/Auth/Auth.js","Modules/Client/API/Routes/Employees/Employees.js","Modules/Client/API/Routes/Employees_Types/Employees_Types.js","Modules/Client/API/Routes/Projects/Projects.js","Modules/Client/API/Routes/Teams/Teams.js","Modules/Client/API/Routes/KPIs/KPIs.js","Modules/Client/API/Routes/Reports/Reports.js","Modules/Client/API/Routes/Users/Users.js","Modules/Client/API/Routes/Routes.js","Modules/Client/API/User/User.js","Modules/Client/API/Auth/Auth.js","Modules/Client/API/Services/AuthService/AuthService.js","Modules/Client/API/Requests/Request.js","Modules/Client/API/Services/EmployeesService/DTO/Employee.js","Modules/Client/API/Services/EmployeesService/EmployeesService.js","Modules/Client/API/Services/EmployeesService/DTO/EmployeeType.js","Modules/Client/API/Services/EmployeesService/EmployeesTypesService.js","Modules/Client/API/Services/KPIsService/DTO/KPIDTO.js","Modules/Client/API/Services/KPIsService/KPIsService.js","Modules/Client/API/Services/ReportingService/DTO/Report.js","Modules/Client/API/Services/ReportingService/ReportingService.js","Modules/Client/API/Services/TeamsService/DTO/Team.js","Modules/Client/API/Services/TeamsService/TeamsService.js","Modules/Client/API/Services/ProjectsService/DTO/Project.js","Modules/Client/API/Services/ProjectsService/ProjectsService.js","Modules/Client/API/Services/UsersService/DTO/User.js","Modules/Client/API/Services/UsersService/UserService.js","Modules/Client/API/Services/Services.js","Modules/Client/API/API.js","Modules/Client/Notifications/Notifications.js","Modules/Client/Client.js","components/Sidebar/Sidebar.jsx","components/Sidebar/SidebarItem.jsx","components/Sidebar/SidebarItemSpecial.jsx","Modules/UIManager/UIManager.js","components/AppSideBar/AppSideBar.jsx","components/MainContainer/MainContainer.jsx","Routes/PrivateRoute.jsx","views/Settings/Settings.jsx","components/Tables/TableHeaders.jsx","components/Tables/Table.jsx","components/Tables/TableCell.jsx","components/Tables/ProjectsTable.jsx","components/Selects/EmployeesOptions.jsx","components/Forms/ProjectForm.jsx","components/Dialogs/ProjectDialog.jsx","components/Tables/TableControllers.jsx","views/Projects/Projects.jsx","components/Tables/ReportsTable.jsx","components/Selects/KPIsOptions.jsx","components/Forms/ReportForm.jsx","components/Dialogs/ReportDialog.jsx","views/Reports/Reports.jsx","components/Tables/UsersTable.jsx","components/Selects/UserTypeOptions.jsx","components/Forms/UserForm.jsx","components/Dialogs/UserDialog.jsx","components/Alerts/BeforeDeleteAlert.jsx","views/AdminPanel/AdminPanel.jsx","components/Card/CardHeader.jsx","components/Card/CardBody.jsx","components/Charts/Chart/Chart.jsx","components/Card/ChartCard/ChartCard.jsx","views/Dashboards/components/MainDashboard.jsx","views/Dashboards/components/DashboardControllers.jsx","components/Card/CardWithModal.jsx","components/Charts/ApexChart/LineChart.jsx","views/Dashboards/components/ChartsBuilder.jsx","components/Selects/ProjectOptions.jsx","views/Dashboards/Dashboards.jsx","components/Tables/KPIsTable.jsx","components/Forms/KPIForm.jsx","components/Dialogs/KPIDialog.jsx","views/KPIs/KPIs.jsx","components/Tables/EmployeesTable.jsx","components/Selects/UsersOptions.jsx","components/Selects/EmployeesTypesOptions.jsx","components/Selects/TeamsOptions.jsx","components/Forms/EmployeeForm.jsx","components/Dialogs/EmployeeDialog.jsx","components/Panels/EmployeePanel.jsx","views/Employees/Employees.jsx","components/Tables/TeamsTable.jsx","components/Forms/TeamForm.jsx","components/Dialogs/TeamDialog.jsx","views/Teams/Teams.jsx","Routes/Route404.jsx","views/Login/Login.jsx","views/Home/Home.jsx","Routes/Routes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Project_Name","Result","Target","Auth","LOGIN","MAIN_PATH","Employees","GET_EMPLOYEES","GET_EMPLOYEE_BY_ID","GET_EMPLOYEE_BY_NAME","GET_EMPLOYEE_BY_TYPE","GET_EMPLOYEE_BY_USER_ID","CREATE_EMPLOYEE","UPDATE_EMPLOYEE","DELETE_EMPLOYEE_BY_ID","Employees_TYPES","GET_EMPLOYEES_TYPES","GET_EMPLOYEES_TYPE_BY_ID","CREATE_EMPLOYEES_TYPE","DELETE_EMPLOYEES_TYPE_BY_ID","PROJECTS","GET_PROJECTS","GET_PROJECT_BY_NAME","GET_PROJECT_BY_ID","CREATE_NEW_PROEJCT","UPDATE_PROJECT","DELETE_PROJECT_BY_ID","teamS","GET_TEAMS","GET_TEAM_BY_NAME","GET_TEAM_BY_ID","CREATE_NEW_TEAM","UPDATE_TEAM","DELETE_TEAM_BY_ID","KPI","GET_KPIS","GET_KPI_BY_ID","GET_KPI_BY_PROJECT_ID","CREATE_NEW_KPI","UPDATE_KPI","DELETE_KPI_BY_ID","Reports","GET_REPORTS","GET_REPORT_BY_ID","GET_REPORT_BY_KPI_ID","GET_REPORT_BY_PROJECT_ID","CREATE_REPORT","UPDATE_REPORT","DELETE_REPORT_BY_ID","Users","UPDATE_USER","CREATE_NEW_USER","DELETE_USER","GET_CURRENT_USER","GET_ALL_USERS","ROUTES","this","AUTH","EMPLOYEES","EMPLOYEES_TYPES","EmployeesTypes","Projects","TEAMS","Teams","KPIs","REPORTS","USERS","User","user","localStorage","getItem","JSON","parse","getUser","_id","employeeInfo","name","usertype","userType","token","sap","getUserType","role","email","project","rm","setItem","stringify","isUserAuthenticated","removeItem","AuthService","username","password","axios","post","API","getLoginItem","then","result","authorized","authenticateUser","data","window","location","reload","catch","error","deauthenticateUser","Request","create","headers","Authorization","getToken","Employee","type","team","employee","emp","EmployeesService","getEmployeeDTO","id","createEmployeeDTO","get","err","put","delete","EmployeeType","EmployeesTypesService","EmployeeTypeDTO","Type","res","getEmployeeTypeByID","time_from","time_to","target","manager","kpi","KPIService","KPIDTO","getKPIDTO","Report","reportedBy","completed","status","reportedAt","ReportsService","getReportDTO","kpiID","Team","TeamsService","getTeamDTO","Project","ProjectsService","getProjectDTO","active","createdAt","Date","UserService","getUserDTO","USER_TYPES","GET_USER_TYPES","Services","KPIsService","ReportingService","UsersService","Routes","SERVICES","REQUEST","doToast","Toaster","className","position","maxToasts","Notifications","message","show","intent","icon","timeout","info","require","Client","console","log","login","isAuthenticated","logout","Sidebar","state","selected","setState","props","children","Component","SidebarItem","link","to","onClick","tooltip","content","Position","RIGHT","fill","minimal","large","UIManager","theme","t","toLowerCase","isThemeSet","setTheme","document","body","getTheme","isDarkThemeEnabled","applySelectedTheme","setChartView","getCurrentView","defaults","global","defaultFontColor","legend","fontColor","view","_v","pathname","toString","slice","length","toLocaleLowerCase","AppSideBar","handleLogout","e","preventDefault","themeIcon","themeToSwitch","goHome","isOpen","switchTheme","bind","swtichTheme","changeSelection","MainContainer","displayBgImage","appView","undefined","app","homeView","disply","noAppBar","selectPlace","PrivateRoute","component","rest","render","Settings","TableHeaders","map","header","center","text","renderTableHeader","defaultProps","Table","errorMsg","renderTableRows","rows","information","Classes","TEXT_MUTED","onRefresh","renderNonIdealState","striped","condensed","interactive","renderTableBody","isLoading","renderContent","TableCell","value","key","handleCellValue","ProjectsTable","handleSelection","onSelection","EmployeesOptions","options","option","getOptions","setLoading","getEmployees","Array","loading","size","disabled","alignText","Alignment","LEFT","ref","onChange","hidden","placeholder","renderOptions","ProjectForm","onSubmit","buttonCaption","onClear","selectedManager","Form","label","labelFor","labelInfo","colSpan","addButtonCaption","ProjectDialog","onClose","toClose","toggle","toOpen","handleSubmit","isAlertOpen","confirmButtonText","onConfirm","cancelButtonText","onCancel","closeAlert","ussePortal","container","getElementById","errorMessage","TableControllers","onEdit","canEdit","onAdd","onDelete","canDelete","small","activeTabID","selectedTabId","openAlert","isAddDialogOpen","isEditDialogOpen","isDeleteAlertOpen","getSelected","sel","isSelected","a","createProjectDTO","saveProject","success","getProjectsData","response","alert","handleUpdate","updateProject","openEditDialog","getProjectById","handleTabChange","getProjects","resetErrorMsg","deleteProjectByID","closeDeleteAlert","msg","openDialog","openDeleteAlert","title","panel","Expander","renderControlls","closeEditDialog","clearForm","closeDialog","deleteUser","ReportsTable","report","getCompletedValue","toDateString","val","toFixed","KPIsOptions","getKPIs","ReportForm","selectedKPI","vale","formatDate","toLocaleDateString","handleDateChange","parseDate","defaultValue","minDate","onValueChange","onResultValueChange","renderRest","UserDialog","isEmployeesDialogOpen","isUserEditDialogOpen","createReportDTO","saveReport","getData","updateReport","handleResultValueChange","number","handleValueChange","newFromDate","getReportById","setUserId","getReports","getEmployeeByUserID","getUserId","deleteReportByID","closeUserEditDialog","handleDateFromChange","closeEmployeesDialog","UsersTable","usersData","UserTypesOptions","roles","renderPlaceholder","UserForm","leftIcon","checked","defaultChecked","clearButtonCaption","BeforeDeleteAlert","portalID","AdminPanel","users","isUserDialogOpen","usr","createUserDTO","saveNewUser","getUsersData","updateUser","getUsers","openUserEditDialog","openUserDialog","closeUserDialog","CardHeader","isBodyOpen","CardBody","Chart_","setChartFontColor","_displyGridLinesX","_displyGridLinesY","_isDoughnut","_doughnutHole","chartOption","maintainAspectRatio","labels","responsive","cutoutPercentage","scales","xAxes","ticks","display","gridLines","drawBorder","color","yAxes","chartType","height","width","getChartOption","getChart","CardWithChart","collapse","modal","windowMaximize","headerText","class","iconSize","testData","MainDashboard","testd","datasets","backgroundColor","borderColor","getKPITargetData","dataBar","getKPIData","data_line","dataRound","switchShowReportFilter","showReportFilter","activeTab","tab","P","Row","Col","xl","lg","md","sm","xs","DashboardControllers","CardWithModal","LineChart","chart","background","dropShadow","enabled","top","left","blur","opacity","foreColor","toolbar","dataLabels","stroke","curve","align","grid","row","colors","xaxis","style","cssClass","categories","axisBorder","yaxis","max","Math","series","targetValue","annotations","y","y2","strokeDashArray","fillColor","offsetX","offsetY","yAxisIndex","targetInfo","getAverage","horizontalAlign","floating","values","reduce","previous","current","toPrecision","description","ChartsBuilder","kpis","unpackData","k","d","reports","r","toLocaleString","yaxisLabel","xasisLabel","renderKPIs","ProjectOptions","Dashboard","selectedProjectName","onChangeProject","selectedIndex","getReportByProjectID","renderProjectOptions","KPIsTable","KPIForm","onTargetValueChange","handleDateToChange","selectedProject","isNoData","setDefaultToDate","createKPIDTO","saveKPI","handleError","updateKPI","handleTargetValueChange","newToDate","getKPIById","finalDate","setDate","getDate","deleteKPIById","isEmpty","deleteItem","EmployeesTable","getEmployeeTypes","TeamsOptions","getTeams","EmployeeForm","selectedUser","selectedType","selectedTeam","EmployeePanel","toOpenUserEditDialog","toCloseUserEditDialog","toOpenEmployeesDialog","toCloseEmployeesDialog","onAlertClose","onDeleteConfirm","onDeleteCancel","beforeDeleteInfo","saveEmployee","getEmployeesData","getEmployeeUpdateDTO","updateEmployee","getEmployeeById","deleteEmployeeById","openEmployeesDialog","deleteEmployee","TeamsTable","TeamForm","createTeamDTO","saveTeam","updateTeam","getTeamById","deleteTeamByID","Route404","handleGoHome","action","Login","alertVisible","authenticated","resetMessage","checkLogin","offset","ALIGN_RIGHT","rightIcon","Home","testResult","testServiceResult","testingCurrentUserAuth","exact","path","home","Dashboards","from","App","FocusStyleManager","onlyShowFocusOnTabs","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kZAsCAA,EAAOC,QAtCU,CACd,CACGC,aAAc,IACdC,OAAQ,GACRC,OAAQ,KAEX,CACGF,aAAc,IACdC,OAAQ,IACRC,OAAQ,MAEX,CACGF,aAAc,IACdC,OAAQ,IACRC,OAAQ,KAEX,CACGF,aAAc,IACdC,OAAQ,KACRC,OAAQ,MAEX,CACGF,aAAc,IACdC,OAAQ,IACRC,OAAQ,KAEX,CACGF,aAAc,IACdC,OAAQ,IACRC,OAAQ,KAEX,CACGF,aAAc,IACdC,OAAQ,KACRC,OAAQ,Q,6SC7BOC,E,kCAAAA,EACXC,MAAQC,mBCHlB,IAEqBC,E,kCAAAA,EACXC,cAAgBF,kBADLC,EAEXE,mBAAqBH,qBAFVC,EAGXG,qBAAuBJ,uBAHZC,EAIXI,qBAAuBL,uBAJZC,EAKXK,wBAA0BN,uBALfC,EAMXM,gBAAkBP,kBANPC,EAOXO,gBAAkBR,kBAPPC,EAQXQ,sBAAwBT,kBCVlC,IAEqBU,E,kCAAAA,EACXC,oBAAsBX,uBADXU,EAEXE,yBAA2BZ,0BAFhBU,EAGXG,sBAAwBb,uBAHbU,EAIXI,4BAA8Bd,uBCNxC,IAEqBe,E,kCAAAA,EAIXC,aAAehB,iBAJJe,EASXE,oBAAsBjB,sBATXe,EAcXG,kBAAoBlB,oBAdTe,EAmBXI,mBAAqBnB,iBAnBVe,EAwBXK,eAAiBpB,iBAxBNe,EA6BXM,qBAAuBrB,iBC/BjC,IAEqBsB,E,kCAAAA,EAIXC,UAAYvB,cAJDsB,EASXE,iBAAmBxB,mBATRsB,EAcXG,eAAiBzB,iBAdNsB,EAmBXI,gBAAkB1B,cAnBPsB,EAwBXK,YAAc3B,cAxBHsB,EA6BXM,kBAAoB5B,cC/B9B,IAEqB6B,E,kCAAAA,EAIXC,SAAW9B,YAJA6B,EASXE,cAAgB/B,eATL6B,EAUXG,sBAAwBhC,oBAVb6B,EAeXI,eAAiBjC,YAfN6B,EAoBXK,WAAalC,YApBF6B,EAyBXM,iBAAmBnC,YC3B7B,IAEqBoC,E,kCAAAA,EACXC,YAAcrC,gBADHoC,EAEXE,iBAAmBtC,mBAFRoC,EAGXG,qBAAuBvC,oBAHZoC,EAIXI,yBAA2BxC,wBAJhBoC,EAKXK,cAAgBzC,gBALLoC,EAMXM,cAAgB1C,gBANLoC,EAOXO,oBAAsB3C,gBCThC,IAEqB4C,E,kCAAAA,EACXC,YAAc7C,cADH4C,EAEXE,gBAAkB9C,qBAFP4C,EAGXG,YAAc/C,cAHH4C,EAIX7C,MAAQC,oBAJG4C,EAKXI,iBAAmBhD,sBALR4C,EAMXK,cAAgBjD,c,ICFLkD,EAClB,aACG,OADY,oBACLC,MAFQD,EAKXE,KAAOtD,EALIoD,EAMXG,UAAYpD,EANDiD,EAOXI,gBAAkBC,EAPPL,EAQXnC,SAAWyC,EARAN,EASXO,MAAQC,EATGR,EAUXrB,IAAM8B,EAVKT,EAWXU,QAAUxB,EAXCc,EAYXW,MAAQjB,E,qBCsGHkB,E,uGAtHT,IAAIC,EAAOC,aAAaC,QAAQ,SAAW,KAC3C,OAAKF,EAGLA,EAAOG,KAAKC,MAAMJ,GAFR,O,kCAUV,OAAOZ,KAAKiB,UAAUC,M,gCAOtB,OAAOlB,KAAKiB,UAAUE,aAAaC,O,oCAOnC,OAAOpB,KAAKiB,UAAUI,W,sCAQtB,OAAOrB,KAAKiB,UAAUK,SAASJ,M,wCAO/B,OAAsB,MAAlBlB,KAAKiB,UACCjB,KAAKiB,UAAUM,MAElB,K,+BAOP,OAAOvB,KAAKiB,UAAUE,aAAaK,M,gCAOnC,OAAOxB,KAAKyB,gB,kCAOZ,OAAOzB,KAAKiB,UAAUE,aAAaO,KAAKR,M,yCAOxC,OAAOlB,KAAKiB,UAAUE,aAAaQ,Q,qCAOnC,OAAO3B,KAAKiB,UAAUU,Q,mCAOtB,OAAO3B,KAAKiB,UAAUE,aAAaS,QAAQR,O,qCAO3C,OAAOpB,KAAKiB,UAAUE,aAAaS,QAAQV,M,kCAO3C,OAAOlB,KAAKiB,UAAUE,aAAaU,GAAGT,O,gCAOtC,OAAOpB,KAAKiB,UAAUE,aAAaU,GAAGX,M,mCAOtC,OAAOlB,KAAKiB,UAAUE,aAAaU,GAAGF,U,KC7C7BhF,E,8GAlEYiE,GAErB,OADAC,aAAaiB,QAAQ,OAAQf,KAAKgB,UAAUnB,IACrCZ,KAAKgC,wB,4CASZ,OAAwC,OAAjCnB,aAAaC,QAAQ,U,2CAS5B,OADAD,aAAaoB,WAAW,QACgB,OAAjCpB,aAAaC,QAAQ,U,iCAQD,wDAAC,IACxBF,EAAOC,aAAaC,QAAQ,SAAW,KAC3C,OAAKF,GAGLA,EAAOG,KAAKC,MAAMJ,IACNW,MAHF,O,6CAUV,IAAID,EAAWX,EAAKc,cAEpB,MACgB,SAAbH,GACa,UAAbA,GACa,uBAAbA,GACa,oBAAbA,I,sCAWH,IAAIA,EAAWX,EAAKc,cAEpB,MAAiB,SAAbH,GAAoC,UAAbA,M,KChEZY,E,0GACEC,EAAUC,GAC3B,MAAO,CACJxB,KAAM,CACHe,MAAOQ,EACPC,SAAUA,M,oEAKAD,EAAUC,G,gFACbC,IACTC,KAAKC,EAAIxC,OAAOE,KAAKrD,MAAOoD,KAAKwC,aAAaL,EAAUC,IACxDK,KAAK,SAAAC,GACH,IAAIC,EAAahG,EAAKiG,iBAAiBF,EAAOG,KAAKjC,MAOnD,OAJI+B,GACDG,OAAOC,SAASC,SAGZL,IAETM,MAAM,SAAAC,GACJ,MAAMA,I,uLAKZ,OAAOvG,EAAKqF,wB,uJAICrF,EAAKwG,qB,8ICxBTC,EANDf,IAAMgB,OAAO,CACxBC,QAAS,CACNC,cAAe,SAAW5G,EAAK6G,cCThBC,E,WAClB,WAAYrC,EAAMO,EAAOf,EAAM8C,EAAM9B,EAAS+B,GAAO,oBAClD3D,KAAKoB,KAAOA,EACZpB,KAAK2B,MAAQA,EACb3B,KAAKY,KAAgB,KAATA,EAAc,KAAOA,EACjCZ,KAAK0D,KAAOA,EACZ1D,KAAK4B,QAAUA,EACf5B,KAAK2D,KAAOA,E,6DAIZ,MAAO,CACJC,SAAU,CACPxC,KAAMpB,KAAKoB,KACXO,MAAO3B,KAAK2B,MACZf,KAAMZ,KAAKY,KACX8C,KAAM1D,KAAK0D,KACX9B,QAAS5B,KAAK4B,QACd+B,KAAM3D,KAAK2D,S,8CAKIE,GACrB,MAAO,CACJD,SAAU,CACP1C,IAAK2C,EAAI3C,IACTS,MAAOkC,EAAIlC,MACXf,KAAMiD,EAAIjD,KAAKM,IACfwC,KAAMG,EAAIH,KAAKxC,IACfU,QAASiC,EAAIjC,QAAQV,IACrByC,KAAME,EAAIF,KAAKzC,U,KC3BN4C,E,uJACa1C,EAAMO,EAAOf,EAAM8C,EAAM9B,EAAS+B,G,yFACvD,IAAIF,EACRrC,EACAO,EACAf,EACA8C,EACA9B,EACA+B,GACDI,kB,6LAIFC,EACA5C,EACAO,EACAf,EACA8C,EACA9B,EACA+B,G,sFAEgB3D,KAAKiE,kBAClB7C,EACAO,EACAf,EACA8C,EACA9B,EACA+B,G,cANCE,E,QAQAD,SAAS1C,IAAM8C,E,kBACZH,G,8QAIMT,EAAQc,IAAI3B,EAAIxC,OAAOG,UAAUnD,eAC1C0F,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,qNAGcH,G,gFACbZ,EAAQc,IAAI3B,EAAIxC,OAAOG,UAAUlD,mBAAqBgH,GAC/DvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,wNAIgB/C,G,gFACfgC,EAAQc,IAAI3B,EAAIxC,OAAOG,UAAUjD,qBAAuBmE,GACjEqB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,0NAIkBH,G,gFACjBZ,EAAQc,IAClB3B,EAAIxC,OAAOG,UAAU/C,wBAA0B6G,GAE9CvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,mNAIWP,G,gFACVR,EAAQd,KAAKC,EAAIxC,OAAOG,UAAU9C,gBAAiBwG,GAC5DnB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,qNAIaP,G,gFACZR,EAAQgB,IAAI7B,EAAIxC,OAAOG,UAAU7C,gBAAiBuG,GAC3DnB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,yNAIiBH,G,gFAChBZ,EAAQiB,OAClB9B,EAAIxC,OAAOG,UAAU5C,sBAAwB0G,GAE5CvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,+IC1GGG,E,WAClB,WAAYZ,GAAO,oBAChB1D,KAAK0D,KAAOA,E,6DAGZ,MAAO,CACJA,KAAM,CACHA,KAAM1D,KAAK0D,W,KCHFa,E,mHACWb,GAC1B,OAAO,IAAIc,EAAgBd,GAAMK,mB,iFAEJU,G,yFACtBrB,EAAQd,KACZC,EAAIxC,OAAOI,gBAAgBzC,sBAC3B+G,GAEChC,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,K,0QAILf,EAAQc,IAAI3B,EAAIxC,OAAOI,gBAAgB3C,qBAC1CiF,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,K,iLAGkBH,G,yFACvBZ,EAAQc,IAAI3B,EAAIxC,OAAOI,gBAAgBwE,oBAAsBX,GAChEvB,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,K,qLAGqBH,G,yFAC1BZ,EAAQiB,OACZ9B,EAAIxC,OAAOI,gBAAgBxC,4BAA8BqG,GAExDvB,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,K,uGC9CGzF,E,WAClB,WAAY0C,EAAMwD,EAAWC,EAASC,EAAQlD,EAASmD,GAAU,oBAC9D/E,KAAKoB,KAAOA,EACZpB,KAAK4E,UAAYA,EACjB5E,KAAK6E,QAAUA,EACf7E,KAAK8E,OAASA,EACd9E,KAAK4B,QAAUA,EACf5B,KAAK+E,QAAUA,E,wDAIf,MAAO,CACJC,IAAK,CACF5D,KAAMpB,KAAKoB,KACXwD,UAAW5E,KAAK4E,UAChBC,QAAS7E,KAAK6E,QACdC,OAAQ9E,KAAK8E,OACblD,QAAS5B,KAAK4B,QACdmD,QAAS/E,KAAK+E,c,KCdLE,E,kJAEf7D,EACAwD,EACAC,EACAC,EACAlD,EACAmD,G,yFAEO,IAAIG,EACR9D,EACAwD,EACAC,EACAC,EACAlD,EACAmD,GACDI,a,kQAIW/B,EAAQc,IAAI3B,EAAIxC,OAAOrB,IAAIC,UACpC8D,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,gNAGSH,G,gFACRZ,EAAQc,IAAI3B,EAAIxC,OAAOrB,IAAIE,cAAgBoF,GACpDvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,wNAIgBH,G,gFACfZ,EAAQc,IAAI3B,EAAIxC,OAAOrB,IAAIG,sBAAwBmF,GAC5DvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,8MAIMzF,G,gFACL0E,EAAQd,KAAKC,EAAIxC,OAAOrB,IAAII,eAAgBJ,GACrD+D,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,gNAIQzF,G,gFACP0E,EAAQgB,IAAI7B,EAAIxC,OAAOrB,IAAIK,WAAYL,GAChD+D,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,oNAIYH,G,gFACXZ,EAAQiB,OAAO9B,EAAIxC,OAAOrB,IAAIM,iBAAmBgF,GAC1DvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,+IC9EGiB,E,WAClB,WAAYJ,EAAKK,EAAY3C,EAAQ4C,EAAWC,EAAQC,GAAa,oBAClExF,KAAKgF,IAAMA,EACXhF,KAAKqF,WAAaA,EAClBrF,KAAK0C,OAASA,EACd1C,KAAKsF,UAAYA,EACjBtF,KAAKuF,OAASA,EACdvF,KAAKwF,WAAaA,E,2DAOlB,MAAO,CACJJ,OAAQ,CACLJ,IAAKhF,KAAKgF,IACVK,WAAYrF,KAAKqF,WACjB3C,OAAQ1C,KAAK0C,OACb4C,UAAWtF,KAAKsF,UAChBC,OAAQvF,KAAKuF,OACbC,WAAYxF,KAAKwF,iB,KCXRC,E,6GAQfT,EACAK,EACA3C,EACA4C,EACAC,EACAC,GAEA,OAAO,IAAIJ,EACRJ,EACAK,EACA3C,EACA4C,EACAC,EACAC,GACDE,iB,yEAQmBN,G,gFACRhC,EAAQd,KAAKC,EAAIxC,OAAOU,QAAQnB,cAAe8F,GACxD3C,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,mNASWiB,G,gFACVhC,EAAQgB,IAAI7B,EAAIxC,OAAOU,QAAQlB,cAAe6F,GACvD3C,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,uNASeH,G,gFACdZ,EAAQiB,OAAO9B,EAAIxC,OAAOU,QAAQjB,oBAAsBwE,GACjEvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,mSAUCf,EAAQc,IAAI3B,EAAIxC,OAAOU,QAAQvB,aACxCuD,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,mNASYH,G,gFACXZ,EAAQc,IAAI3B,EAAIxC,OAAOU,QAAQtB,iBAAmB6E,GAC3DvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,uNAIewB,G,gFACdvC,EAAQc,IAAI3B,EAAIxC,OAAOU,QAAQrB,qBAAuBuG,GAC/DlD,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,2NAImBH,G,gFAClBZ,EAAQc,IAAI3B,EAAIxC,OAAOU,QAAQpB,yBAA2B2E,GACnEvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,+IC9HGyB,E,WAClB,WAAYxE,EAAM2D,GAAU,oBACzB/E,KAAKoB,KAAOA,EACZpB,KAAK+E,QAAUA,E,yDAGf,MAAO,CACJpB,KAAM,CACHvC,KAAMpB,KAAKoB,KACX2D,QAAS/E,KAAK+E,c,KCCLc,E,2GAOGzE,EAAM2D,GACxB,OAAO,IAAIa,EAAKxE,EAAM2D,GAASe,e,uEAQZF,G,gFACNxC,EAAQd,KAAKC,EAAIxC,OAAOO,MAAM/B,gBAAiBqH,GACxDnD,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,iNASSyB,G,gFACRxC,EAAQgB,IAAI7B,EAAIxC,OAAOO,MAAM9B,YAAaoH,GACnDnD,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,qNASaH,G,gFACZZ,EAAQiB,OAAO9B,EAAIxC,OAAOO,MAAM7B,kBAAoBuF,GAC7DvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,iSAUCf,EAAQc,IAAI3B,EAAIxC,OAAOO,MAAMlC,WACtCqE,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,iNASUH,G,gFACTZ,EAAQc,IAAI3B,EAAIxC,OAAOO,MAAMhC,eAAiB0F,GACvDvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,oNASY/C,G,gFACXgC,EAAQc,IAAI3B,EAAIxC,OAAOO,MAAMjC,iBAAmB+C,GACzDqB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,+IC3GG4B,E,WAClB,WAAY3E,EAAM2D,GAAU,oBACzB/E,KAAKoB,KAAOA,EACZpB,KAAK+E,QAAUA,E,4DAOf,MAAO,CACJnD,QAAS,CACNR,KAAMpB,KAAKoB,KACX2D,QAAS/E,KAAK+E,c,KCHLiB,E,8GAOM5E,EAAM2D,GAC3B,OAAO,IAAIgB,EAAQ3E,EAAM2D,GAASkB,kB,0EAQZrE,G,gFACTwB,EAAQd,KAAKC,EAAIxC,OAAOnC,SAASI,mBAAoB4D,GAC9Da,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,oNASYvC,G,gFACXwB,EAAQgB,IAAI7B,EAAIxC,OAAOnC,SAASK,eAAgB2D,GACzDa,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,wNASgBH,G,gFACfZ,EAAQiB,OAAO9B,EAAIxC,OAAOnC,SAASM,qBAAuB8F,GACnEvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,oSAUCf,EAAQc,IAAI3B,EAAIxC,OAAOnC,SAASC,cACzC4E,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,oNASaH,G,gFACZZ,EAAQc,IAAI3B,EAAIxC,OAAOnC,SAASG,kBAAoBiG,GAC7DvB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,uNASe/C,G,gFACdgC,EAAQc,IAAI3B,EAAIxC,OAAOnC,SAASE,oBAAsBsD,GAC/DqB,KAAK,SAAAC,GACH,OAAOA,IAETO,MAAM,SAAAkB,GACJ,MAAMA,I,+IC3GGxD,E,WAClB,WAAYwB,EAAUR,EAAOS,EAAUf,GAA0B,IAAhB6E,IAAe,6EAC7DlG,KAAKmC,SAAWA,EAChBnC,KAAK2B,MAAQA,EACb3B,KAAKoC,SAAWA,EAChBpC,KAAKqB,SAAWA,EAChBrB,KAAKkG,OAASA,E,yDAId,MAAO,CACJtF,KAAM,CACHuB,SAAUnC,KAAKmC,SACfR,MAAO3B,KAAK2B,MACZS,SAAUpC,KAAKoC,SACff,SAAUrB,KAAKqB,SACf6E,OAAQlG,KAAKkG,OACbC,UAAW,IAAIC,W,KCTNC,E,2GACGlE,EAAUR,EAAOS,EAAUf,GAA0B,IAAhB6E,IAAe,yDACtE,OAAO,IAAIvF,EAAKwB,EAAUR,EAAOS,EAAUf,EAAU6E,GAAQI,e,0EAOvC1F,G,gFACTwC,EAAQd,KAAKC,EAAIxC,OAAOW,MAAMf,gBAAiBiB,GACxD6B,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,I,iNAQSvD,G,gFACRwC,EAAQgB,IAAI7B,EAAIxC,OAAOW,MAAMhB,YAAakB,GACnD6B,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,I,iNAOSH,G,gFACRZ,EAAQiB,OAAO9B,EAAIxC,OAAOW,MAAMd,YAAcoE,GACvDvB,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,I,iSAQCf,EAAQc,IAAI3B,EAAIxC,OAAOW,MAAMZ,eACtC2C,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,I,oSASCf,EAAQc,IAAI3B,EAAIxC,OAAOW,MAAM6F,WAAWC,gBACjD/D,KAAK,SAAAiC,GACH,OAAOA,IAETzB,MAAM,SAAAkB,GACJ,MAAMA,I,8ICpEGsC,E,kCAAAA,EACXvE,YAAcA,EADHuE,EAEX3C,iBAAmBA,EAFR2C,EAGXlC,sBAAwBA,EAHbkC,EAIXC,YAAcA,EAJHD,EAKXE,iBAAmBA,EALRF,EAMXZ,aAAeA,EANJY,EAOXT,gBAAkBA,EAPPS,EAQXG,aAAeA,E,ICVJrE,E,kCAAAA,EAMXxC,OAAS8G,EANEtE,EAaXuE,SAAWL,EAbAlE,EAeXwE,QAAU3D,E,aCpBd4D,EAAUC,IAAQ5D,OAAO,CAC5B6D,UAAW,GACXC,SAAU,YACVC,UAAW,KAGOC,E,oGACJC,GACXN,EAAQO,KAAK,CAAED,QAASA,M,8BAEZA,GACZN,EAAQO,KAAK,CACVD,QAASA,EACTE,OAAQ,UACRC,KAAM,W,4BAGCH,GACVN,EAAQO,KAAK,CACVD,QAASA,EACTE,OAAQ,UACRC,KAAM,mB,8BAGGH,GACZN,EAAQO,KAAK,CACVD,QAASA,EACTE,OAAQ,SACRC,KAAM,a,4BAGCH,GACVN,EAAQO,KAAK,CACVD,QAASA,EACTE,OAAQ,SACRC,KAAM,Y,6BAGEH,EAASE,EAAQC,EAAMC,GAClCV,EAAQO,KAAK,CACVD,QAASA,EACTE,OAAQA,EACRC,KAAMA,EACNC,QAASA,Q,KCzCdC,EAAOC,EAAQ,KAEEC,E,oPAuCEtF,EAAIwE,QAAQ7C,IAAI3B,EAAIxC,OAAOW,MAAMb,kBAC9C4C,KAAK,SAAAI,GACH,OAAOA,IAETI,MAAM,SAAAkB,GAEJ,OADA2D,QAAQC,IAAI5D,GACLA,I,YANTtB,E,QAQKsB,I,yCACC,I,gCAEHtB,EAAKA,KAAKV,SAAW,OAASU,EAAKA,KAAKxB,U,mKAU/Bc,EAAUC,G,gFACbG,EAAIuE,SAAS5E,YAAY8F,MAAM7F,EAAUC,G,kLAQtD,OAAOG,EAAIuE,SAAS5E,YAAY+F,oB,uJAQnB1F,EAAIuE,SAAS5E,YAAYgG,S,8IA7EvBL,EAMXF,KAAOA,EANIE,EAYXtF,IAAMA,EAZKsF,EAkBXpB,SAAWlE,EAAIuE,SAlBJe,EAwBXR,cAAgBA,EAxBLQ,EA8BXlH,KAAOA,E,aCjCIwH,I,kNAClBC,MAAQ,CACLC,SAAU,G,+EAGGrE,GACbhE,KAAKsI,SAAS,CAAED,SAAUrE,M,+BAI1B,OAAO,yBAAKkD,UAAU,YAAYlH,KAAKuI,MAAMC,c,GAVdC,c,SCEhBC,G,2MAClBN,MAAQ,CACLC,SAAU,EAAKE,MAAMF,SACrBM,KAAM,EAAKJ,MAAMI,M,wEAGV,IAAD,EAC2C3I,KAAKuI,MAA9CK,EADF,EACEA,GAAIP,EADN,EACMA,SAAUZ,EADhB,EACgBA,KAAMoB,EADtB,EACsBA,QAASC,EAD/B,EAC+BA,QACrC,OACG,yBAAK5B,UAAU,IACZ,kBAAC,IAAD,CAAS6B,QAASD,EAAS3B,SAAU6B,KAASC,MAAOC,MAAI,GACtD,kBAAC,IAAD,CAAMN,GAAIA,GACP,kBAAC,IAAD,CACGO,SAAO,EACPC,OAAK,EACL3B,KAAMA,EACNyB,MAAM,EACNhD,SAAQmC,EACRQ,QAASA,W,GAlBWJ,aCDpBC,G,2MAClBN,MAAQ,CACLC,SAAU,EAAKE,MAAMF,SACrBM,KAAM,EAAKJ,MAAMI,M,wEAGV,IAAD,EACqC3I,KAAKuI,MAAxCf,EADF,EACEA,OAAQC,EADV,EACUA,KAAMoB,EADhB,EACgBA,QAASC,EADzB,EACyBA,QAE/B,OACG,6BACG,kBAAC,IAAD,CAASC,QAASD,EAAS3B,SAAU6B,KAASC,MAAOC,MAAI,GACtD,kBAAC,IAAD,CACGC,SAAO,EACPC,OAAK,EACL3B,KAAMA,EACNyB,MAAM,EACN1B,OAAQA,EACRqB,QAASA,U,GAlBcJ,a,SCiH1BY,G,sGAvGIC,GACb,IAAIC,EAAID,EAAME,cACJ,SAAND,GAAsB,UAANA,GACjB1I,aAAaiB,QAAQ,QAASyH,K,iCAajC,OADKvJ,KAAKyJ,cAAczJ,KAAK0J,SAAS,SAC/B7I,aAAaC,QAAQ,W,mCAQ5B,OAAyC,OAAlCD,aAAaC,QAAQ,W,2CAY5B6I,SAASC,KAAK1C,UACc,SAAzBmC,EAAUQ,WAAwB,WAAa,a,oCAW9C7J,KAAK8J,qBACN9J,KAAK0J,SAAS,SAEd1J,KAAK0J,SAAS,QAEjB1J,KAAK+J,qBACL/J,KAAKgK,eACyB,eAA1BhK,KAAKiK,kBACNnH,OAAOC,SAASC,W,2CASnB,MAAW,SADFhD,KAAK6J,a,4CAWd,OAAQ7J,KAAK8J,uB,qCAIb,IAAIR,EAAQtJ,KAAK6J,WACH,SAAVP,IACDY,KAASC,OAAOC,iBAAmB,YACnCF,KAASC,OAAOE,OAAOC,UAAY,SAExB,UAAVhB,IACDY,KAASC,OAAOC,iBAAmB,QACnCF,KAASC,OAAOE,OAAOC,UAAY,W,qCAInBC,GACnB1J,aAAaiB,QAAQ,OAAQyI,K,uCAI7B,GAAS,MADD1J,aAAaC,QAAQ,QACd,CACZ,IAAI0J,EAAK1H,OAAOC,SAAS0H,SAASC,WAElC,OADAF,EAAKA,EAAGG,MAAM,EAAGH,EAAGI,SACVC,yB,KCvGEC,G,YAClB,WAAYvC,GAAQ,IAAD,8BAChB,4CAAMA,KAgCTwC,aAAe,SAAAC,GACZA,EAAEC,iBACFpD,EAAOK,SACP,EAAKI,SAAS,CACXJ,QAAQ,KAnCX,EAAKE,MAAQ,CACVC,SAAUgB,GAAUY,iBACpBiB,UAAW7B,GAAUS,qBAAuB,QAAU,OACtDqB,cAAe9B,GAAUS,qBAAuB,QAAU,OAC1D5B,QAAQ,EACRkD,QAAQ,EACRC,QAAQ,GAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,iBACnB,EAAKR,aAAe,EAAKA,aAAaQ,KAAlB,iBAXJ,E,iFAchBvL,KAAKsI,SAAS,CACXD,SAAUgB,GAAUY,qB,sCAIVjG,GACbhE,KAAKsI,SAAS,CAAED,SAAUrE,IAC1BqF,GAAUW,aAAahG,K,oCAIvBqF,GAAUmC,cACVnC,GAAUW,eACVhK,KAAKsI,SAAS,CACX4C,UAAW7B,GAAUS,qBAAuB,QAAU,OACtDqB,cAAe9B,GAAUS,qBAAuB,QAAU,W,+BAYtD,IAAD,OACEzB,EAAarI,KAAKoI,MAAlBC,SAER,OAAIrI,KAAKoI,MAAMF,OACL,kBAAC,IAAD,CAAUU,GAAG,MAIpB,kBAAC,GAAD,KACG,yBAAK1B,UAAU,0BACZ,uBAAGA,UAAU,qBAEhB,kBAAC,IAAD,MACA,yBAAKA,UAAU,yBACZ,kBAAC,GAAD,CACG0B,GAAG,QACHnB,KAAK,OACLqB,QAAQ,OACRT,SAAuB,SAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,WAEvC,kBAAC,GAAD,CACG7C,GAAG,cACHnB,KAAK,YACLqB,QAAQ,YACRT,SAAuB,cAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,gBAEvC,kBAAC,GAAD,CACG7C,GAAG,QACHnB,KAAK,SACLqB,QAAQ,OACRT,SAAuB,SAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,WAEvC,kBAAC,GAAD,CACG7C,GAAG,WACHnB,KAAK,wBACLqB,QAAQ,UACRT,SAAuB,YAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,cAEvC,kBAAC,GAAD,CACG7C,GAAG,YACHnB,KAAK,cACLqB,QAAQ,WACRT,SAAuB,aAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,eAEvC,kBAAC,GAAD,CACG7C,GAAG,SACHnB,KAAK,SACLqB,QAAQ,QACRT,SAAuB,UAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,YAEvC,kBAAC,GAAD,CACG7C,GAAG,aACHnB,KAAK,OACLqB,QAAQ,YACRT,SAAuB,cAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,gBAGvC,kBAAC,GAAD,CACG7C,GAAG,cACHnB,KAAK,UACLqB,QAAQ,cACRT,SAAuB,eAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,kBAI1C,yBAAKvE,UAAU,yBACZ,kBAAC,IAAD,MACA,kBAAC,GAAD,CACGO,KAAMzH,KAAKoI,MAAM8C,UACjB1D,OAAO,GACPsB,QAAQ,eACRD,QAAS7I,KAAKsL,cAEjB,kBAAC,GAAD,CACG1C,GAAG,YACHnB,KAAK,MACLqB,QAAQ,WACRT,SAAuB,aAAbA,EACVQ,QAAS,kBAAM,EAAK4C,gBAAgB,eAEvC,kBAAC,GAAD,CACGhE,KAAK,QACLD,OAAO,SACPsB,QAAQ,SACRD,QAAS7I,KAAK+K,qB,GAtIQtC,aCLnBiD,I,yNAClBtD,MAAQ,CACLuD,eAAgB,EAAKA,eAAe,EAAKpD,MAAMoD,gBAC/CC,aAA4BC,IAAnB,EAAKtD,MAAMuD,IACpBC,cAA6BF,IAAnB,EAAKtD,MAAMuD,K,8EAGTE,GACZ,OAAIA,EACM,WAEH,K,oCAGK,IAAD,EAC6BhM,KAAKuI,MAArCqD,EADG,EACHA,QAASG,EADN,EACMA,SAAUE,EADhB,EACgBA,SAC3B,OAAIL,EACM,gBAENG,EACM,iBAENE,EACM,iBAEH,K,+BAGA,IAAD,EACkCjM,KAAKuI,MAArCqD,EADF,EACEA,QAASG,EADX,EACWA,SAAUE,EADrB,EACqBA,SAE3B,OAAIL,GAAWG,EAET,yBAAK7E,UAAU,kBACZ,yBACGA,UAAS,UAAKlH,KAAK2L,eAAe3L,KAAKuI,MAAMoD,gBAApC,qCACD3L,KAAKkM,cADJ,KAETlI,GAAG,iBAEFhE,KAAKuI,MAAMC,WAKpByD,EAEE,yBACG/E,UAAS,UAAKlH,KAAK2L,eAAe3L,KAAKuI,MAAMoD,gBAApC,qCACE3L,KAAKkM,eAChBlI,GAAG,iBAEFhE,KAAKuI,MAAMC,eAPrB,M,GA5CqCC,cCG5B,SAAS0D,GAAT,GAA0D,IAAvB1D,EAAsB,EAAjC2D,UAAyBC,EAAQ,6BAErE,OAGG,kBAAC,IAAD,iBACOA,EADP,CAEGC,OAAQ,SAAA/D,GAAK,OACVV,EAAOI,kBACJ,6BACG,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAe2D,SAAO,GACnB,kBAACnD,EAAcF,KAIrB,kBAAC,IAAD,CAAUK,GAAG,e,ICrBP2D,G,iLAEf,OAAO,kC,GAFyB9D,a,QCAjB+D,G,4LAEf,OAAOxM,KAAKuI,MAAMjF,QAAQmJ,IAAI,SAAAC,GAC3B,OACG,wBAAIxF,UAAWwF,EAAOC,OAAS,cAAgB,IAC3CD,EAAOE,U,+BAOjB,OACG,+BACG,4BAAK5M,KAAK6M,0B,GAdoBpE,aAoB1C+D,GAAaM,aAAe,CACzBxJ,QAAS,I,ICXSyJ,G,2MAClB3E,MAAQ,CACL4E,SAAU,I,mFAGV,OAAO,kBAAC,GAAD,CAAc1J,QAAStD,KAAKuI,MAAMjF,Y,wCAGzC,OAAO,+BAAQtD,KAAKiN,qB,wCAGpB,OAAOjN,KAAKuI,MAAM2E,O,0CAGDR,GAA2B,IAAD,OAAlBS,EAAkB,uDAAJ,GACvC,OACG,yBAAKjG,UAAU,aACZ,kBAAC,IAAD,CAAeO,KAAK,SACjB,kBAAC,IAAD,KACG,gCAASiF,IAEZ,uBAAGxF,UAAWkG,KAAQC,YAAaF,GACnC,kBAAC,IAAD,CACG1F,KAAK,UACL0B,SAAO,EACPN,QAAS,WACN,EAAKN,MAAM+E,YACX,EAAKhF,SAAS,CACX0E,SAAU,Y,sCAc5B,OAJIhN,KAAKuI,MAAMyE,UACZhN,KAAKuN,oBAAoB,uBAAwB,qBAGrB,IAA3BvN,KAAKuI,MAAM2E,KAAKtC,OACV5K,KAAKuN,oBAAoB,iCAIhC,kBAAC,IAAD,CACGrE,KAAK,OACLsE,SAAS,EACTC,WAAS,EACTC,aAAW,EACXxG,UAAWlH,KAAKuI,MAAMrB,WAErBlH,KAAK6M,oBACL7M,KAAK2N,qB,+BAQZ,OAFsB3N,KAAKuI,MAAnBqF,UAGE,kBAAC,IAAD,CAASpG,OAAO,YAEnBxH,KAAK6N,oB,GAlEiBpF,aAsEnCsE,GAAMD,aAAe,CAClBI,KAAM,GACNI,UAAW,c,ICjFOQ,G,wLACFC,GACb,MAAqB,mBAAVA,EACJA,EACM,kBAAC,IAAD,CAAMtG,KAAK,OAAOD,OAAO,YAE5B,kBAAC,IAAD,CAAMC,KAAK,QAAQD,OAAO,WAEf,qBAAVuG,EACD,MAEG,MAATA,EACM,OAEHA,I,+BAGA,IAAD,EACyB/N,KAAKuI,MAA5BoE,EADF,EACEA,OAAQoB,EADV,EACUA,MAAOC,EADjB,EACiBA,IACvB,OACG,wBAAI9G,UAAWyF,EAAS,cAAgB,GAAIqB,IAAKA,GAC7ChO,KAAKiO,gBAAgBF,Q,GArBKtF,aCClByF,G,2MAClB9F,MAAQ,CACLC,SAAU,GACV/E,QAAS,CACN,CAAEsJ,KAAM,IAAKD,QAAQ,GACrB,CAAEC,KAAM,QACR,CAAEA,KAAM,a,iFAKX,OAAO,+BAAQ5M,KAAKiN,qB,wCAEJ,IAAD,OAEf,OADiBjN,KAAKuI,MAAd1F,KACI4J,IAAI,SAAC7K,EAASoM,GACvB,OACG,wBACGA,IAAKpM,EAAQV,IACb2H,QAAS,SAAAmC,GAAC,OAAI,EAAKmD,gBAAgBnD,EAAGpJ,IACtCsF,UAAS,WACN,EAAKkB,MAAMC,SAASnH,MAAQU,EAAQV,IAAM,cAAgB,KAG7D,kBAAC,GAAD,CAAWyL,QAAM,EAACoB,MAAOC,EAAKA,IAAKA,IACnC,kBAAC,GAAD,CAAWD,MAAOnM,EAAQR,OAC1B,kBAAC,GAAD,CAAW2M,MAAOnM,EAAQmD,QAAQ3D,Y,sCAM9B4J,EAAGpJ,GAGhB,GAFAoJ,EAAEC,iBACmBjL,KAAKoI,MAAlBC,SACKnH,MAAQU,EAAQV,IAK1B,OAJAlB,KAAKuI,MAAM6F,YAAYxM,GAAS,QAChC5B,KAAKsI,SAAS,CACXD,SAAUzG,IAIhB5B,KAAKuI,MAAM6F,YAAY,IAAI,GAC3BpO,KAAKsI,SAAS,CAAED,SAAU,O,+BAI1B,OACG,kBAAC,GAAD,CACG/E,QAAStD,KAAKoI,MAAM9E,QACpB4J,KAAMlN,KAAKiN,kBACXD,SAAUhN,KAAKuI,MAAMyE,SACrBY,UAAW5N,KAAKuI,MAAMqF,UACtBN,UAAWtN,KAAKuI,MAAM+E,gB,GArDS7E,aA0D3CyF,GAAcpB,aAAe,CAC1BjK,KAAM,GACNyK,UAAW,c,uBC5DOe,G,2MAClBjG,MAAQ,CACLkG,QAAS,GACTV,WAAW,EACXW,OAAQ,I,mFAGRvO,KAAKwO,e,iKAIFxO,KAAKyO,YAAW,G,SACG5G,EAAOpB,SAAS3C,iBAAiB4K,e,OAAhDhM,E,OACJ1C,KAAKsI,SAAS,CACXgG,QAAS5L,EAAOG,O,gDAGnB7C,KAAKsI,SAAS,CAAEgG,QAAS,IAAIK,MAAM,OAAQJ,OAAQ,Q,yBAEnDvO,KAAKyO,YAAW,G,iKAGXG,GACR5O,KAAKsI,SAAS,CAAEsF,UAAWgB,M,sCAG3B,GAAI5O,KAAKoI,MAAMkG,QACZ,OAAOtO,KAAKoI,MAAMkG,QAAQ7B,IAAI,SAAC8B,EAAQP,GACpC,OACG,4BAAQA,IAAKA,EAAKD,MAAOQ,EAAOrN,KAC5BqN,EAAOnN,U,+BAMb,IACCwM,EAAc5N,KAAKoI,MAAnBwF,UAER,OAAIA,EAEE,kBAAC,IAAD,CACGnG,KAAM,kBAAC,IAAD,CAASoH,KAAM,KACrBC,SAAUlB,EACVmB,UAAWC,KAAUC,KACrB/F,MAAI,GAJP,gBAWH,kBAAC,IAAD,CACGlF,GAAIhE,KAAKuI,MAAMvE,GACfkL,IAAKlP,KAAKuI,MAAM2G,IAChBC,SAAUnP,KAAKuI,MAAM4G,SACrBL,SAAU9O,KAAKuI,MAAMuG,SACrB5F,KAAMlJ,KAAKuI,MAAMW,KACjB6E,MAAO/N,KAAKuI,MAAMF,UAElB,4BAAQA,UAAQ,EAAC+G,QAAM,EAACN,UAAQ,GAC5B9O,KAAKuI,MAAM8G,aAEdrP,KAAKsP,qB,GA/D4B7G,aCOzB8G,G,iLACR,IAAD,EASFvP,KAAKuI,MAPN4G,EAFG,EAEHA,SACAK,EAHG,EAGHA,SACAC,EAJG,EAIHA,cACAC,EALG,EAKHA,QACAtO,EANG,EAMHA,KACA2D,EAPG,EAOHA,QACA4K,EARG,EAQHA,gBAGH,OACG,6BACG,kBAACC,GAAA,EAAD,CAAM1I,UAAU,OAAOgI,IAAI,qBACxB,kBAAC,IAAD,CAAWzB,WAAS,GACjB,4BACG,4BACG,kBAAC,IAAD,CACGoC,MAAM,eACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,OACHmL,SAAUA,EACVE,YAAY,kBACZ3L,KAAK,OACLqK,MAAO3M,EACP8H,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,UACNC,SAAS,UACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,UACHmL,SAAUA,EACVE,YAAY,qBACZtB,MAAOhJ,EACPmE,MAAI,EACJb,SAAUsH,OAMtB,yBAAKzI,UAAU,cACZ,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAQO,KAAK,UAAUoB,QAAS6G,GAAhC,SAGA,kBAAC,IAAD,CAAQjI,KAAK,QAAQoB,QAAS2G,GAC1BC,W,GA9DgBhH,aAuEzC8G,GAAYzC,aAAe,CACxBmD,iBAAkB,O,IC/EAC,G,iLAEf,OACG,yBAAKlM,GAAG,iBACL,kBAAC,IAAD,CACGqH,OAAQrL,KAAKuI,MAAM8C,OACnB8E,QAASnQ,KAAKuI,MAAM6H,QACpBC,OAAQrQ,KAAKuI,MAAM+H,QAEnB,kBAAC,IAAD,KACG,yBAAKpJ,UAAU,aACZ,yBAAKlD,GAAIhE,KAAKuI,MAAMvE,IACjB,kBAAC,GAAD,CACG5C,KAAMpB,KAAKuI,MAAMnH,KACjB2D,QAAS/E,KAAKuI,MAAMxD,QACpB4K,gBAAiB3P,KAAKuI,MAAMoH,gBAC5BR,SAAUnP,KAAKuI,MAAM4G,SACrBK,SAAUxP,KAAKuI,MAAMgI,aACrBd,cAAezP,KAAKuI,MAAMkH,cAC1BC,QAAS1P,KAAKuI,MAAMmH,aAKhC,kBAAC,IAAD,CACGrE,OAAQrL,KAAKuI,MAAMiI,YACnBC,kBAAkB,aAClBC,UAAW1Q,KAAKuI,MAAMmH,QACtBiB,iBAAiB,SACjBC,SAAU5Q,KAAKuI,MAAMsI,WACrBrJ,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CACGC,UAAWpH,SAASqH,eAAe,oBAIzC,kBAAC,IAAD,KAAKhR,KAAKuI,MAAM0I,cAChB,yE,GAvCyBxI,aCDtByI,G,iLACR,IAAD,EAQFlR,KAAKuI,MANN4I,EAFG,EAEHA,OACAC,EAHG,EAGHA,QACAC,EAJG,EAIHA,MACAC,EALG,EAKHA,SACAC,EANG,EAMHA,UACAjE,EAPG,EAOHA,UAEH,OACG,6BACG,kBAAC,IAAD,KAActN,KAAKuI,MAAMC,UACzB,kBAAC,IAAD,KACG,kBAAC,IAAD,CACGf,KAAK,OACL+J,OAAK,EACLrI,SAAO,EACPN,QAASsI,EACTrC,SAAUsC,IAEb,kBAAC,IAAD,CAAQ3J,KAAK,MAAM+J,OAAK,EAACrI,SAAO,EAACN,QAASwI,IAC1C,kBAAC,IAAD,CACG5J,KAAK,QACL+J,OAAK,EACLrI,SAAO,EACPN,QAASyI,EACTxC,SAAUyC,IAEb,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQ9J,KAAK,UAAU+J,OAAK,EAACrI,SAAO,EAACN,QAASyE,U,GA9Bf7E,aCazBpI,G,2MAClB+H,MAAQ,CACLqJ,YAAa,WACbC,cAAe,WACf9D,WAAW,EACX/K,KAAM,GACN8O,WAAW,EACXV,aAAc,GACdW,iBAAiB,EACjBC,kBAAkB,EAClBC,mBAAmB,EACnBV,SAAS,EACTG,WAAW,EACXnQ,KAAM,GACN2D,QAAS,GACTsD,SAAU,I,EAGb0J,YAAc,SAACC,EAAKC,GACjB,EAAK3J,SAAS,CACXD,SAAU2J,EACVZ,QAASa,EACTV,UAAWU,K,EA2CjB1B,a,sCAAe,WAAMvF,GAAN,uBAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEc,EAAK7C,MAAvBhH,EAFI,EAEJA,KAAM2D,EAFF,EAEEA,QACViI,EAAW,gBAHH,SAIQnF,EAAOpB,SAAST,gBAAgBmM,iBACjD/Q,EACA2D,GANS,cAIRnD,EAJQ,yBASUiG,EAAOpB,SAAST,gBAAgBoM,YAChDxQ,GAVM,OAYa,MAZb,OAYE2D,SACRsC,EAAOR,cAAcgL,QAArB,kBAAwCjR,EAAxC,wBACA,EAAKkR,mBAdC,kDAiBmB,MAAxB,KAAIC,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B5L,EAA5B,YACRyG,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GAzBN,wD,wDA4BfyF,a,sCAAe,WAAMzH,GAAN,2BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEwB,EAAK7C,MAAjChH,EAFI,EAEJA,KAAM2D,EAFF,EAEEA,QAASsD,EAFX,EAEWA,SAEnB2E,EAAW,gBAJH,kBAMWnF,EAAOpB,SAAST,gBAAgBmM,iBACjD/Q,EACA2D,GARM,cAMLnD,EANK,QAUDA,QAAQV,IAAMmH,EAASnH,IAVtB,UAWU2G,EAAOpB,SAAST,gBAAgB0M,cAChD9Q,GAZM,QAca,OAHlBc,EAXK,QAcE6C,SACRsC,EAAOR,cAAcgL,QAArB,kBAAwCjR,EAAxC,wBACA,EAAKkR,kBACLxK,QAAQC,IAAIrF,EAAOG,KAAKe,WAjBlB,kDAoBmB,MAAxB,KAAI2O,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B5L,EAA5B,YACRyG,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GA5BN,wD,wDA0CfmC,SAAW,SAAAnE,GACR,IAAM5C,EAAQ,EAAKA,MACnBA,EAAM4C,EAAElG,OAAOd,IAAMgH,EAAElG,OAAOiJ,MAC9B,EAAKzF,SAASF,I,EAcjBuK,e,sCAAiB,WAAM3H,GAAN,mBAAAkH,EAAA,4DACdlH,EAAEC,iBACM5C,EAAa,EAAKD,MAAlBC,SAFM,kBAIQR,EAAOpB,SAAST,gBAAgB4M,eAChDvK,EAASnH,KALD,OAOW,OAHlBwB,EAJO,QAOA6C,SACJ3D,EAAUc,EAAOG,KACrB,EAAKyF,SAAS,CACXuJ,kBAAkB,EAClBzQ,KAAMQ,EAAQR,KACd2D,QAASnD,EAAQmD,QAAQ7D,OAZpB,gDAgBX4G,QAAQC,IAAR,MACA,EAAKO,SAAS,CACXuJ,kBAAkB,EAClBzQ,KAAMiH,EAASjH,KACf2D,QAASsD,EAAStD,QAAQ7D,MApBlB,uD,wDA+CjB2R,gBAAkB,SAAApB,GACf,EAAKnJ,SAAS,CACXmJ,YAAaA,EACbC,cAAeD,K,mFA/KlBzR,KAAKsS,oB,6JAILtS,KAAKyO,YAAW,G,kBAIE5G,EAAOpB,SAAST,gBAAgB8M,c,OAA/CpQ,E,OACA1C,KAAKsI,SAAS,CACXzF,KAAMH,EAAOG,O,gDAGhB2P,MAAM,EAAD,IACLxS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,WAC9B1K,EAAOR,cAAcmL,MAAM,qC,yBAE3BxS,KAAKyO,YAAW,G,yMAILzK,G,gFAGXhE,KAAK+S,gB,SACUlL,EAAOpB,SAAST,gBAAgBgN,kBAAkBhP,G,OAC3C,M,OAAXuB,QACRsC,EAAOR,cAAcgL,QAAQ,gC,gDAGhCrS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,SAAShN,SACvCsC,EAAOR,cAAcmL,MAAM,gC,yBAE3BxS,KAAKsS,kBACLtS,KAAKiT,mB,iKA+DDC,GACPlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAMS,aAAciC,M,mCAGjDlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAOS,aAAc,O,sCAIlDjR,KAAKsI,SAAS,CAAE2I,aAAc,O,mCAU9BjR,KAAKsI,SAAS,CACXsJ,iBAAiB,M,oCAIpB5R,KAAKsI,SAAS,CACXsJ,iBAAiB,M,wCA6BpB5R,KAAKsI,SAAS,CACXuJ,kBAAkB,M,wCAKrB7R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,yCAItB9R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,iCAIdlD,GACR5O,KAAKsI,SAAS,CACXsF,UAAWgB,M,kCAWd5O,KAAKsI,SAAS,CACXlH,KAAM,GACN2D,QAAS,GACTyL,aAAa,EACbS,aAAc,O,wCAID,IAAD,OACf,GAAiC,aAA7BjR,KAAKoI,MAAMsJ,cACZ,OACG,kBAAC,GAAD,CACGP,OAAQnR,KAAK2S,eACbvB,QAASpR,KAAKoI,MAAMgJ,QACpBC,MAAO,kBAAM,EAAK8B,cAClB7B,SAAU,kBAAM,EAAK8B,mBACrB7B,UAAWvR,KAAKoI,MAAMmJ,UACtBjE,UAAW,kBAAM,EAAKgF,uB,+BAMxB,IAAD,SAQFtS,KAAKoI,MANNvF,EAFG,EAEHA,KACA+K,EAHG,EAGHA,UACAxM,EAJG,EAIHA,KACA2D,EALG,EAKHA,QACAyL,EANG,EAMHA,YACAnI,EAPG,EAOHA,SAGH,OACG,yBAAKrE,GAAG,iBACL,yBAAKkD,UAAU,QACZ,kBAAC,IAAD,wBAEH,kBAAC,IAAD,CACGiI,SAAUnP,KAAK6S,gBACfnB,cAAe1R,KAAKoI,MAAMsJ,cAC1BtI,OAAK,GAEL,kBAAC,IAAD,CACGpF,GAAG,WACHqP,MAAM,WACNC,MACG,kBAAC,IAAD,KACG,kBAAC,GAAD,CACGzQ,KAAMA,EACNyK,UAAW,kBAAM,EAAKgF,mBACtB1E,UAAWA,EACXQ,YAAapO,KAAK+R,iBAK9B,kBAAC,IAAKwB,SAAN,MACCvT,KAAKwT,mBAET,kBAAC,GAAD,CACGnI,OAAQrL,KAAKoI,MAAMyJ,iBACnBvB,OAAQ,kBAAM,EAAKqC,kBACnBvC,QAAS,kBAAM,EAAKqD,mBACpBrS,KAAMA,EACN2D,QAASA,EACT4K,gBAAiB5K,EACjBoK,SAAUnP,KAAKmP,SACfoB,aAAcvQ,KAAKyS,aACnBhD,cAAc,SACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAMwJ,gBACnBtB,OAAQ,kBAAM,EAAK6C,cACnB/C,QAAS,kBAAM,EAAKuD,eACpBvS,KAAMA,EACN2D,QAASA,EACToK,SAAUnP,KAAKmP,SACfoB,aAAcvQ,KAAKuQ,aACnBd,cAAc,MACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,IAAD,CACGxF,OAAQrL,KAAKoI,MAAM0J,kBACnBrB,kBAAkB,SAClBC,UAAW,kBAAM,EAAKkD,WAAWvL,EAASnH,MAC1CyP,iBAAiB,SACjBC,SAAU,kBAAM,EAAKqC,oBACrBzL,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CAAQC,UAAWpH,SAASqH,eAAe,iBAG9C,kBAAC,IAAD,wDACA,gDAAkB3I,EAASlG,WAC3B,4BACA,4BACG+E,UAAWkG,KAAQC,YADtB,yC,GApTuB5E,aCZjBoL,G,2MAClBzL,MAAQ,CACLC,SAAU,GACV/E,QAAS,CACN,CAAEsJ,KAAM,IAAKD,QAAQ,GACrB,CAAEC,KAAM,WACR,CAAEA,KAAM,OACR,CAAEA,KAAM,eACR,CAAEA,KAAM,SAAUD,QAAQ,GAC1B,CAAEC,KAAM,YAAaD,QAAQ,GAC7B,CAAEC,KAAM,SAAUD,QAAQ,GAC1B,CAAEC,KAAM,iB,iFAKX,OAAO,+BAAQ5M,KAAKiN,qB,wCAEJ,IAAD,OAEf,OADiBjN,KAAKuI,MAAd1F,KACI4J,IAAI,SAACqH,EAAQ9F,GACtB,OACG,wBACGA,IAAK8F,EAAO5S,IACZ2H,QAAS,SAAAmC,GAAC,OAAI,EAAKmD,gBAAgBnD,EAAG8I,IACtC5M,UAAS,WACN,EAAKkB,MAAMC,SAASnH,MAAQ4S,EAAO5S,IAAM,cAAgB,KAG5D,kBAAC,GAAD,CAAWyL,QAAM,EAACqB,IAAKA,EAAKD,MAAOC,IACnC,kBAAC,GAAD,CAAWD,MAAO+F,EAAO9O,IAAIpD,QAAQR,OACrC,kBAAC,GAAD,CAAW2M,MAAO+F,EAAO9O,IAAI5D,OAC7B,kBAAC,GAAD,CAAW2M,MAAO+F,EAAOzO,WAAWjE,OACpC,kBAAC,GAAD,CAAW2M,MAAO+F,EAAOpR,OAAQiK,QAAM,IACvC,kBAAC,GAAD,CACGoB,MAAO,EAAKgG,kBAAkBD,EAAOxO,WACrCqH,QAAM,IAET,kBAAC,GAAD,CAAWoB,MAAO+F,EAAOvO,OAAQoH,QAAM,IACvC,kBAAC,GAAD,CAAWoB,MAAO,IAAI3H,KAAK0N,EAAOtO,YAAYwO,sB,wCAMxCC,GACf,OAAY,OAARA,EACM,GAEe,IAAjBA,EAAIC,QAAQ,IACXA,QAAQ,GAAK,M,sCAGTlJ,EAAG8I,GAGhB,GAFA9I,EAAEC,iBACmBjL,KAAKoI,MAAlBC,SACKnH,MAAQ4S,EAAO5S,IAKzB,OAJAlB,KAAKuI,MAAM6F,YAAY0F,GAAQ,QAC/B9T,KAAKsI,SAAS,CACXD,SAAUyL,IAIhB9T,KAAKuI,MAAM6F,YAAY,IAAI,GAC3BpO,KAAKsI,SAAS,CAAED,SAAU,O,+BAI1B,OACG,kBAAC,GAAD,CACG/E,QAAStD,KAAKoI,MAAM9E,QACpB4J,KAAMlN,KAAKiN,kBACXD,SAAUhN,KAAKuI,MAAMyE,SACrBY,UAAW5N,KAAKuI,MAAMqF,UACtBN,UAAWtN,KAAKuI,MAAM+E,gB,GA1EQ7E,aA+E1CoL,GAAa/G,aAAe,CACzBjK,KAAM,GACNyK,UAAW,c,cCjFO6G,G,2MAClB/L,MAAQ,CACLkG,QAAS,GACTV,WAAW,EACXW,OAAQ,I,mFAGRvO,KAAKwO,e,iKAIFxO,KAAKyO,YAAW,G,SACG5G,EAAOpB,SAASC,YAAY0N,U,OAA3C1R,E,OACJoF,QAAQC,IAAIrF,EAAOG,MACnB7C,KAAKsI,SAAS,CACXgG,QAAS5L,EAAOG,O,gDAGnB7C,KAAKsI,SAAS,CAAEgG,QAAS,IAAIK,MAAM,OAAQJ,OAAQ,Q,yBAEnDvO,KAAKyO,YAAW,G,iKAGXG,GACR5O,KAAKsI,SAAS,CAAEsF,UAAWgB,M,sCAG3B,GAAI5O,KAAKoI,MAAMkG,QACZ,OAAOtO,KAAKoI,MAAMkG,QAAQ7B,IAAI,SAAC8B,EAAQP,GACpC,OACG,4BAAQA,IAAKA,EAAKD,MAAOQ,EAAOrN,KAC5BqN,EAAO3M,QAAQR,KAAO,MAAQmN,EAAOnN,U,+BAM3C,IACCwM,EAAc5N,KAAKoI,MAAnBwF,UAER,OAAIA,EAEE,kBAAC,IAAD,CACGnG,KAAM,kBAAC,IAAD,CAASoH,KAAM,KACrBC,SAAUlB,EACVmB,UAAWC,KAAUC,KACrB/F,MAAI,GAJP,WAWH,kBAAC,IAAD,CACGlF,GAAIhE,KAAKuI,MAAMvE,GACfkL,IAAKlP,KAAKuI,MAAM2G,IAChBC,SAAUnP,KAAKuI,MAAM4G,SACrBL,SAAU9O,KAAKuI,MAAMuG,SACrB5F,KAAMlJ,KAAKuI,MAAMW,KACjB6E,MAAO/N,KAAKuI,MAAMF,UAElB,4BAAQA,UAAQ,EAAC+G,QAAM,EAACN,UAAQ,GAC5B9O,KAAKuI,MAAM8G,aAEdrP,KAAKsP,qB,GAhEuB7G,aCYpB4L,G,qLAEf,GAAIrU,KAAKuI,MAAMzD,QAAU9E,KAAKuI,MAAM7F,OACjC,OACG,6BACG,4BACG,sCACA,uCAEH,4BACG,wBAAIwE,UAAU,eACX,kBAAC,IAAD,CAAMO,KAAK,OAAOD,OAAO,aAE5B,wBAAIN,UAAU,eACX,kBAAC,IAAD,CAAS6G,MAAO/N,KAAKuI,MAAM7F,OAAS1C,KAAKuI,MAAMzD,c,+BAQvD,IAAD,EAWF9E,KAAKuI,MATN4G,EAFG,EAEHA,SACAK,EAHG,EAGHA,SACAC,EAJG,EAIHA,cACAC,EALG,EAKHA,QACA1K,EANG,EAMHA,IACAK,EAPG,EAOHA,WACA3C,EARG,EAQHA,OACA8C,EATG,EASHA,WACA8O,EAVG,EAUHA,YAGH,OACG,6BACG,kBAAC1E,GAAA,EAAD,CAAM1I,UAAU,OAAOgI,IAAI,qBACxB,kBAAC,IAAD,CAAWzB,WAAS,GACjB,4BACG,4BACG,kBAAC,IAAD,CACGoC,MAAM,MACNC,SAAS,MACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,MACHkL,IAAI,MACJC,SAAUA,EACVoF,KAAMvP,EACNqD,SAAUiM,EACVpL,MAAI,EACJmG,YAAY,oBAIrB,4BACG,4BACG,kBAAC,IAAD,CACGQ,MAAM,OACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,aACHmL,SAAUA,EACVE,YAAY,iBACZ3L,KAAK,OACLqK,MAAO1I,EACPyJ,UAAQ,EACR5F,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,cACNC,SAAS,aACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,KAAD,CACGwE,WAAY,SAAAhP,GAAU,OACnBA,EAAWiP,sBAEdtF,SAAUnP,KAAKuI,MAAMmM,iBACrBC,UAAW,SAAAnP,GAAU,OAClB,IAAIY,KAAKZ,GAAYiP,sBAExBpF,YAAY,aACZuF,aAAc,IAAIxO,KAClB2H,MAAOvI,EACPqP,QAAS,IAAIzO,KACb8C,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,SACNC,SAAS,SACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,SACH8Q,cAAe9U,KAAKuI,MAAMwM,oBAC1B1F,YAAY,YACZ3L,KAAK,SACLqK,MAAOrL,EACPwG,MAAI,MAKZlJ,KAAKgV,cAGT,yBAAK9N,UAAU,cACZ,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAQO,KAAK,UAAUoB,QAAS6G,GAAhC,SAGA,kBAAC,IAAD,CAAQjI,KAAK,QAAQoB,QAAS2G,GAC1BC,W,GArIehH,aA8IxC4L,GAAWvH,aAAe,CACvBmD,iBAAkB,O,IC3JAgF,G,iLAEf,OACG,yBAAKjR,GAAG,cACL,kBAAC,IAAD,CACGqH,OAAQrL,KAAKuI,MAAM8C,OACnB8E,QAASnQ,KAAKuI,MAAM6H,QACpBC,OAAQrQ,KAAKuI,MAAM+H,QAEnB,kBAAC,IAAD,KACG,yBAAKpJ,UAAU,aACZ,yBAAKlD,GAAIhE,KAAKuI,MAAMvE,IACjB,kBAAC,GAAD,CACGmL,SAAUnP,KAAKuI,MAAM4G,SACrB4F,oBAAqB/U,KAAKuI,MAAMwM,oBAChCvF,SAAUxP,KAAKuI,MAAMgI,aACrBd,cAAezP,KAAKuI,MAAMkH,cAC1BC,QAAS1P,KAAKuI,MAAMmH,QACpB1K,IAAKhF,KAAKuI,MAAMvD,IAChBK,WAAYrF,KAAKuI,MAAMlD,WACvB3C,OAAQ1C,KAAKuI,MAAM7F,OACnB4C,UAAWtF,KAAKuI,MAAMjD,UACtBC,OAAQvF,KAAKuI,MAAMhD,OACnBC,WAAYxF,KAAKuI,MAAM/C,WACvB8O,YAAatU,KAAKuI,MAAM+L,YACxBI,iBAAkB1U,KAAKuI,MAAMmM,sBAKzC,kBAAC,IAAD,CACGrJ,OAAQrL,KAAKuI,MAAMiI,YACnBC,kBAAkB,aAClBC,UAAW1Q,KAAKuI,MAAMmH,QACtBiB,iBAAiB,SACjBC,SAAU5Q,KAAKuI,MAAMsI,WACrBrJ,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CACGC,UAAWpH,SAASqH,eAAe,iBAIzC,kBAAC,IAAD,KAAKhR,KAAKuI,MAAM0I,cAChB,yE,GA7CsBxI,aCYnBxJ,G,2MAClBmJ,MAAQ,CACLqJ,YAAa,UACbC,cAAe,UACf9D,WAAW,EACX/K,KAAM,GACN8O,WAAW,EACXV,aAAc,GACdiE,uBAAuB,EACvBlQ,IAAK,GACLK,WAAY,GACZ3C,OAAQ,EACR4C,UAAW,GACXC,OAAQ,GACRC,WAAY,IAAIY,KAChBiC,SAAU,GACVxE,IAAK,GACLsR,sBAAsB,EACtBrD,mBAAmB,EACnBV,SAAS,EACTG,WAAW,G,EAGdQ,YAAc,SAAClO,EAAKoO,GACjB,EAAK3J,SAAS,CACXD,SAAUxE,EACVuN,QAASa,EACTV,UAAWU,K,EAgEjB1B,a,sCAAe,WAAMvF,GAAN,+BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEgD,EAAK7C,MAAzDpD,EAFI,EAEJA,IAAKnB,EAFD,EAECA,IAAKnB,EAFN,EAEMA,OAAQ4C,EAFd,EAEcA,UAAWC,EAFzB,EAEyBA,OAAQC,EAFjC,EAEiCA,WACzCwH,EAAW,gBAHH,SAIOnF,EAAOpB,SAASE,iBAAiByO,gBACjDpQ,EACAnB,EAAI3C,IACJwB,EACA4C,EACAC,EACAC,GAVS,cAIRsO,EAJQ,yBAaUjM,EAAOpB,SAASE,iBAAiB0O,WAAWvB,GAbtD,OAca,MAdb,OAcEvO,SACRsC,EAAOR,cAAcgL,QAArB,6BACA,EAAKiD,WAhBC,kDAmBmB,MAAxB,KAAI/C,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,kCACRnF,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GA3BN,wD,wDA8BfyF,a,sCAAe,WAAMzH,GAAN,6BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEwC,EAAK7C,MAAjDvE,EAFI,EAEJA,IAAKmB,EAFD,EAECA,IAAKM,EAFN,EAEMA,UAAWC,EAFjB,EAEiBA,OAAQC,EAFzB,EAEyBA,WAEjCwH,EAAW,gBAJH,kBAMUnF,EAAOpB,SAASE,iBAAiByO,gBACjDpQ,EACAnB,EAAI3C,IACJoE,EACAC,EACAC,GAXM,cAMLsO,EANK,gBAaUjM,EAAOpB,SAASE,iBAAiB4O,aACjDzB,GAdM,OAgBa,MAhBb,OAgBEvO,SACRsC,EAAOR,cAAcgL,QAArB,+BACA,EAAKiD,WAlBC,kDAqBmB,MAAxB,KAAI/C,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,oCACRnF,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GA7BN,wD,wDAiCfwI,wBAA0B,SAAAC,GACvB,EAAKnN,SAAS,CAAE5F,OAAQ+S,K,EAG3BC,kBAAoB,SAAAD,GACjB,EAAKnN,SAAS,CAAE5F,OAAQ+S,K,EAG3Bf,iBAAmB,SAAAiB,GAChB,EAAKrN,SAAS,CAAE1D,UAAW+Q,K,EAa9BxG,SAAW,SAAAnE,GACR,IAAM5C,EAAQ,EAAKA,MACnBA,EAAM4C,EAAElG,OAAOd,IAAMgH,EAAElG,OAAOiJ,MAC9B,EAAKzF,SAASF,I,EAcjBuK,e,sCAAiB,WAAM3H,GAAN,mBAAAkH,EAAA,4DACdlH,EAAEC,iBACM5C,EAAa,EAAKD,MAAlBC,SAFM,kBAIQR,EAAOpB,SAASE,iBAAiBiP,cACjDvN,EAASnH,KALD,OAOW,OAHlBwB,EAJO,QAOA6C,SACJuO,EAASpR,EAAOG,KACpB,EAAKyF,SAAS,CACX6M,sBAAsB,EACtBnQ,IAAK8O,EAAO9O,IAAI9D,IAChBmE,WAAYyO,EAAOzO,WAAWjE,KAC9BsB,OAAQoR,EAAOpR,OACf4C,UAAWwO,EAAOxO,UAClBC,OAAQuO,EAAOvO,OACfC,WAAYsO,EAAOtO,cAhBd,gDAoBXsC,QAAQC,IAAR,MACA,EAAKO,SAAS,CACX6M,sBAAsB,EACtBnQ,IAAKqD,EAASrD,IAAI9D,IAClBmE,WAAYgD,EAAShD,WAAWjE,KAChCsB,OAAQ2F,EAAS3F,OACjB4C,UAAW+C,EAAS/C,UACpBC,OAAQ8C,EAAS9C,OACjBC,WAAY6C,EAAS7C,aA5Bb,uD,wDAuDjBqN,gBAAkB,SAAApB,GACf,EAAKnJ,SAAS,CACXmJ,YAAaA,EACbC,cAAeD,K,mFA3NlBzR,KAAKsV,UACLtV,KAAK6V,c,qJAIL7V,KAAKyO,YAAW,G,kBAIE5G,EAAOpB,SAASE,iBAAiBmP,a,OAAhDpT,E,OACA1C,KAAKsI,SAAS,CACXzF,KAAMH,EAAOG,O,gDAGhB2P,MAAM,EAAD,IACLxS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,WAC9B1K,EAAOR,cAAcmL,MAAM,+B,yBAE3BxS,KAAKyO,YAAW,G,uRAKnBzO,KAAKyO,YAAW,G,kBAGE5G,EAAOpB,SAAS3C,iBAAiBiS,oBAC7ClO,EAAOlH,KAAKqV,a,OADftT,E,OAGA1C,KAAKsI,SAAS,CACXzE,IAAKnB,EAAOG,KACZwC,WAAY3C,EAAOG,KAAK3B,M,gDAG3BsR,MAAM,EAAD,IACLxS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,WAC9B1K,EAAOR,cAAcmL,MAAM,qC,yBAE3BxS,KAAKyO,YAAW,G,+MAICzK,G,gFAGjBhE,KAAK+S,gB,SACUlL,EAAOpB,SAASE,iBAAiBsP,iBAAiBjS,G,OAC3C,M,OAAXuB,QACRsC,EAAOR,cAAcgL,QAAQ,+B,gDAGhCrS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,SAAShN,SACvCsC,EAAOR,cAAcmL,MAAM,+B,yBAE3BxS,KAAKsV,UACLtV,KAAKiT,mB,iKA8EDC,GACPlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAMS,aAAciC,M,mCAGjDlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAOS,aAAc,O,sCAIlDjR,KAAKsI,SAAS,CAAE2I,aAAc,O,mCAU9BjR,KAAKsI,SAAS,CACX4M,uBAAuB,M,6CAI1BlV,KAAKsI,SAAS,CACX4M,uBAAuB,M,4CAqC1BlV,KAAKsI,SAAS,CACX6M,sBAAsB,M,wCAKzBnV,KAAKsI,SAAS,CACXwJ,mBAAmB,M,yCAItB9R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,iCAIdlD,GACR5O,KAAKsI,SAAS,CACXsF,UAAWgB,M,kCAWd5O,KAAKsI,SAAS,CACXtD,IAAK,GACLK,WAAY,GACZ3C,OAAQ,GACR4C,UAAW,GACXC,OAAQ,GACRC,WAAY,GACZgL,aAAa,EACbS,aAAc,O,wCAID,IAAD,OACf,GAAiC,YAA7BjR,KAAKoI,MAAMsJ,cACZ,OACG,kBAAC,GAAD,CACGP,OAAQnR,KAAK2S,eACbvB,QAASpR,KAAKoI,MAAMgJ,QACpBC,MAAO,kBAAM,EAAK8B,cAClB7B,SAAU,kBAAM,EAAK8B,mBACrB7B,UAAWvR,KAAKoI,MAAMmJ,UACtBjE,UAAW,kBAAM,EAAKgI,e,+BAMxB,IAAD,SAYFtV,KAAKoI,MAVNvE,EAFG,EAEHA,IACAhB,EAHG,EAGHA,KACA+K,EAJG,EAIHA,UACA5I,EALG,EAKHA,IACAtC,EANG,EAMHA,OACA4C,EAPG,EAOHA,UACAC,EARG,EAQHA,OACAC,EATG,EASHA,WACAgL,EAVG,EAUHA,YACAnI,EAXG,EAWHA,SAGH,OACG,yBAAKrE,GAAG,cACL,yBAAKkD,UAAU,QACZ,kBAAC,IAAD,uBAEH,kBAAC,IAAD,CACGiI,SAAUnP,KAAK6S,gBACfnB,cAAe1R,KAAKoI,MAAMsJ,cAC1BtI,OAAK,GAEL,kBAAC,IAAD,CACGpF,GAAG,UACHqP,MAAM,UACNC,MACG,kBAAC,IAAD,KACG,kBAAC,GAAD,CACGzQ,KAAMA,EACNyK,UAAW,kBAAM,EAAKgI,WACtB1H,UAAWA,EACXQ,YAAapO,KAAK+R,iBAK9B,kBAAC,IAAKwB,SAAN,MACCvT,KAAKwT,mBAET,kBAAC,GAAD,CACGnI,OAAQrL,KAAKoI,MAAM+M,qBACnB7E,OAAQ,kBAAM,EAAKqC,kBACnBvC,QAAS,kBAAM,EAAK8F,uBACpBlR,IAAKA,EACLsP,YAAatP,EACbK,WAAYxB,EAAIzC,KAChBsB,OAAQA,EACR4C,UAAWA,EACXC,OAAQA,EACRC,WAAYA,EACZ2J,SAAUnP,KAAKmP,SACfgH,qBAAsBnW,KAAK0U,iBAC3BK,oBAAqB/U,KAAK0V,kBAC1BnF,aAAcvQ,KAAKyS,aACnBhD,cAAc,SACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAG1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAM8M,sBACnB5E,OAAQ,kBAAM,EAAK6C,cACnB/C,QAAS,kBAAM,EAAKgG,wBACpBpR,IAAKA,EACLK,WAAYxB,EAAIzC,KAChBsB,OAAQA,EACR4C,UAAWA,EACXC,OAAQA,EACRC,WAAYA,EACZ2J,SAAUnP,KAAKmP,SACfgH,qBAAsBnW,KAAK0U,iBAC3BK,oBAAqB/U,KAAK0V,kBAC1BnF,aAAcvQ,KAAKuQ,aACnBd,cAAc,MACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,IAAD,CACGxF,OAAQrL,KAAKoI,MAAM0J,kBACnBrB,kBAAkB,SAClBC,UAAW,kBAAM,EAAKuF,iBAAiB5N,EAASnH,MAChDyP,iBAAiB,SACjBC,SAAU,kBAAM,EAAKqC,oBACrBzL,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CAAQC,UAAWpH,SAASqH,eAAe,mBAG9C,kBAAC,IAAD,wDACA,0CACA,4BACA,4BACG9J,UAAWkG,KAAQC,YADtB,yC,GA1XsB5E,aCZhB4N,G,2MAClBjO,MAAQ,CACLC,SAAU,GACV/E,QAAS,CACN,CAAEsJ,KAAM,IAAKD,QAAQ,GACrB,CAAEC,KAAM,aACR,CAAEA,KAAM,SACR,CAAEA,KAAM,QACR,CAAEA,KAAM,SAAUD,QAAQ,K,iFAK7B,OAAO,+BAAQ3M,KAAKiN,qB,wCAEJ,IAAD,OAEf,OADsBjN,KAAKuI,MAAnB+N,UACS7J,IAAI,SAAC7L,EAAMoN,GACzB,OACG,wBACGA,IAAKpN,EAAKM,IACV2H,QAAS,SAAAmC,GAAC,OAAI,EAAKmD,gBAAgBnD,EAAGpK,IACtCsG,UAAS,UACN,EAAKkB,MAAMC,SAASnH,MAAQN,EAAKM,IAAM,cAAgB,KAG1D,kBAAC,GAAD,CAAW8M,IAAKA,EAAKD,MAAOC,EAAKrB,QAAM,IACvC,kBAAC,GAAD,CAAWoB,MAAOnN,EAAKuB,WACvB,kBAAC,GAAD,CAAW4L,MAAOnN,EAAKe,QACvB,kBAAC,GAAD,CAAWoM,MAAOnN,EAAKS,WACvB,kBAAC,GAAD,CAAW0M,MAAOnN,EAAKsF,OAAQyG,QAAM,S,sCAMjC3B,EAAGpK,GAGhB,GAFAoK,EAAEC,iBACmBjL,KAAKoI,MAAlBC,SACKnH,MAAQN,EAAKM,IAKvB,OAJAlB,KAAKuI,MAAM6F,YAAYxN,GAAM,QAC7BZ,KAAKsI,SAAS,CACXD,SAAUzH,IAIhBZ,KAAKuI,MAAM6F,YAAY,IAAI,GAC3BpO,KAAKsI,SAAS,CAAED,SAAU,O,+BAI1B,OACG,kBAAC,GAAD,CACG/E,QAAStD,KAAKoI,MAAM9E,QACpB4J,KAAMlN,KAAKiN,kBACXD,SAAUhN,KAAKuI,MAAMyE,SACrBY,UAAW5N,KAAKuI,MAAMqF,UACtBN,UAAWtN,KAAKuI,MAAM+E,gB,GAzDM7E,aA8DxC4N,GAAWvJ,aAAe,CACvBwJ,UAAW,GACXhJ,UAAW,c,ICjEOiJ,G,2MAClBnO,MAAQ,CACLoO,MAAO,CAAC,WAAY,UAAW,WAAY,SAC3CnV,SAAU,EAAKkH,MAAMlH,U,+EAIrB,OAAOrB,KAAKoI,MAAMoO,MAAM/J,IAAI,SAAC8B,EAAQP,GAClC,OACG,4BAAQA,IAAKA,EAAKD,MAAOQ,GACrBA,O,0CAOV,GAA2B,MAAvBvO,KAAKuI,MAAMF,UACmB,OAA3BrI,KAAKuI,MAAM8G,YACZ,OACG,4BAAQhH,UAAQ,EAAC+G,QAAM,EAACN,UAAQ,GAC5B9O,KAAKuI,MAAM8G,e,+BAQxB,OACG,kBAAC,IAAD,CACGrL,GAAIhE,KAAKuI,MAAMvE,GACfkL,IAAKlP,KAAKuI,MAAM2G,IAChBC,SAAUnP,KAAKuI,MAAM4G,SACrBL,SAAU9O,KAAKuI,MAAMuG,SACrB5F,KAAMlJ,KAAKuI,MAAMW,KACjBb,SAAUrI,KAAKuI,MAAMF,SACrB0F,MAAO/N,KAAKuI,MAAMF,UAEjBrI,KAAKyW,oBACLzW,KAAKsP,qB,GAxC4B7G,aA6C9C8N,GAAiBzJ,aAAe,CAC7BuC,YAAa,KACbhO,SAAU,Y,ICxCQqV,G,iLAEf,OACG,6BACG,kBAAC,IAAD,CACG7G,MAAM,WACNC,SAAS,WACTC,UAAU,cAEV,kBAAC,IAAD,CACG/L,GAAG,WACH2S,SAAS,OACTxH,SAAUnP,KAAKuI,MAAM4G,SACrBE,YAAY,cACZ3L,KAAK,OACLqK,MAAO/N,KAAKuI,MAAMpG,SAClB+G,MAAI,KAGV,kBAAC,IAAD,CAAW2G,MAAM,QAAQC,SAAS,QAAQC,UAAU,cACjD,kBAAC,IAAD,CACG/L,GAAG,QACH2S,SAAS,WACTxH,SAAUnP,KAAKuI,MAAM4G,SACrBE,YAAY,WACZ3L,KAAK,QACLqK,MAAO/N,KAAKuI,MAAM5G,MAClBuH,MAAI,KAGV,kBAAC,IAAD,CACG2G,MAAM,WACNC,SAAS,WACTC,UAAU,cAEV,kBAAC,IAAD,CACG/L,GAAG,WACH2S,SAAS,MACTxH,SAAUnP,KAAKuI,MAAM4G,SACrBE,YAAY,cACZ3L,KAAK,WACLqK,MAAO/N,KAAKuI,MAAMnG,SAClB8G,MAAI,KAIV,kBAAC,IAAD,CACG2G,MAAM,YACNC,SAAS,WACTC,UAAU,cAEV,kBAAC,GAAD,CACG/L,GAAG,WACHmL,SAAUnP,KAAKuI,MAAM4G,SACrBpB,MAAO/N,KAAKuI,MAAMlH,SAClBgH,SAAUrI,KAAKuI,MAAMlH,SACrBgO,YAAY,mBACZnG,MAAI,KAGV,yBAAKhC,UAAU,cACZ,kBAAC,IAAD,CAAW2I,MAAM,SAASC,SAAS,UAChC,kBAAC,IAAD,CACG9L,GAAG,SACHmL,SAAUnP,KAAKuI,MAAM4G,SACrBpB,MAAO/N,KAAKuI,MAAMrC,OAClB0Q,QAAS5W,KAAKuI,MAAMrC,OACpB2Q,gBAAgB,EAChB3N,MAAI,MAIb,yBAAKhC,UAAU,cACZ,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAQ2B,QAAS7I,KAAKuI,MAAMmH,SACxB1P,KAAKuI,MAAMuO,oBAEf,kBAAC,IAAD,CAAQjO,QAAS7I,KAAKuI,MAAMM,SACxB7I,KAAKuI,MAAMkH,sB,GA9EKhH,aAsFtCiO,GAAS5J,aAAe,CACrBgK,mBAAoB,QACpBrH,cAAe,O,IC9FGwF,G,iLAEf,OACG,yBAAKjR,GAAG,cACL,kBAAC,IAAD,CACGqH,OAAQrL,KAAKuI,MAAM8C,OACnB8E,QAASnQ,KAAKuI,MAAM6H,QACpBC,OAAQrQ,KAAKuI,MAAM+H,QAEnB,kBAAC,IAAD,KACG,yBAAKpJ,UAAU,aACZ,yBAAKlD,GAAIhE,KAAKuI,MAAMvE,IACjB,kBAAC,GAAD,CACGrC,MAAO3B,KAAKuI,MAAM5G,MAClBQ,SAAUnC,KAAKuI,MAAMpG,SACrBC,SAAUpC,KAAKuI,MAAMnG,SACrBf,SAAUrB,KAAKuI,MAAMlH,SACrB6E,OAAQlG,KAAKuI,MAAMrC,OACnBiJ,SAAUnP,KAAKuI,MAAM4G,SACrBtG,QAAS7I,KAAKuI,MAAMgI,aACpBd,cAAezP,KAAKuI,MAAMkH,cAC1BC,QAAS1P,KAAKuI,MAAMmH,aAKhC,kBAAC,IAAD,CACGrE,OAAQrL,KAAKuI,MAAMiI,YACnBC,kBAAkB,aAClBC,UAAW1Q,KAAKuI,MAAMmH,QACtBiB,iBAAiB,SACjBC,SAAU5Q,KAAKuI,MAAMsI,WACrBrJ,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CACGC,UAAWpH,SAASqH,eAAe,iBAIzC,kBAAC,IAAD,KAAKhR,KAAKuI,MAAM0I,cAChB,yE,GAzCsBxI,aCDnBsO,G,iLACR,IAAD,EACkD/W,KAAKuI,MAArD8C,EADF,EACEA,OAAQqF,EADV,EACUA,UAAWE,EADrB,EACqBA,SAAUoG,EAD/B,EAC+BA,SAAUrP,EADzC,EACyCA,KAC/C,OACG,kBAAC,IAAD,CACG0D,OAAQA,EACRoF,kBAAkB,SAClBC,UAAWA,EACXC,iBAAiB,SACjBC,SAAUA,EACVpJ,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CAAQC,UAAWpH,SAASqH,eAAegG,MAG9C,kBAAC,IAAD,8CACA,gCAASrP,GACT,4BACA,4BACGT,UAAWkG,KAAQC,YADtB,wC,GAnBmC5E,aCK1BwO,G,2MAClB7O,MAAQ,CACLqJ,YAAa,QACbC,cAAe,QACf9D,WAAW,EACXsJ,MAAO,GACPvF,WAAW,EACXV,aAAc,GACdkG,kBAAkB,EAClBhV,SAAU,GACVR,MAAO,GACPS,SAAU,GACVf,SAAU,WACV6E,QAAQ,EACRmC,SAAU,GACV8M,sBAAsB,EACtBrD,mBAAmB,EACnBV,SAAS,EACTG,WAAW,G,EAGdQ,YAAc,SAACnR,EAAMqR,GAClB,EAAK3J,SAAS,CACXD,SAAUzH,EACVwQ,QAASa,EACTV,UAAWU,K,EA2CjB1B,a,sCAAe,WAAMvF,GAAN,6BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAE4C,EAAK7C,MAArDzG,EAFI,EAEJA,MAAOQ,EAFH,EAEGA,SAAUd,EAFb,EAEaA,SAAUe,EAFvB,EAEuBA,SAAU8D,EAFjC,EAEiCA,OACzC8G,EAAW,gBACXoK,EAAMvP,EAAOpB,SAASG,aAAayQ,cACpClV,EACAR,EACAS,EACAf,EACA6E,GATS,kBAYU2B,EAAOpB,SAASG,aAAa0Q,YAAYF,GAZnD,OAaa,MAbb,OAaE7R,SACRsC,EAAOR,cAAcgL,QAArB,eAAqClQ,EAArC,wBACA,EAAKoV,gBAfC,kDAkBmB,MAAxB,KAAIhF,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B7K,EAA5B,SACR0F,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GA1BN,wD,wDA8BfyF,a,sCAAe,WAAMzH,GAAN,+BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EASR,EAAK7C,MANNzG,EAHS,EAGTA,MACAQ,EAJS,EAITA,SACAd,EALS,EAKTA,SACAe,EANS,EAMTA,SACA8D,EAPS,EAOTA,OACAmC,EARS,EAQTA,SAEC2E,EAAW,iBACXoK,EAAMvP,EAAOpB,SAASG,aAAayQ,cACpClV,EACAR,EACAS,EACAf,EACA6E,IAECtF,KAAKM,IAAMmH,EAASnH,IACxB4G,QAAQC,IAAIqP,GAnBA,kBAqBUvP,EAAOpB,SAASG,aAAa4Q,WAAWJ,GArBlD,OAsBa,MAtBb,OAsBE7R,SACRsC,EAAOR,cAAcgL,QAArB,eAAqClQ,EAArC,wBACA,EAAKoV,gBAxBC,kDA2BmB,MAAxB,KAAIhF,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B7K,EAA5B,SACR0F,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GAnCN,wD,wDAiDfmC,SAAW,SAAAnE,GACR,IAAM5C,EAAQ,EAAKA,MACnB,GAAoB,WAAhB4C,EAAElG,OAAOd,GAKboE,EAAM4C,EAAElG,OAAOd,IAAMgH,EAAElG,OAAOiJ,MAC9B,EAAKzF,SAASF,OANd,CACG,IAAI8J,EAAI9J,EAAMlC,OACd,EAAKoC,SAAS,CAAEpC,QAASgM,M,EAoD/BW,gBAAkB,SAAApB,GACf,EAAKnJ,SAAS,CACXmJ,YAAaA,EACbC,cAAeD,K,mFAhLlBzR,KAAKuX,iB,0JAILvX,KAAKyO,YAAW,G,kBAIE5G,EAAOpB,SAASG,aAAa6Q,W,OAA5C/U,E,OACA1C,KAAKsI,SAAS,CACX4O,MAAOxU,EAAOG,O,gDAGjB2P,MAAM,EAAD,IACLxS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,WAC9B1K,EAAOR,cAAcmL,MAAM,kC,yBAE3BxS,KAAKyO,YAAW,G,yMAILzK,G,gFAGXhE,KAAK+S,gB,SACUlL,EAAOpB,SAASG,aAAagN,WAAW5P,G,OACjC,M,OAAXuB,QACRsC,EAAOR,cAAcgL,QAAQ,6B,gDAGhCrS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,SAAShN,SACvCsC,EAAOR,cAAcmL,MAAM,6B,yBAE3BxS,KAAKuX,eACLvX,KAAKiT,mB,uKA0ERjT,KAAKsI,SAAS,CAAE2I,aAAc,O,gCAEvBiC,GACPlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAMS,aAAciC,M,mCAGjDlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAOS,aAAc,O,uCAelDjR,KAAKsI,SAAS,CACX6O,kBAAkB,M,wCAIrBnX,KAAKsI,SAAS,CACX6O,kBAAkB,M,2CAKrB,IAAI9O,EAAWrI,KAAKoI,MAAMC,SAE1BrI,KAAKsI,SAAS,CACX6M,sBAAsB,EACtBhT,SAAUkG,EAASlG,SACnBR,MAAO0G,EAAS1G,MAChBS,SAAU,GACVf,SAAUgH,EAAS3E,S,4CAItB1D,KAAKsI,SAAS,CACX6M,sBAAsB,M,wCAKzBnV,KAAKsI,SAAS,CACXwJ,mBAAmB,M,yCAItB9R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,iCAIdlD,GACR5O,KAAKsI,SAAS,CACXsF,UAAWgB,M,kCAWd5O,KAAKsI,SAAS,CACX3G,MAAO,GACPQ,SAAU,GACVd,SAAU,WACVe,SAAU,GACVoO,aAAa,EACbS,aAAc,O,wCAID,IAAD,OACf,GAAiC,UAA7BjR,KAAKoI,MAAMsJ,cACZ,OACG,kBAAC,GAAD,CACGP,OAAQ,kBAAM,EAAKuG,sBACnBtG,QAASpR,KAAKoI,MAAMgJ,QACpBC,MAAO,kBAAM,EAAKsG,kBAClBrG,SAAU,kBAAM,EAAK8B,mBACrB7B,UAAWvR,KAAKoI,MAAMmJ,UACtBjE,UAAW,kBAAM,EAAKiK,oB,+BAMxB,IAAD,SAWFvX,KAAKoI,MATN8O,EAFG,EAEHA,MACAtJ,EAHG,EAGHA,UACAjM,EAJG,EAIHA,MACAQ,EALG,EAKHA,SACAd,EANG,EAMHA,SACAe,EAPG,EAOHA,SACA8D,EARG,EAQHA,OACAsK,EATG,EASHA,YACAnI,EAVG,EAUHA,SAGH,OACG,yBAAKrE,GAAG,cACL,yBAAKkD,UAAU,QACZ,kBAAC,IAAD,qBAEH,kBAAC,IAAD,CACGiI,SAAUnP,KAAK6S,gBACfnB,cAAe1R,KAAKoI,MAAMsJ,cAC1BtI,OAAK,GAEL,kBAAC,IAAD,CACGpF,GAAG,QACHqP,MAAM,QACNC,MACG,kBAAC,IAAD,KACG,kBAAC,GAAD,CACGgD,UAAWY,EACX5J,UAAW,kBAAM,EAAKiK,gBACtB3J,UAAWA,EACXQ,YAAapO,KAAK+R,cAErB,kBAAC,GAAD,CACG1G,OAAQrL,KAAKoI,MAAM+M,qBACnB7E,OAAQ,kBAAM,EAAKoH,sBACnBtH,QAAS,kBAAM,EAAK8F,uBACpBvU,MAAOA,EACPQ,SAAUA,EACVC,SAAUA,EACVf,SAAUA,EACV6E,OAAQA,EACRiJ,SAAUnP,KAAKmP,SACfoB,aAAcvQ,KAAKyS,aACnBhD,cAAc,SACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAM+O,iBACnB7G,OAAQ,kBAAM,EAAKqH,kBACnBvH,QAAS,kBAAM,EAAKwH,mBACpBjW,MAAOA,EACPQ,SAAUA,EACVC,SAAUA,EACVf,SAAUA,EACV6E,OAAQA,EACRiJ,SAAUnP,KAAKmP,SACfoB,aAAcvQ,KAAKuQ,aACnBd,cAAc,MACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAM0J,kBACnBpB,UAAW,kBAAM,EAAKkD,WAAWvL,EAASnH,MAC1C0P,SAAU,kBAAM,EAAKqC,oBACrB+D,SAAS,aACTrP,KAAI,gBAAWU,EAASlG,eAMpC,kBAAC,IAAKoR,SAAN,MACCvT,KAAKwT,wB,GAzTmB/K,a,oBCLnBoP,I,wLAEf,OACG,yBACG3Q,UAAS,0BACNlH,KAAKuI,MAAMuP,WAAa,GAAK,yBAGhC,yBAAK5Q,UAAU,2BAA2BlH,KAAKuI,MAAMC,e,GARzBC,cAcxCoP,GAAW/K,aAAe,CACvBgL,YAAY,G,ICfMC,G,iLAEf,OAAO,yBAAK7Q,UAAU,iBAAiBlH,KAAKuI,MAAMC,c,GAFlBC,aCSjBuP,G,2MAClB5P,MAAQ,CACLkB,MAAOD,GAAUQ,Y,2FAIjB7J,KAAKiY,sB,0CAGa,IACV3O,EAAUtJ,KAAKoI,MAAfkB,MAEM,SAAVA,IACDY,KAASC,OAAOC,iBAAmB,YACnCF,KAASC,OAAOE,OAAOC,UAAY,SAExB,UAAVhB,IACDY,KAASC,OAAOC,iBAAmB,QACnCF,KAASC,OAAOE,OAAOC,UAAY,W,uCAQtC,IAHA4N,IAGD,yDAFCC,IAED,yDADCC,EACD,wDACCpY,KAAKiY,oBACL,IAAII,EAAgB,EAChBD,IAAaC,EAAgB,IACjC,IAAIC,EAAc,CACfC,qBAAqB,EACrBlO,OAAQ,CACLmO,OAAQ,IAIXC,YAAY,EACZC,iBAAkBL,EAClBM,OAAQ,CACLC,MAAO,CACJ,CACGC,MAAO,CACJC,SAAUV,GAEbW,UAAW,CACRD,QAASZ,EACTc,YAAY,EACZC,MAAO,oBAIhBC,MAAO,CACJ,CACGL,MAAO,CACJC,SAAUV,GAEbW,UAAW,CACRD,QAASX,EACTa,YAAY,EACZC,MAAO,sBAMtB,OAAOX,I,+BAIDa,EAAWtW,EAAMuW,EAAQC,GAC/B,MAAmB,QAAdF,EAAsC,QAAdA,EAEvB,kBAAC,KAAD,CACG7K,QAAStO,KAAKsZ,iBACdzW,KAAMA,EACNuW,OAAQA,EACRC,MAAOA,IAKE,kBAAdF,EACc,kBAAdA,EACc,SAAdA,EAGE,kBAAC,KAAD,CACG7K,QAAStO,KAAKsZ,iBACdzW,KAAMA,EACNuW,OAAQA,EACRC,MAAOA,IAIG,SAAdF,EAAuC,SAAdA,EAExB,kBAAC,KAAD,CACG7K,QAAStO,KAAKsZ,iBACdzW,KAAMA,EACNuW,OAAQA,EACRC,MAAOA,IAIG,QAAdF,EAAsC,QAAdA,EAEvB,kBAAC,KAAD,CACG7K,QAAStO,KAAKsZ,gBAAe,GAAO,GAAO,GAC3CzW,KAAMA,EACNuW,OAAQA,EACRC,MAAOA,IAIG,UAAdF,EAAwC,UAAdA,EAEzB,kBAAC,KAAD,CACG7K,QAAStO,KAAKsZ,gBAAe,GAAO,GAAO,GAC3CzW,KAAMA,EACNuW,OAAQA,EACRC,MAAOA,IAIG,aAAdF,EAA2C,aAAdA,EAE5B,kBAAC,KAAD,CACG7K,QAAStO,KAAKsZ,gBAAe,GAAO,GAAO,GAC3CzW,KAAMA,EACNuW,OAAQA,EACRC,MAAOA,SANhB,I,+BAYO,IAAD,EACqCrZ,KAAKuI,MAAxC4Q,EADF,EACEA,UAAWtW,EADb,EACaA,KAAMuW,EADnB,EACmBA,OAAQC,EAD3B,EAC2BA,MAEjC,OAAO,6BAAMrZ,KAAKuZ,SAASJ,EAAWtW,EAAMuW,EAAQC,Q,GA5ItB5Q,aCNf+Q,G,YAClB,WAAYjR,GAAQ,IAAD,8BAChB,4CAAMA,KAOT8H,OAAS,WACN,EAAK/H,SAAS,SAAAF,GAAK,MAAK,CAAEqR,UAAWrR,EAAMqR,aAP3C,EAAKrR,MAAQ,CACVsR,OAAO,GAEV,EAAKC,eAAiB,EAAKA,eAAepO,KAApB,iBALN,E,8EAahBvL,KAAKsI,SAAS,SAAAF,GAAK,MAAK,CACrBsR,OAAQtR,EAAMsR,W,+BAIV,IAAD,SACiD1Z,KAAKuI,MAApDqR,EADF,EACEA,WAAYT,EADd,EACcA,UAAWtW,EADzB,EACyBA,KAAMuW,EAD/B,EAC+BA,OAAQC,EADvC,EACuCA,MAE7C,OACG,kBAAC,IAAD,KACG,kBAAC,GAAD,KACG,0BAAMQ,MAAM,uCACXD,EACD,yBAAK1S,UAAU,eACZ,kBAAC,IAAD,CACGO,KAAK,WACLqS,SAAU,GACV5S,UAAU,OACV2B,QAAS7I,KAAK2Z,mBAIvB,kBAAC,GAAD,KACG,kBAAC,GAAD,CACGrQ,MAAOtJ,KAAKoI,MAAMkB,MAClB6P,UAAWA,EACXtW,KAAMA,EACNwW,MAAOA,EACPD,OAAQA,KAGd,kBAAC,IAAD,CACG/N,OAAQrL,KAAKoI,MAAMsR,MACnBvJ,QAAS,kBAAM,EAAKwJ,kBACpBzS,UAAU,uBAEV,kBAAC,IAAD,KACG,kBAAC,GAAD,KACG,0BAAM2S,MAAM,kCACXD,EACD,yBAAK1S,UAAU,eACZ,kBAAC,IAAD,CACGO,KAAK,WACLqS,SAAU,GACVjR,QAAS7I,KAAK2Z,mBAIvB,kBAAC,GAAD,CAAUzS,UAAU,aACjB,kBAAC,GAAD,CACGoC,MAAOtJ,KAAKuI,MAAMe,MAClB6P,UAAWA,EACXtW,KAAMA,EACNwW,MAAOA,EACPD,OAAQA,Y,GApEW3Q,aA6E3C+Q,GAAc1M,aAAe,CAC1B+B,KAAM,KChFT,IAAMkL,GAAWnS,EAAQ,KAEJoS,G,YAClB,WAAYzR,GAAQ,IAAD,8BAChB,4CAAMA,KAeT0R,MAAQF,GAhBW,EA8BnBlX,KAAO,CACJ2V,OAAQ,EAAKA,SACb0B,SAAU,CACP,CACGrK,MAAO,OACPsK,gBAAiB,UACjBC,YAAa,UACbvX,KAAM,EAAKwX,sBArCD,EAyCnBC,QAAU,CACP9B,OAAQ,EAAKA,SACb0B,SAAU,CACP,CACGrK,MAAO,QACPsK,gBAAiB,UACjBtX,KAAM,EAAK0X,cAEd,CACG1K,MAAO,SACPsK,gBAAiB,UACjBtX,KAAM,EAAKwX,sBApDD,EAwDnBG,UAAY,CACThC,OAAQ,EAAKA,SACb0B,SAAU,CACP,CACGrK,MAAO,QACPuK,YAAa,UACbD,gBAAiB,cACjBtX,KAAM,EAAK0X,cAEd,CACG1K,MAAO,SACPuK,YAAa,UACbD,gBAAiB,gBACjBtX,KAAM,EAAKwX,sBArED,EAyEnBI,UAAY,CACTjC,OAAQ,CAAC,IAAK,KACd0B,SAAU,CACP,CACGrK,MAAO,OACPsK,gBAAiB,CAAC,UAAW,YAC7BC,YAAa,cACbvX,KAAM,CAAC,GAAI,OAhFD,EAqFnB6X,uBAAyB,WACtB,EAAKpS,SAAS,SAAAF,GAAK,MAAK,CACrBuS,kBAAmBvS,EAAMuS,qBArF5B,EAAKvS,MAAQ,CACVuS,kBAAkB,EAClBC,UAAW,KAJE,E,uEAQTC,GACH7a,KAAKoI,MAAMwS,YAAcC,GAC1B7a,KAAKsI,SAAS,CACXsS,UAAWC,M,+BAQjB,OAAO7a,KAAKia,MAAMxN,IAAI,SAAAqO,GAAC,OAAIA,EAAEte,iB,yCAI7B,OAAOwD,KAAKia,MAAMxN,IAAI,SAAAqO,GAAC,OAAIA,EAAEre,W,mCAI7B,OAAOuD,KAAKia,MAAMxN,IAAI,SAAAqO,GAAC,OAAIA,EAAEpe,W,+BAiE7B,OACG,6BACG,kBAACqe,GAAA,EAAD,KACG,kBAACC,GAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QAClD,kBAAC,GAAD,CACGiS,UAAU,MACVtW,KAAM7C,KAAKsa,QACXV,WAAW,OACXR,OAAQ,IACRC,MAAO,OAGb,kBAAC2B,GAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QAClD,kBAAC,GAAD,CACGiS,UAAU,OACVtW,KAAM7C,KAAKwa,UACXZ,WAAW,OACXR,OAAQ,IACRC,MAAO,OAGb,kBAAC2B,GAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QAClD,kBAAC,GAAD,CACGiS,UAAU,OACVtW,KAAM7C,KAAK6C,KACX+W,WAAW,YACXR,OAAQ,IACRC,MAAO,OAGb,kBAAC2B,GAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QAClD,kBAAC,GAAD,CACGiS,UAAU,MACVtW,KAAM7C,KAAK6C,KACX+W,WAAW,WACXR,OAAQ,IACRC,MAAO,OAIb,kBAAC2B,GAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QAClD,kBAAC,GAAD,CACGiS,UAAU,MACVtW,KAAM7C,KAAKya,UACXb,WAAW,WACX/K,KAAK,IACLuK,OAAQ,IACRC,MAAO,OAIb,kBAAC2B,GAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QAClD,kBAAC,GAAD,CACGiS,UAAU,WACVtW,KAAM7C,KAAKya,UACXb,WAAW,gBACX/K,KAAK,IACLuK,OAAQ,IACRC,MAAO,OAIb,kBAAC2B,GAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QACpD,kBAAC,GAAD,CACGiS,UAAU,QACVtW,KAAM7C,KAAKsa,QACXV,WAAW,aACXR,OAAQ,IACRC,MAAO,IACPxK,KAAK,OAIX,kBAACmM,GAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QACpD,kBAAC,GAAD,CACGiS,UAAU,OACVtW,KAAM7C,KAAKsa,QACXV,WAAW,iBACXR,OAAQ,IACRC,MAAO,IACPxK,KAAK,c,GA7KiBpG,aCHtB6S,G,iLACR,IACChO,EAActN,KAAKuI,MAAnB+E,UACR,OACG,6BACG,kBAAC,IAAD,KAActN,KAAKuI,MAAMC,UACzB,kBAAC,IAAD,KACIxI,KAAKuI,MAAMC,SACZ,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQf,KAAK,UAAU+J,OAAK,EAACrI,SAAO,EAACN,QAASyE,U,GATX7E,aCE7B8S,G,YAClB,WAAYhT,GAAQ,IAAD,8BAChB,4CAAMA,KAOT8H,OAAS,WACN,EAAK/H,SAAS,SAAAF,GAAK,MAAK,CAAEqR,UAAWrR,EAAMqR,aAP3C,EAAKrR,MAAQ,CACVsR,OAAO,GAEV,EAAKC,eAAiB,EAAKA,eAAepO,KAApB,iBALN,E,8EAahBvL,KAAKsI,SAAS,SAAAF,GAAK,MAAK,CACrBsR,OAAQtR,EAAMsR,W,+BAIV,IAAD,OACEE,EAAe5Z,KAAKuI,MAApBqR,WAER,OACG,kBAAC,IAAD,CAAM1S,UAAWlH,KAAKuI,MAAMrB,WACzB,kBAAC,GAAD,KACG,0BAAM2S,MAAM,uCACXD,EACD,yBAAK1S,UAAU,eACZ,kBAAC,IAAD,CACGO,KAAK,WACLqS,SAAU,GACV5S,UAAU,OACV2B,QAAS7I,KAAK2Z,mBAIvB,kBAAC,GAAD,KAAW3Z,KAAKuI,MAAMC,UACtB,kBAAC,IAAD,CACG6C,OAAQrL,KAAKoI,MAAMsR,MACnBvJ,QAAS,kBAAM,EAAKwJ,kBACpBzS,UAAU,uBAEV,kBAAC,IAAD,KACG,kBAAC,GAAD,KACG,0BAAM2S,MAAM,kCACXD,EACD,yBAAK1S,UAAU,eACZ,kBAAC,IAAD,CACGO,KAAK,WACLqS,SAAU,GACVjR,QAAS7I,KAAK2Z,mBAIvB,kBAAC,GAAD,CAAUzS,UAAU,aAChBlH,KAAKuI,MAAMC,iB,GAvDUC,aA+D3C8S,GAAczO,aAAe,CAC1B+B,KAAM,K,yBChEY2M,G,YAClB,WAAYjT,GAAQ,IAAD,8BAChB,4CAAMA,KAEDH,MAAQ,CACVkG,QAAS,CACNmN,MAAO,CACJzX,GAAI,YACJ0X,WAAY,cACZC,WAAY,CACTC,SAAS,EACT3C,MAAO,OACP4C,IAAK,GACLC,KAAM,EACNC,KAAM,GACNC,QAAS,IAEZC,UAC4B,SAAzB5S,GAAUQ,WAAwB,UAAY,UACjDqS,SAAS,GAEZC,WAAY,CACTP,SAAS,GAEZQ,OAAQ,CACLC,MAAO,UAEVhJ,MAAO,CACJzG,KAAM,YACN0P,MAAO,QAEVC,KAAM,CACHnC,YAAa,kBACboC,IAAK,CACFC,OAAQ,CAAC,kBAAmB,eAC5BT,QAAS,KAGfU,MAAO,CACJhZ,KAAM,OACN8U,OAAQ,CACLmE,MAAO,CACJC,SAAU,SAIhBC,WAAY,EAAKtU,MAAMiQ,OACvBsE,WAAY,CACTvV,MAAM,GAETuB,QAAS,CACN8S,SAAS,IAGfmB,MAAO,CAEJC,IACGC,KAAKD,IAAI,EAAKzU,MAAM2U,OAAO,GAAGra,MAAQ,EAAK0F,MAAM4U,YAC5CF,KAAKD,IAAI,EAAKzU,MAAM2U,OAAO,GAAGra,MAAQ,GACtC,EAAK0F,MAAM4U,YAAc,IAEpCC,YAAa,CACVjW,SAAU,OACV4V,MAAO,CACJ,CACGM,EAAG,EAAK9U,MAAM4U,YACdG,GAAI,KACJC,gBAAiB,EACjBnD,YAAa,MACboD,UAAW,UACXxB,QAAS,GACTyB,QAAS,EACTC,QAAS,EACTC,WAAY,EACZ9N,MAAO,CACJuK,YAAa,cACbuC,MAAO,CACJ1D,MAAO,OACPyC,WAAY,WAEfvU,SAAU,QACVsW,QAAS,EACTC,QAAS,GACT9Q,KACG,EAAKrE,MAAMqV,WAAa,KAAO,EAAKrV,MAAM4U,cAGnD,CACGE,EAAG,EAAKQ,aACRP,GAAI,KACJC,gBAAiB,EACjBnD,YAAa,UACboD,UAAW,UACXxB,QAAS,GACTyB,QAAS,EACTC,QAAS,EACTC,WAAY,EACZ9N,MAAO,CACJuK,YAAa,cACbuC,MAAO,CACJ1D,MAAO,OACPyC,WAAY,WAEfvU,SAAU,QACVyF,KAAM,YAAc,EAAKiR,aACzBJ,QAAS,EACTC,QAAS,MAKrBrT,OAAQ,CACLlD,SAAU,MACV2W,gBAAiB,QACjBC,UAAU,EACVL,SAAU,GACVD,SAAU,IAGhBP,OAAQ,EAAK3U,MAAM2U,QAtHN,E,0EA2HhB,GAAyC,IAArCld,KAAKuI,MAAM2U,OAAO,GAAGra,KAAK+H,OAC3B,OAAO,EAEV,IAAIoT,EAAShe,KAAKuI,MAAM2U,OAAO,GAAGra,KAGlC,OAFUmb,EAAOC,OAAO,SAACC,EAAUC,GAAX,OAAwBA,EAAWD,IAC3CF,EAAOpT,QACZwT,YAAY,K,+BAGvB,OAAyC,IAArCpe,KAAKuI,MAAM2U,OAAO,GAAGra,KAAK+H,OAExB,kBAAC,IAAD,CACGnD,KAAK,eACL4W,YAAY,qCAKlB,kBAAC,KAAD,CACG/P,QAAStO,KAAKoI,MAAMkG,QACpB4O,OAAQld,KAAKuI,MAAM2U,OACnBxZ,KAAK,OACL2V,MAAM,OACND,OAAQ,U,GAnJmB3Q,aCAlB6V,G,2MAClBlW,MAAQ,CACLmW,KAAM,I,mFAGNve,KAAKwe,e,mCAIL,IAAIC,EAAIze,KAAKuI,MAAM1F,KAAK4J,IAAI,SAAAiS,GACzB,MAAO,CACJtd,KAAMsd,EAAEtd,KACR0D,OAAQ4Z,EAAE5Z,OACV0T,OAAQkG,EAAEC,QAAQlS,IAAI,SAAAmS,GACnB,OAAO,IAAIxY,KAAKwY,EAAEpZ,YAAYqZ,mBAEjC3B,OAAQ,CACL,CACG9b,KAAMsd,EAAEtd,KACRyB,KAAM6b,EAAEC,QAAQlS,IAAI,SAAAmS,GACjB,OAAOA,EAAElc,cAMxB1C,KAAKsI,SAAS,CAAEiW,KAAME,M,mCAGtB,OAAOze,KAAKoI,MAAMmW,KAAK9R,IAAI,SAACzH,EAAKgJ,GAC9B,OACG,kBAACgN,GAAA,EAAD,CAAKK,GAAG,MACL,kBAAC,GAAD,CACGzB,WAAY5U,EAAI5D,KAChB8F,UAAW8G,EAAM,EAAI,OAAS,IAE9B,kBAAC,GAAD,CACGwK,OAAQxT,EAAIwT,OACZsG,WAAW,UACXC,WAAW,UACX7B,OAAQlY,EAAIkY,OACZC,YAAanY,EAAIF,OACjB8Y,WAAW,qB,+BAS1B,OAAO,kBAAC7C,GAAA,EAAD,KAAM/a,KAAKgf,kB,GAnDmBvW,aAuD3C6V,GAAcxR,aAAe,CAC1BjK,KAAM,I,ICzDYoc,G,2MAClB7W,MAAQ,CACLkG,QAAS,GACTV,WAAW,EACXW,OAAQ,I,mFAGRvO,KAAKwO,e,iKAIFxO,KAAKyO,YAAW,G,SACG5G,EAAOpB,SAAST,gBAAgB8M,c,OAA/CpQ,E,OACJ1C,KAAKsI,SAAS,CACXgG,QAAS5L,EAAOG,O,gDAGnB7C,KAAKsI,SAAS,CAAEgG,QAAS,IAAIK,MAAM,OAAQJ,OAAQ,Q,yBAEnDvO,KAAKyO,YAAW,G,iKAGXG,GACR5O,KAAKsI,SAAS,CAAEsF,UAAWgB,M,sCAG3B,GAAI5O,KAAKoI,MAAMkG,QACZ,OAAOtO,KAAKoI,MAAMkG,QAAQ7B,IAAI,SAAC8B,EAAQP,GACpC,OACG,4BAAQA,IAAKA,EAAKD,MAAOQ,EAAOrN,KAC5BqN,EAAOnN,U,+BAMb,IACCwM,EAAc5N,KAAKoI,MAAnBwF,UAER,OAAIA,EAEE,kBAAC,IAAD,CACGnG,KAAM,kBAAC,IAAD,CAASoH,KAAM,KACrBC,SAAUlB,EACVmB,UAAWC,KAAUC,KACrB/F,MAAI,GAJP,eAYH,kBAAC,IAAD,CACGlF,GAAIhE,KAAKuI,MAAMvE,GACfkL,IAAKlP,KAAKuI,MAAM2G,IAChBC,SAAUnP,KAAKuI,MAAM4G,SACrBL,SAAU9O,KAAKuI,MAAMuG,SACrB5F,MAAMlJ,KAAKuI,MAAMW,MAAOlJ,KAAKuI,MAAMW,KACnC6E,MAAO/N,KAAKuI,MAAMF,UAElB,4BAAQA,UAAQ,EAAC+G,QAAM,EAACN,UAAQ,GAC5B9O,KAAKuI,MAAM8G,aAEdrP,KAAKsP,qB,GAhE0B7G,aCIvByW,G,2MAClB9W,MAAQ,CACLqJ,YAAa,OACbC,cAAe,OACf9D,WAAW,EACX/K,KAAM,GACNoO,aAAc,GACdrP,QAAS,GACTud,oBAAqB,I,EAqCxBC,gBAAkB,SAAApU,GACf,IAAM5C,EAAQ,EAAKA,MACnBA,EAAM4C,EAAElG,OAAOd,IAAMgH,EAAElG,OAAOiJ,MAC9B3F,EAAK,oBACF4C,EAAElG,OAAOwJ,QAAQtD,EAAElG,OAAOua,eAAezS,KAE5C,EAAKtE,SAASF,GACd,EAAKkN,W,EASRzC,gBAAkB,SAAApB,GACf,EAAKnJ,SAAS,CACXmJ,YAAaA,EACbC,cAAeD,K,mFApDlBzR,KAAKsV,Y,mJAILtV,KAAKyO,YAAW,GAGA,MAFR7M,EAAY5B,KAAKoI,MAAjBxG,S,uBAGL5B,KAAKyO,YAAW,G,mDAMG5G,EAAOpB,SAASE,iBAAiB2Y,qBACjD1d,G,OADCc,E,OAGJ1C,KAAKsI,SAAS,CACXzF,KAAMH,EAAOG,O,kDAGhB2P,MAAM,EAAD,IACLxS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,WAC9B1K,EAAOR,cAAcmL,MAAM,+B,yBAE3BxS,KAAKyO,YAAW,G,uKAKnBzO,KAAKsI,SAAS,CAAE2I,aAAc,O,iCAatBrC,GACR5O,KAAKsI,SAAS,CACXsF,UAAWgB,M,wCAWE,IAAD,OACf,GAAiC,eAA7B5O,KAAKoI,MAAMsJ,cACZ,OAAO,kBAAC,GAAD,CAAsBpE,UAAW,kBAAM,EAAKgI,e,6CAKtD,OACG,kBAAC,GAAD,CACGtR,GAAG,UACHkL,IAAI,UACJC,SAAUnP,KAAKof,gBACfrR,MAAO/N,KAAKoI,MAAMxG,QAClByN,YACGrP,KAAKoI,MAAMxG,QACN5B,KAAKoI,MAAM+W,oBACX,wB,sCAKA,IAAD,EACwBnf,KAAKoI,MAAlCxG,EADK,EACLA,QAASgM,EADJ,EACIA,UAAW/K,EADf,EACeA,KAC5B,MAAgB,KAAZjB,EAEE,kBAAC,IAAD,CACGyR,MAAM,0BACNgL,YAAY,yBAEXre,KAAKuf,wBAKX3R,EACM,kBAAC,IAAD,MAGU,IAAhB/K,EAAK+H,OAEH,kBAAC,IAAD,CACGnD,KAAK,QACL4L,MAAM,mCACNgL,YAAY,mCAEXre,KAAKuf,wBAMZ,kBAAC,IAAD,CACGpQ,SAAUnP,KAAK6S,gBACfnB,cAAe1R,KAAKoI,MAAMsJ,cAC1BtI,OAAK,GAEL,kBAAC,IAAD,CACGpF,GAAG,OACHqP,MAAM,OACNC,MACG,kBAAC,GAAD,CACGkF,OAAQxY,KAAKoI,MAAMoQ,OACnBsG,WAAW,UACXC,WAAW,UACX7B,OAAQld,KAAKoI,MAAM8U,OACnBC,YAAand,KAAKoI,MAAMtD,OACxB8Y,WAAW,aACX/a,KAAM7C,KAAKoI,MAAMvF,SAI1B,kBAAC,IAAD,CAAKmB,GAAG,OAAOqP,MAAM,OAAOC,MAAO,kBAAC,GAAD,QACnC,kBAAC,IAAKC,SAAN,MACCvT,KAAKwT,qB,+BAMZ,OACG,yBAAKxP,GAAG,cACL,yBAAKkD,UAAU,QACZ,kBAAC,IAAD,uBAEG,yBAAKA,UAAU,eACXlH,KAAKuf,0BAIdvf,KAAK6N,qB,GA7JqBpF,aCHlB+W,G,2MAClBpX,MAAQ,CACLC,SAAU,GACV/E,QAAS,CACN,CAAEsJ,KAAM,IAAKD,QAAQ,GACrB,CAAEC,KAAM,OACR,CAAEA,KAAM,cACR,CAAEA,KAAM,eACR,CAAEA,KAAM,SAAUD,QAAQ,GAC1B,CAAEC,KAAM,WACR,CAAEA,KAAM,a,mFAKX,OAAO,kBAAC,GAAD,CAActJ,QAAStD,KAAKoI,MAAM9E,Y,wCAGzC,OAAO,+BAAQtD,KAAKiN,qB,wCAEJ,IAAD,OAEf,OADiBjN,KAAKuI,MAAd1F,KACI4J,IAAI,SAACzH,EAAKgJ,GACnB,OACG,wBACGA,IAAKhJ,EAAI9D,IACT2H,QAAS,SAAAmC,GAAC,OAAI,EAAKmD,gBAAgBnD,EAAGhG,IACtCkC,UAAS,UACN,EAAKkB,MAAMC,SAASnH,MAAQ8D,EAAI9D,IAAM,cAAgB,KAGzD,kBAAC,GAAD,CAAW8M,IAAKA,EAAKD,MAAOC,EAAKrB,QAAM,IACvC,kBAAC,GAAD,CAAWoB,MAAO/I,EAAI5D,OACtB,kBAAC,GAAD,CACG2M,MAAO,IAAI3H,KAAKpB,EAAIJ,WAAW6P,uBAElC,kBAAC,GAAD,CAAW1G,MAAO,IAAI3H,KAAKpB,EAAIH,SAAS4P,uBACxC,kBAAC,GAAD,CAAW1G,MAAO/I,EAAIF,OAAQ6H,QAAM,IACpC,kBAAC,GAAD,CAAWoB,MAAO/I,EAAIpD,QAAQR,OAC9B,kBAAC,GAAD,CAAW2M,MAAO/I,EAAID,QAAQ3D,Y,sCAM1B4J,EAAGhG,GAGhB,GAFAgG,EAAEC,iBACmBjL,KAAKoI,MAAlBC,SACKnH,MAAQ8D,EAAI9D,IAKtB,OAJAlB,KAAKuI,MAAM6F,YAAYpJ,GAAK,QAC5BhF,KAAKsI,SAAS,CACXD,SAAUrD,IAIhBhF,KAAKuI,MAAM6F,YAAY,IAAI,GAC3BpO,KAAKsI,SAAS,CAAED,SAAU,O,+BAI1B,OACG,kBAAC,GAAD,CACG/E,QAAStD,KAAKoI,MAAM9E,QACpB4J,KAAMlN,KAAKiN,kBACXD,SAAUhN,KAAKuI,MAAMyE,SACrBY,UAAW5N,KAAKuI,MAAMqF,UACtBN,UAAWtN,KAAKuI,MAAM+E,gB,GAlEK7E,aAuEvC+W,GAAU1S,aAAe,CACtBjK,KAAM,GACNyK,UAAW,c,IC/DOmS,G,iLACR,IAAD,EAiBFzf,KAAKuI,MAfN4G,EAFG,EAEHA,SACAuQ,EAHG,EAGHA,oBACAC,EAJG,EAIHA,mBACAxJ,EALG,EAKHA,qBACA3G,EANG,EAMHA,SACAC,EAPG,EAOHA,cACAC,EARG,EAQHA,QACAtO,EATG,EASHA,KACAwD,EAVG,EAUHA,UACAC,EAXG,EAWHA,QACAC,EAZG,EAYHA,OACAlD,EAbG,EAaHA,QACAge,EAdG,EAcHA,gBACA7a,EAfG,EAeHA,QACA4K,EAhBG,EAgBHA,gBAGH,OACG,6BACG,kBAACC,GAAA,EAAD,CAAM1I,UAAU,OAAOgI,IAAI,qBACxB,kBAAC,IAAD,CAAWzB,WAAS,GACjB,4BACG,4BACG,kBAAC,IAAD,CACGoC,MAAM,OACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,OACHmL,SAAUA,EACVE,YAAY,UACZ3L,KAAK,OACLqK,MAAO3M,EACP8H,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,YACNC,SAAS,YACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,KAAD,CACGwE,WAAY,SAAA5P,GAAS,OAClBA,EAAU6P,sBAEbtF,SAAUgH,EACVxB,UAAW,SAAA/P,GAAS,OACjB,IAAIwB,KAAKxB,GAAW6P,sBAEvBpF,YAAY,aACZuF,aAAc,IAAIxO,KAClB2H,MAAOnJ,EACPsE,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,UACNC,SAAS,UACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,KAAD,CACGwE,WAAY,SAAA3P,GAAO,OAAIA,EAAQ4P,sBAC/BtF,SAAUwQ,EACVhL,UAAW,SAAA9P,GAAO,OACf,IAAIuB,KAAKvB,GAAS4P,oBAErBpF,YAAY,aACZuF,aAAc,IAAIxO,KAClB2H,MAAOlJ,EACPgQ,QAAS,IAAIzO,KACb8C,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,SACNC,SAAS,SACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,SACH8Q,cAAe4K,EACfrQ,YAAY,YACZ3L,KAAK,SACLqK,MAAOjJ,EACPoE,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,UACNC,SAAS,UACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,UACHmL,SAAUA,EACVE,YAAY,aACZtB,MAAOnM,EACPyG,SAAUuX,EACV1W,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,UACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,UACHkL,IAAI,UACJC,SAAUA,EACVoF,KAAMxP,EACNsD,SAAUsH,EACVzG,MAAI,EACJmG,YAAY,yBAMxB,yBAAKnI,UAAU,cACZ,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAQO,KAAK,UAAUoB,QAAS6G,GAAhC,SAGA,kBAAC,IAAD,CAAQjI,KAAK,QAAQoB,QAAS2G,GAC1BC,W,GA5JYhH,aAqKrCgX,GAAQ3S,aAAe,CACpBmD,iBAAkB,O,ICjLAgF,G,iLAEf,OACG,yBAAKjR,GAAG,cACL,kBAAC,IAAD,CACGqH,OAAQrL,KAAKuI,MAAM8C,OACnB8E,QAASnQ,KAAKuI,MAAM6H,QACpBC,OAAQrQ,KAAKuI,MAAM+H,QAEnB,kBAAC,IAAD,KACG,yBAAKpJ,UAAU,aACZ,yBAAKlD,GAAIhE,KAAKuI,MAAMvE,IACjB,kBAAC,GAAD,CACG5C,KAAMpB,KAAKuI,MAAMnH,KACjBwD,UAAW5E,KAAKuI,MAAM3D,UACtBC,QAAS7E,KAAKuI,MAAM1D,QACpByP,YAAatU,KAAKuI,MAAM+L,YACxBsL,gBAAiB5f,KAAKuI,MAAMqX,gBAC5BjQ,gBAAiB3P,KAAKuI,MAAMoH,gBAC5B7K,OAAQ9E,KAAKuI,MAAMzD,OACnBqK,SAAUnP,KAAKuI,MAAM4G,SACrBwQ,mBAAoB3f,KAAKuI,MAAMoX,mBAC/BxJ,qBACGnW,KAAKuI,MAAM4N,qBAEduJ,oBAAqB1f,KAAKuI,MAAMmX,oBAChClQ,SAAUxP,KAAKuI,MAAMgI,aACrBd,cAAezP,KAAKuI,MAAMkH,cAC1BC,QAAS1P,KAAKuI,MAAMmH,aAKhC,kBAAC,IAAD,CACGrE,OAAQrL,KAAKuI,MAAMiI,YACnBC,kBAAkB,aAClBC,UAAW1Q,KAAKuI,MAAMmH,QACtBiB,iBAAiB,SACjBC,SAAU5Q,KAAKuI,MAAMsI,WACrBrJ,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CACGC,UAAWpH,SAASqH,eAAe,iBAIzC,kBAAC,IAAD,KAAKhR,KAAKuI,MAAM0I,cAChB,yE,GAhDsBxI,aCInBlI,G,2MAClB6H,MAAQ,CACLqJ,YAAa,OACbC,cAAe,OACf9D,WAAW,EACX/K,KAAM,GACNgd,UAAU,EACVlO,WAAW,EACXV,aAAc,GACdW,iBAAiB,EACjBC,kBAAkB,EAClBC,mBAAmB,EACnBV,SAAS,EACTG,WAAW,EACXnQ,KAAM,GACNwD,UAAW,IAAIwB,KACfvB,QAAS,EAAKib,iBAAiB,IAAI1Z,MACnCtB,OAAQ,EACRlD,QAAS,GACTmD,QAAS,GACTsD,SAAU,I,EASb0J,YAAc,SAACC,EAAKC,GACjB,EAAK3J,SAAS,CACXD,SAAU2J,EACVZ,QAASa,EACTV,UAAWU,K,EA4CjB1B,a,sCAAe,WAAMvF,GAAN,6BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEmD,EAAK7C,MAA5DhH,EAFI,EAEJA,KAAMwD,EAFF,EAEEA,UAAWC,EAFb,EAEaA,QAASC,EAFtB,EAEsBA,OAAQlD,EAF9B,EAE8BA,QAASmD,EAFvC,EAEuCA,QAFvC,SAGI8C,EAAOpB,SAASC,YAAYqZ,aACzC3e,EACAwD,EACAC,EACAC,EACAlD,EACAmD,GATS,cAGRC,EAHQ,OAWZ8C,QAAQC,IAAI/C,GAXA,kBAaU6C,EAAOpB,SAASC,YAAYsZ,QAAQhb,GAb9C,OAca,MAdb,OAcEO,SACRsC,EAAOR,cAAcgL,QAArB,cAAoCjR,EAApC,wBACA,EAAKkU,WAhBC,kDAmBT,EAAK2K,YAAL,MAnBS,wD,wDAsBfxN,a,sCAAe,WAAMzH,GAAN,+BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAUR,EAAK7C,MAPNhH,EAHS,EAGTA,KACAwD,EAJS,EAITA,UACAC,EALS,EAKTA,QACAC,EANS,EAMTA,OACAlD,EAPS,EAOTA,QACAmD,EARS,EAQTA,QACAsD,EATS,EASTA,SATS,kBAaOR,EAAOpB,SAASC,YAAYqZ,aACzC3e,EACAwD,EACAC,EACAC,EACAlD,EACAmD,GAnBM,cAaLC,EAbK,QAqBLA,IAAI9D,IAAMmH,EAASnH,IArBd,SAsBU2G,EAAOpB,SAASC,YAAYwZ,UAAUlb,GAtBhD,OAuBa,MAvBb,OAuBEO,SACRsC,EAAOR,cAAcgL,QAArB,cAAoCjR,EAApC,wBACA,EAAKkU,WAzBC,kDA4BT,EAAK2K,YAAL,MA5BS,wD,wDAwDf9Q,SAAW,SAAAnE,GACR,IAAM5C,EAAQ,EAAKA,MACnBA,EAAM4C,EAAElG,OAAOd,IAAMgH,EAAElG,OAAOiJ,MAC9B,EAAKzF,SAASF,I,EAGjB+X,wBAA0B,SAAA1K,GACvB,EAAKnN,SAAS,CAAExD,OAAQ2Q,K,EAG3BU,qBAAuB,SAAAR,GACpB,EAAKrN,SAAS,CAAE1D,UAAW+Q,K,EAE9BgK,mBAAqB,SAAAS,GAClB,EAAK9X,SAAS,CAAEzD,QAASub,K,EAc5BzN,e,sCAAiB,WAAM3H,GAAN,mBAAAkH,EAAA,4DACdlH,EAAEC,iBACM5C,EAAa,EAAKD,MAAlBC,SAFM,kBAIQR,EAAOpB,SAASC,YAAY2Z,WAC5ChY,EAASnH,KALD,OAOW,OAHlBwB,EAJO,QAOA6C,QAAoC,MAAlB7C,EAAO6C,SAC7BP,EAAMtC,EAAOG,KACjBiF,QAAQC,IAAI/C,GAEZ,EAAKsD,SAAS,CACXuJ,kBAAkB,EAClBxJ,SAAUrD,EACV5D,KAAM4D,EAAI5D,KACVwD,UAAW,IAAIwB,KAAKpB,EAAIJ,WACxBC,QAAS,IAAIuB,KAAKpB,EAAIH,SACtBC,OAAQE,EAAIF,OACZlD,QAASoD,EAAIpD,QAAQV,IACrB6D,QAASC,EAAID,QAAQ7D,OAnBhB,gDAuBX4G,QAAQC,IAAR,MACA,EAAKO,SAAS,CACXuJ,kBAAkB,EAClBzQ,KAAMiH,EAASjH,KACf2D,QAASsD,EAAStD,QAAQ7D,IAC1B0D,UAAW,IAAIwB,KAAKiC,EAASzD,WAC7BC,QAAS,IAAIuB,KAAKiC,EAASxD,SAC3BC,OAAQuD,EAASvD,OACjBlD,QAASyG,EAASzG,QAAQV,MA/BlB,uD,wDA0DjB2R,gBAAkB,SAAApB,GACf,EAAKnJ,SAAS,CACXmJ,YAAaA,EACbC,cAAeD,K,gFA7NJiN,GACd,IAAM4B,EAAY,IAAIla,KAEtB,OADAka,EAAUC,QAAQ7B,EAAE8B,UAAY,IACzBF,I,0CAYPtgB,KAAKsV,Y,qJAILtV,KAAKyO,YAAW,G,kBAIE5G,EAAOpB,SAASC,YAAY0N,U,OAA3C1R,E,OACA1C,KAAKsI,SAAS,CACXzF,KAAMH,EAAOG,KACbgd,UAAU,IAEc,IAAvBnd,EAAOG,KAAK+H,QACb5K,KAAKsI,SAAS,CAAEuX,UAAU,I,gDAG7B7f,KAAKigB,YAAL,M,yBAEAjgB,KAAKyO,YAAW,G,yMAILzK,G,gFAGXhE,KAAK+S,gB,SACUlL,EAAOpB,SAASC,YAAY+Z,cAAczc,G,OACnC,M,OAAXuB,QACRsC,EAAOR,cAAcgL,QAAQ,4B,gDAGhCrS,KAAKigB,YAAL,M,yBAEAjgB,KAAKsV,UACLtV,KAAKiT,mB,mKA0DC9O,GACT,IAAI6I,EAAW,gBACa,MAAxB7I,EAAIoO,SAAShN,SACdyH,EAAQ,iBAAa7I,EAAIoO,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB7I,EAAIoO,SAAShN,SACdyH,EAAQ,6BACRnF,EAAOR,cAAcnE,MAAM8J,IAE9BhN,KAAK2R,UAAU3E,K,gCAGRkG,GACPlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAMS,aAAciC,M,mCAGjDlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAOS,aAAc,O,sCAIlDjR,KAAKsI,SAAS,CAAE2I,aAAc,O,mCAqB9BjR,KAAKsI,SAAS,CACXsJ,iBAAiB,M,oCAIpB5R,KAAKsI,SAAS,CACXsJ,iBAAiB,M,wCAwCpB5R,KAAKsI,SAAS,CACXuJ,kBAAkB,M,wCAKrB7R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,yCAItB9R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,iCAIdlD,GACR5O,KAAKsI,SAAS,CACXsF,UAAWgB,M,kCAWd5O,KAAKsI,SAAS,CACXlH,KAAM,GACN2D,QAAS,GACTyL,aAAa,EACbS,aAAc,O,wCAID,IAAD,OACf,GAAiC,SAA7BjR,KAAKoI,MAAMsJ,cACZ,OACG,kBAAC,GAAD,CACGP,OAAQnR,KAAK2S,eACbvB,QAASpR,KAAKoI,MAAMgJ,QACpBC,MAAO,kBAAM,EAAK8B,cAClB7B,SAAU,kBAAM,EAAK8B,mBACrB7B,UAAWvR,KAAKoI,MAAMmJ,UACtBjE,UAAW,kBAAM,EAAKgI,YAEtB,kBAAC,IAAD,S,+BAMF,IAAD,SAYFtV,KAAKoI,MAVNvF,EAFG,EAEHA,KACA+K,EAHG,EAGHA,UACAxM,EAJG,EAIHA,KACAwD,EALG,EAKHA,UACAC,EANG,EAMHA,QACAC,EAPG,EAOHA,OACAlD,EARG,EAQHA,QACAmD,EATG,EASHA,QACAyL,EAVG,EAUHA,YACAnI,EAXG,EAWHA,SAGH,OACG,yBAAKrE,GAAG,YACL,yBAAKkD,UAAU,QACZ,kBAAC,IAAD,oBAEH,kBAAC,IAAD,CACGiI,SAAUnP,KAAK6S,gBACfnB,cAAe1R,KAAKoI,MAAMsJ,cAC1BtI,OAAK,GAEL,kBAAC,IAAD,CACGpF,GAAG,OACHqP,MAAM,OACNC,MACG,kBAAC,IAAD,KACG,kBAAC,GAAD,CACGoN,QAAS1gB,KAAKoI,MAAMyX,SACpBhd,KAAMA,EACNyK,UAAW,kBAAM,EAAKgI,WACtB1H,UAAWA,EACXQ,YAAapO,KAAK+R,cAErB,kBAAC,GAAD,CACG1G,OAAQrL,KAAKoI,MAAMyJ,iBACnBvB,OAAQ,kBAAM,EAAKqC,kBACnBvC,QAAS,kBAAM,EAAKqD,mBACpBrS,KAAMiH,EAASjH,KACfwD,UAAWA,EACXC,QAASA,EACTC,OAAQA,EACRlD,QAASA,EACTge,gBAAiBhe,EACjBmD,QAASA,EACT4K,gBAAiB5K,EACjBoK,SAAUnP,KAAKmP,SACfgH,qBAAsBnW,KAAKmW,qBAC3BwJ,mBAAoB3f,KAAK2f,mBACzBD,oBAAqB1f,KAAKmgB,wBAC1B5P,aAAcvQ,KAAKyS,aACnBhD,cAAc,SACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAMwJ,gBACnBtB,OAAQ,kBAAM,EAAK6C,cACnB/C,QAAS,kBAAM,EAAKuD,eACpBvS,KAAMA,EACNwD,UAAWA,EACXC,QAASA,EACTC,OAAQA,EACRlD,QAASA,EACTmD,QAASA,EACToK,SAAUnP,KAAKmP,SACfgH,qBAAsBnW,KAAKmW,qBAC3BwJ,mBAAoB3f,KAAK2f,mBACzBD,oBAAqB1f,KAAKmgB,wBAC1B5P,aAAcvQ,KAAKuQ,aACnBd,cAAc,MACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAM0J,kBACnBpB,UAAW,kBAAM,EAAKiQ,WAAWtY,EAASnH,MAC1C0P,SAAU,kBAAM,EAAKqC,oBACrB+D,SAAS,WACTrP,KAAI,eAAUU,EAASjH,WAKnC,kBAAC,IAAKmS,SAAN,MACCvT,KAAKwT,wB,GA1Wc/K,aCJdmY,G,2MAClBxY,MAAQ,CACLC,SAAU,GACV/E,QAAS,CACN,CAAEsJ,KAAM,IAAKD,QAAQ,GACrB,CAAEC,KAAM,QACR,CAAEA,KAAM,SACR,CAAEA,KAAM,UAAWD,QAAQ,GAC3B,CAAEC,KAAM,QACR,CAAEA,KAAM,WACR,CAAEA,KAAM,U,iFAKX,OAAO,+BAAQ5M,KAAKiN,qB,wCAGJ,IAAD,OAEf,OADiBjN,KAAKuI,MAAd1F,KACI4J,IAAI,SAAC7I,EAAUoK,GACxB,OACG,wBACGA,IAAKpK,EAAS1C,IACd2H,QAAS,SAAAmC,GAAC,OAAI,EAAKmD,gBAAgBnD,EAAGpH,IACtCsD,UAAS,WACN,EAAKkB,MAAMC,SAASnH,MAAQ0C,EAAS1C,IAAM,cAAgB,KAG9D,kBAAC,GAAD,CAAW8M,IAAKA,EAAKD,MAAOC,EAAKrB,QAAM,IACvC,kBAAC,GAAD,CAAWoB,MAAOnK,EAASxC,OAC3B,kBAAC,GAAD,CAAW2M,MAAOnK,EAASjC,QAC3B,kBAAC,GAAD,CACGoM,MAAyB,OAAlBnK,EAAShD,KAChB+L,QAAM,IAET,kBAAC,GAAD,CACGoB,MAAyB,OAAlBnK,EAASF,KAAgB,MAAQE,EAASF,KAAKA,OAEzD,kBAAC,GAAD,CACGqK,MACwB,OAArBnK,EAAShC,QAAmB,MAAQgC,EAAShC,QAAQR,OAG3D,kBAAC,GAAD,CACG2M,MAAwB,MAAjBnK,EAASD,KAAe,MAAQC,EAASD,KAAKvC,Y,sCAOpD4J,EAAGpH,GAGhB,GAFAoH,EAAEC,iBACmBjL,KAAKoI,MAAlBC,SACKnH,MAAQ0C,EAAS1C,IAK3B,OAJAlB,KAAKuI,MAAM6F,YAAYxK,GAAU,QACjC5D,KAAKsI,SAAS,CACXD,SAAUzE,IAIhB5D,KAAKuI,MAAM6F,YAAY,IAAI,GAC3BpO,KAAKsI,SAAS,CAAED,SAAU,O,+BAI1B,OACG,kBAAC,GAAD,CACG/E,QAAStD,KAAKoI,MAAM9E,QACpB4J,KAAMlN,KAAKiN,kBACXD,SAAUhN,KAAKuI,MAAMyE,SACrBY,UAAW5N,KAAKuI,MAAMqF,UACtBN,UAAWtN,KAAKuI,MAAM+E,gB,GAzEU7E,aA8E5CmY,GAAe9T,aAAe,CAC3BjK,KAAM,GACNyK,UAAW,c,IChFOe,G,2MAClBjG,MAAQ,CACLkG,QAAS,GACTV,WAAW,EACXW,OAAQ,I,mFAGRvO,KAAKwO,e,iKAIFxO,KAAKyO,YAAW,G,SACG5G,EAAOpB,SAASG,aAAa6Q,W,OAA5C/U,E,OACJ1C,KAAKsI,SAAS,CACXgG,QAAS5L,EAAOG,O,gDAGnB7C,KAAKsI,SAAS,CACXgG,QAAS,IAAIK,MAAM,OACnBJ,OAAQ,Q,yBAGXvO,KAAKyO,YAAW,G,iKAIXG,GACR5O,KAAKsI,SAAS,CAAEsF,UAAWgB,M,sCAI3B,GAAI5O,KAAKoI,MAAMkG,QACZ,OAAOtO,KAAKoI,MAAMkG,QAAQ7B,IAAI,SAAC8B,EAAQP,GACpC,OACG,4BAAQA,IAAKA,EAAKD,MAAOQ,EAAOrN,KAAhC,IACKqN,EAAOpM,SADZ,OAC0BoM,EAAO5M,W,+BAMnC,IACCiM,EAAc5N,KAAKoI,MAAnBwF,UAER,OAAIA,EAEE,kBAAC,IAAD,CACGnG,KAAM,kBAAC,IAAD,CAASoH,KAAM,KACrBC,SAAUlB,EACVmB,UAAWC,KAAUC,KACrB/F,MAAI,GAJP,YAWH,kBAAC,IAAD,CACGlF,GAAIhE,KAAKuI,MAAMvE,GACfkL,IAAKlP,KAAKuI,MAAM2G,IAChBC,SAAUnP,KAAKuI,MAAM4G,SACrBL,SAAU9O,KAAKuI,MAAMuG,SACrB5F,KAAMlJ,KAAKuI,MAAMW,KACjB6E,MAAO/N,KAAKuI,MAAMF,UAElB,4BAAQA,UAAQ,EAAC+G,QAAM,EAACN,UAAQ,GAC5B9O,KAAKuI,MAAM8G,aAEdrP,KAAKsP,qB,GApE4B7G,aCAzB4F,G,2MAClBjG,MAAQ,CACLkG,QAAS,GACTV,WAAW,EACXW,OAAQ,I,mFAGRvO,KAAKwO,e,iKAIFxO,KAAKyO,YAAW,G,SACG5G,EAAOpB,SAASlC,sBAAsBsc,mB,OAArDne,E,OACJ1C,KAAKsI,SAAS,CACXgG,QAAS5L,EAAOG,O,gDAGnB7C,KAAKsI,SAAS,CACXgG,QAAS,IAAIK,MAAM,OACnBJ,OAAQ,Q,yBAGXvO,KAAKyO,YAAW,G,iKAGXG,GACR5O,KAAKsI,SAAS,CAAEsF,UAAWgB,M,sCAG3B,GAAI5O,KAAKoI,MAAMkG,QACZ,OAAOtO,KAAKoI,MAAMkG,QAAQ7B,IAAI,SAAC8B,EAAQP,GACpC,OACG,4BAAQA,IAAKA,EAAKD,MAAOQ,EAAOrN,KAC5BqN,EAAO7K,U,+BAMb,IACCkK,EAAc5N,KAAKoI,MAAnBwF,UAER,OAAIA,EAEE,kBAAC,IAAD,CACGnG,KAAM,kBAAC,IAAD,CAASoH,KAAM,KACrBC,SAAUlB,EACVmB,UAAWC,KAAUC,KACrB/F,MAAI,GAJP,qBAWH,kBAAC,IAAD,CACGlF,GAAIhE,KAAKuI,MAAMvE,GACfkL,IAAKlP,KAAKuI,MAAM2G,IAChBC,SAAUnP,KAAKuI,MAAM4G,SACrBL,SAAU9O,KAAKuI,MAAMuG,SACrB5F,KAAMlJ,KAAKuI,MAAMW,KACjB6E,MAAO/N,KAAKuI,MAAMF,UAElB,4BAAQA,UAAQ,EAAC+G,QAAM,EAACN,UAAQ,GAC5B9O,KAAKuI,MAAM8G,aAEdrP,KAAKsP,qB,GAlE4B7G,aCAzBqY,G,2MAClB1Y,MAAQ,CACLkG,QAAS,GACTV,WAAW,EACXW,OAAQ,I,mFAGRvO,KAAKwO,e,iKAIFxO,KAAKyO,YAAW,G,SACG5G,EAAOpB,SAASZ,aAAakb,W,OAA5Cre,E,OACJ1C,KAAKsI,SAAS,CACXgG,QAAS5L,EAAOG,O,gDAGnB7C,KAAKsI,SAAS,CACXgG,QAAS,IAAIK,MAAM,OACnBJ,OAAQ,Q,yBAGXvO,KAAKyO,YAAW,G,iKAGXG,GACR5O,KAAKsI,SAAS,CAAEsF,UAAWgB,M,sCAG3B,GAAI5O,KAAKoI,MAAMkG,QACZ,OAAOtO,KAAKoI,MAAMkG,QAAQ7B,IAAI,SAAC8B,EAAQP,GACpC,OACG,4BAAQA,IAAKA,EAAKD,MAAOQ,EAAOrN,KAC5BqN,EAAOnN,U,+BAMb,IACCwM,EAAc5N,KAAKoI,MAAnBwF,UAER,OAAIA,EAEE,kBAAC,IAAD,CACGnG,KAAM,kBAAC,IAAD,CAASoH,KAAM,KACrBC,SAAUlB,EACVmB,UAAWC,KAAUC,KACrB/F,MAAI,GAJP,YAWH,kBAAC,IAAD,CACGlF,GAAIhE,KAAKuI,MAAMvE,GACfkL,IAAKlP,KAAKuI,MAAM2G,IAChBC,SAAUnP,KAAKuI,MAAM4G,SACrBL,SAAU9O,KAAKuI,MAAMuG,SACrB5F,KAAMlJ,KAAKuI,MAAMW,KACjB6E,MAAO/N,KAAKuI,MAAMF,UAElB,4BAAQA,UAAQ,EAAC+G,QAAM,EAACN,UAAQ,GAC5B9O,KAAKuI,MAAM8G,aAEdrP,KAAKsP,qB,GAlEwB7G,aCUrBuY,G,iLACR,IAAD,EAgBFhhB,KAAKuI,MAdN4G,EAFG,EAEHA,SACAK,EAHG,EAGHA,SACAC,EAJG,EAIHA,cACAC,EALG,EAKHA,QACAtO,EANG,EAMHA,KACAO,EAPG,EAOHA,MACAf,EARG,EAQHA,KACAqgB,EATG,EASHA,aACAvd,EAVG,EAUHA,KACAwd,EAXG,EAWHA,aACAtf,EAZG,EAYHA,QACAge,EAbG,EAaHA,gBACAjc,EAdG,EAcHA,KACAwd,EAfG,EAeHA,aAGH,OACG,6BACG,kBAACvR,GAAA,EAAD,CAAM1I,UAAU,OAAOgI,IAAI,qBACxB,kBAAC,IAAD,CAAWzB,WAAS,GACjB,+BACG,4BACG,4BACG,kBAAC,IAAD,CACGoC,MAAM,OACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,OACHmL,SAAUA,EACVE,YAAY,UACZ3L,KAAK,OACLqK,MAAO3M,EACP8H,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,QACNC,SAAS,QACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,QACHmL,SAAUA,EACVE,YAAY,WACZ3L,KAAK,QACLqK,MAAOpM,EACPuH,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CAAW2G,MAAM,OAAOC,SAAS,UAEpC,wBAAIE,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,OACHkL,IAAI,OACJC,SAAUA,EACVoF,KAAM3T,EACNyH,SAAU4Y,EACV/X,MAAI,EACJmG,YAAY,kBAIrB,4BACG,4BACG,kBAAC,IAAD,CACGQ,MAAM,gBACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,OACHkL,IAAI,OACJC,SAAUA,EACVoF,KAAM7Q,EACN2E,SAAU6Y,EACVhY,MAAI,EACJmG,YAAY,2BAIrB,4BACG,4BACG,kBAAC,IAAD,CACGQ,MAAM,UACNC,SAAS,UACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,UACHmL,SAAUA,EACVE,YAAY,aACZtB,MAAOnM,EACPyG,SAAUuX,EACV1W,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,OACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,OACHkL,IAAI,OACJC,SAAUA,EACVoF,KAAM5Q,EACN0E,SAAU8Y,EACVjY,MAAI,EACJmG,YAAY,oBAO3B,yBAAKnI,UAAU,cACZ,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAQO,KAAK,UAAUoB,QAAS6G,GAAhC,SAGA,kBAAC,IAAD,CAAQjI,KAAK,QAAQoB,QAAS2G,GAC1BC,W,GAlJiBhH,aA2J1CuY,GAAalU,aAAe,CACzBmD,iBAAkB,O,ICtKAgF,G,iLAEf,OACG,yBAAKjR,GAAG,cACL,kBAAC,IAAD,CACGqH,OAAQrL,KAAKuI,MAAM8C,OACnB8E,QAASnQ,KAAKuI,MAAM6H,QACpBC,OAAQrQ,KAAKuI,MAAM+H,QAEnB,kBAAC,IAAD,KACG,yBAAKpJ,UAAU,aACZ,yBAAKlD,GAAIhE,KAAKuI,MAAMvE,IACjB,kBAAC,GAAD,CACG5C,KAAMpB,KAAKuI,MAAMnH,KACjBO,MAAO3B,KAAKuI,MAAM5G,MAClBf,KAAMZ,KAAKuI,MAAM3H,KACjBqgB,aAAcjhB,KAAKuI,MAAM0Y,aACzBvd,KAAM1D,KAAKuI,MAAM7E,KACjBwd,aAAclhB,KAAKuI,MAAM2Y,aACzBtf,QAAS5B,KAAKuI,MAAM3G,QACpBge,gBAAiB5f,KAAKuI,MAAMqX,gBAC5Bjc,KAAM3D,KAAKuI,MAAM5E,KACjBwd,aAAcnhB,KAAKuI,MAAM4Y,aACzBhS,SAAUnP,KAAKuI,MAAM4G,SACrBK,SAAUxP,KAAKuI,MAAMgI,aACrBd,cAAezP,KAAKuI,MAAMkH,cAC1BC,QAAS1P,KAAKuI,MAAMmH,aAKhC,kBAAC,IAAD,CACGrE,OAAQrL,KAAKuI,MAAMiI,YACnBC,kBAAkB,aAClBC,UAAW1Q,KAAKuI,MAAMmH,QACtBiB,iBAAiB,SACjBC,SAAU5Q,KAAKuI,MAAMsI,WACrBrJ,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CACGC,UAAWpH,SAASqH,eAAe,iBAIzC,kBAAC,IAAD,KAAKhR,KAAKuI,MAAM0I,cAChB,yE,GA9CsBxI,aCCnB2Y,G,iLACR,IAAD,EAiCFphB,KAAKuI,MA/BN1F,EAFG,EAEHA,KACAyK,EAHG,EAGHA,UACAM,EAJG,EAIHA,UACA4C,EALG,EAKHA,YACAsB,EANG,EAMHA,kBACAC,EAPG,EAOHA,YACAoD,EARG,EAQHA,qBACAkM,EATG,EASHA,qBACAC,EAVG,EAUHA,sBACApM,EAXG,EAWHA,sBACAqM,EAZG,EAYHA,sBACAC,EAbG,EAaHA,uBACApgB,EAdG,EAcHA,KACAO,EAfG,EAeHA,MACAf,EAhBG,EAgBHA,KACAqgB,EAjBG,EAiBHA,aACAvd,EAlBG,EAkBHA,KACAwd,EAnBG,EAmBHA,aACAtf,EApBG,EAoBHA,QACAge,EArBG,EAqBHA,gBACAjc,EAtBG,EAsBHA,KACAwd,EAvBG,EAuBHA,aACAhS,EAxBG,EAwBHA,SACAoB,EAzBG,EAyBHA,aACAkC,EA1BG,EA0BHA,aACA/C,EA3BG,EA2BHA,QACA+R,EA5BG,EA4BHA,aACAC,EA7BG,EA6BHA,gBACAC,EA9BG,EA8BHA,eACAC,EA/BG,EA+BHA,iBACA5K,EAhCG,EAgCHA,SAEH,OACG,6BACG,kBAAC,GAAD,CACGnU,KAAMA,EACNyK,UAAWA,EACXM,UAAWA,EACXQ,YAAa2D,IAEhB,kBAAC,GAAD,CACG1G,OAAQ8J,EACR7E,OAAQ+Q,EACRjR,QAASkR,EACTlgB,KAAMA,EACNO,MAAOA,EACPf,KAAMA,EACNqgB,aAAcA,EACdvd,KAAMA,EACNwd,aAAcA,EACdtf,QAASA,EACTge,gBAAiBA,EACjBjc,KAAMA,EACNwd,aAAcA,EACdhS,SAAUA,EACVoB,aAAckC,EACdhD,cAAc,SACdC,QAASA,EACTc,YAAaA,EACbK,WAAY4Q,IAEf,kBAAC,GAAD,CACGpW,OAAQ6J,EACR5E,OAAQiR,EACRnR,QAASoR,EACTpgB,KAAMA,EACNO,MAAOA,EACPf,KAAMA,EACN8C,KAAMA,EACN9B,QAASA,EACT+B,KAAMA,EACNwL,SAAUA,EACVoB,aAAcA,EACdd,cAAc,MACdC,QAASA,EACTc,YAAaA,EACbK,WAAY4Q,IAEf,kBAAC,GAAD,CACGpW,OAAQyG,EACRpB,UAAWgR,EACX9Q,SAAU+Q,EACV3K,SAAUA,EACVrP,KAAMia,S,GAtFsBnZ,aCCtB3L,G,2MAClBsL,MAAQ,CACLqJ,YAAa,YACbC,cAAe,YACf9D,WAAW,EACX/K,KAAM,GACN8O,WAAW,EACXV,aAAc,GACdiE,uBAAuB,EACvB9T,KAAM,GACNO,MAAO,GACPf,KAAM,GACN8C,KAAM,GACN9B,QAAS,GACT+B,KAAM,GACN0E,SAAU,GACV8M,sBAAsB,EACtBrD,mBAAmB,EACnBV,SAAS,EACTG,WAAW,G,EAGdQ,YAAc,SAAClO,EAAKoO,GACjB,EAAK3J,SAAS,CACXD,SAAUxE,EACVuN,QAASa,EACTV,UAAWU,K,EA2CjB1B,a,sCAAe,WAAMvF,GAAN,+BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEuC,EAAK7C,MAAhDzG,EAFI,EAEJA,MAAOP,EAFH,EAEGA,KAAMuC,EAFT,EAESA,KAAM/B,EAFf,EAEeA,QAAShB,EAFxB,EAEwBA,KAAM8C,EAF9B,EAE8BA,KACtCsJ,EAAW,gBAHH,SAIInF,EAAOpB,SAAS3C,iBAAiBG,kBAC9C7C,EACAO,EACAf,EACA8C,EACA9B,EACA+B,GAVS,cAIRE,EAJQ,yBAaUgE,EAAOpB,SAAS3C,iBAAiB+d,aAAahe,GAbxD,OAca,MAdb,OAcE0B,SACRsC,EAAOR,cAAcgL,QAArB,mBAAyCjR,EAAzC,wBACA,EAAK0gB,oBAhBC,kDAmBmB,MAAxB,KAAIvP,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B5L,EAA5B,aACRyG,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GA3BN,wD,wDA8BfyF,a,sCAAe,WAAMzH,GAAN,iCAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEiD,EAAK7C,MAA1DhH,EAFI,EAEJA,KAAMO,EAFF,EAEEA,MAAOf,EAFT,EAESA,KAAM8C,EAFf,EAEeA,KAAM9B,EAFrB,EAEqBA,QAAS+B,EAF9B,EAE8BA,KAAM0E,EAFpC,EAEoCA,SAE5C2E,EAAW,gBAJH,kBAMOnF,EAAOpB,SAAS3C,iBAAiBie,qBAC9C1Z,EAASnH,IACTE,EACAO,EACAf,EACA8C,EACA9B,EACA+B,GAbM,cAMLE,EANK,gBAeUgE,EAAOpB,SAAS3C,iBAAiBke,eACjDne,GAhBM,OAkBa,MAlBb,OAkBE0B,SACRsC,EAAOR,cAAcgL,QAArB,mBAAyCjR,EAAzC,wBACA,EAAK0gB,oBApBC,kDAuBmB,MAAxB,KAAIvP,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B5L,EAA5B,aACRyG,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GA/BN,wD,wDA6CfmC,SAAW,SAAAnE,GACR,IAAM5C,EAAQ,EAAKA,MACnBA,EAAM4C,EAAElG,OAAOd,IAAMgH,EAAElG,OAAOiJ,MAC9B,EAAKzF,SAASF,I,EAcjBsP,mB,sCAAqB,WAAM1M,GAAN,mBAAAkH,EAAA,4DAClBlH,EAAEC,iBACM5C,EAAa,EAAKD,MAAlBC,SAFU,kBAIIR,EAAOpB,SAAS3C,iBAAiBme,gBACjD5Z,EAASnH,KALG,OAOO,OAHlBwB,EAJW,QAOJ6C,SACJ1B,EAAMnB,EAAOG,KACjB,EAAKyF,SAAS,CACX6M,sBAAsB,EACtB/T,KAAMyC,EAAIzC,KACVO,MAAOkC,EAAIlC,MACXf,KAAMiD,EAAIjD,KAAKM,IACfwC,KAAMG,EAAIH,KAAKxC,IACfU,QAASiC,EAAIjC,QAAQV,IACrByC,KAAME,EAAIF,KAAKzC,OAhBN,gDAoBf4G,QAAQC,IAAR,MACA,EAAKO,SAAS,CACX6M,sBAAsB,EACtB/T,KAAMiH,EAASjH,KACfO,MAAO0G,EAAS1G,MAChBf,KAAMyH,EAASzH,KAAKM,IACpBwC,KAAM2E,EAAS3E,KAAKxC,IACpBU,QAA8B,OAArByG,EAASzG,QAAmB,GAAKyG,EAASzG,QAAQV,IAC3DyC,KAAM0E,EAAS1E,KAAKzC,MA5BR,uD,wDAuDrB2R,gBAAkB,SAAApB,GACf,EAAKnJ,SAAS,CACXmJ,YAAaA,EACbC,cAAeD,K,mFA5LlBzR,KAAK8hB,qB,8JAIL9hB,KAAKyO,YAAW,G,kBAIE5G,EAAOpB,SAAS3C,iBAAiB4K,e,OAAhDhM,E,OACA1C,KAAKsI,SAAS,CACXzF,KAAMH,EAAOG,O,gDAGhB2P,MAAM,EAAD,IACLxS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,WAC9B1K,EAAOR,cAAcmL,MAAM,sC,yBAE3BxS,KAAKyO,YAAW,G,6MAIDzK,G,gFAGfhE,KAAK+S,gB,SACUlL,EAAOpB,SAAS3C,iBAAiBoe,mBAAmBle,G,OAC7C,M,OAAXuB,QACRsC,EAAOR,cAAcgL,QAAQ,iC,gDAGhCrS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,SAAShN,SACvCsC,EAAOR,cAAcmL,MAAM,qC,yBAE3BxS,KAAK8hB,mBACL9hB,KAAKiT,mB,iKAoEDC,GACPlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAMS,aAAciC,M,mCAGjDlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAOS,aAAc,O,sCAIlDjR,KAAKsI,SAAS,CAAE2I,aAAc,O,4CAU9BjR,KAAKsI,SAAS,CACX4M,uBAAuB,M,6CAI1BlV,KAAKsI,SAAS,CACX4M,uBAAuB,M,4CAqC1BlV,KAAKsI,SAAS,CACX6M,sBAAsB,M,wCAKzBnV,KAAKsI,SAAS,CACXwJ,mBAAmB,M,yCAItB9R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,iCAIdlD,GACR5O,KAAKsI,SAAS,CACXsF,UAAWgB,M,kCAWd5O,KAAKsI,SAAS,CACXlH,KAAM,GACNO,MAAO,GACPf,KAAM,GACN8C,KAAM,GACN9B,QAAS,GACT+B,KAAM,GACN6M,aAAa,EACbS,aAAc,O,wCAID,IAAD,OACf,GAAiC,cAA7BjR,KAAKoI,MAAMsJ,cACZ,OACG,kBAAC,GAAD,CACGP,OAAQnR,KAAK0X,mBACbtG,QAASpR,KAAKoI,MAAMgJ,QACpBC,MAAO,kBAAM,EAAK8Q,uBAClB7Q,SAAU,kBAAM,EAAK8B,mBACrB7B,UAAWvR,KAAKoI,MAAMmJ,UACtBjE,UAAW,kBAAM,EAAKwU,wB,+BAMxB,IAAD,SAYF9hB,KAAKoI,MAVNvF,EAFG,EAEHA,KACA+K,EAHG,EAGHA,UACAjM,EAJG,EAIHA,MACAP,EALG,EAKHA,KACAuC,EANG,EAMHA,KACA/B,EAPG,EAOHA,QACAhB,EARG,EAQHA,KACA8C,EATG,EASHA,KACA8M,EAVG,EAUHA,YACAnI,EAXG,EAWHA,SAGH,OACG,yBAAKrE,GAAG,iBACL,yBAAKkD,UAAU,QACZ,kBAAC,IAAD,yBAEH,kBAAC,IAAD,CACGiI,SAAUnP,KAAK6S,gBACfnB,cAAe1R,KAAKoI,MAAMsJ,cAC1BtI,OAAK,GAEL,kBAAC,IAAD,CACGpF,GAAG,YACHqP,MAAM,YACNC,MACG,kBAAC,IAAD,KACG,kBAAC,GAAD,CACGzQ,KAAMA,EACNyK,UAAW,kBAAM,EAAKwU,oBACtBlU,UAAWA,EACX4C,YAAaA,EACbsB,kBAAmB9R,KAAKoI,MAAM0J,kBAC9BC,YAAa/R,KAAK+R,YAClBoD,qBACGnV,KAAKoI,MAAM+M,qBAEdkM,qBAAsB,kBACnB,EAAK3J,sBAER4J,sBAAuB,kBACpB,EAAKpL,uBAERhB,sBACGlV,KAAKoI,MAAM8M,sBAEdqM,sBAAuB,kBACpB,EAAKY,uBAERX,uBAAwB,kBACrB,EAAKpL,wBAERhV,KAAMA,EACNO,MAAOA,EACPf,KAAMA,EACNqgB,aAAcrgB,EACd8C,KAAMA,EACNwd,aAAcxd,EACd9B,QAASA,EACTge,gBAAiBhe,EACjB+B,KAAMA,EACNwd,aAAcxd,EACdwL,SAAUnP,KAAKmP,SACfoB,aAAcvQ,KAAKuQ,aACnBkC,aAAczS,KAAKyS,aACnB/C,QAAS,kBAAM,EAAKgE,aACpB+N,aAAc,kBAAM,EAAK5Q,cACzB6Q,gBAAiB,kBACd,EAAKU,eAAe/Z,EAASnH,MAEhCygB,eAAgB,kBAAM,EAAK1O,oBAC3B2O,iBAAgB,oBAAevZ,EAASjH,MACxC4V,SAAS,qBAKrB,kBAAC,IAAKzD,SAAN,MACCvT,KAAKwT,wB,GA1UkB/K,aCFlB4Z,G,2MAClBja,MAAQ,CACLC,SAAU,GACV/E,QAAS,CACN,CAAEsJ,KAAM,IAAKD,QAAQ,GACrB,CAAEC,KAAM,QACR,CAAEA,KAAM,a,iFAKX,OAAO,+BAAQ5M,KAAKiN,qB,wCAEJ,IAAD,OAEf,OADiBjN,KAAKuI,MAAd1F,KACI4J,IAAI,SAAC9I,EAAMqK,GACpB,OACG,wBACGA,IAAKrK,EAAKzC,IACV2H,QAAS,SAAAmC,GAAC,OAAI,EAAKmD,gBAAgBnD,EAAGrH,IACtCuD,UAAS,UACN,EAAKkB,MAAMC,SAASnH,MAAQyC,EAAKzC,IAAM,cAAgB,KAG1D,kBAAC,GAAD,CAAW8M,IAAKA,EAAKD,MAAOC,EAAKrB,QAAM,IACvC,kBAAC,GAAD,CAAWoB,MAAOpK,EAAKvC,OACvB,kBAAC,GAAD,CAAW2M,MAAOpK,EAAKoB,QAAQ3D,Y,sCAM3B4J,EAAGrH,GAGhB,GAFAqH,EAAEC,iBACmBjL,KAAKoI,MAAlBC,SACKnH,MAAQyC,EAAKzC,IAKvB,OAJAlB,KAAKuI,MAAM6F,YAAYzK,GAAM,QAC7B3D,KAAKsI,SAAS,CACXD,SAAU1E,IAIhB3D,KAAKuI,MAAM6F,YAAY,IAAI,GAC3BpO,KAAKsI,SAAS,CAAED,SAAU,O,+BAI1B,OACG,kBAAC,GAAD,CACG/E,QAAStD,KAAKoI,MAAM9E,QACpB4J,KAAMlN,KAAKiN,kBACXD,SAAUhN,KAAKuI,MAAMyE,SACrBY,UAAW5N,KAAKuI,MAAMqF,UACtBN,UAAWtN,KAAKuI,MAAM+E,gB,GArDM7E,aA0DxC4Z,GAAWvV,aAAe,CACvBjK,KAAM,GACNyK,UAAW,c,ICrDOgV,G,iLACR,IAAD,EASFtiB,KAAKuI,MAPN4G,EAFG,EAEHA,SACAK,EAHG,EAGHA,SACAC,EAJG,EAIHA,cACAC,EALG,EAKHA,QACAtO,EANG,EAMHA,KACA2D,EAPG,EAOHA,QACA4K,EARG,EAQHA,gBAGH,OACG,6BACG,kBAACC,GAAA,EAAD,CAAM1I,UAAU,OAAOgI,IAAI,kBACxB,kBAAC,IAAD,CAAWzB,WAAS,GACjB,4BACG,4BACG,kBAAC,IAAD,CACGoC,MAAM,YACNC,SAAS,OACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,IAAD,CACGhM,GAAG,OACHmL,SAAUA,EACVE,YAAY,eACZ3L,KAAK,OACLqK,MAAO3M,EACP8H,MAAI,MAIb,4BACG,4BACG,kBAAC,IAAD,CACG2G,MAAM,UACNC,SAAS,UACTC,UAAU,gBAGhB,wBAAIC,QAAQ,KACT,kBAAC,GAAD,CACGhM,GAAG,UACHmL,SAAUA,EACVE,YAAY,kBACZtB,MAAOhJ,EACPsD,SAAUsH,EACVzG,MAAI,OAMhB,yBAAKhC,UAAU,cACZ,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAQO,KAAK,UAAUoB,QAAS6G,GAAhC,SAGA,kBAAC,IAAD,CAAQjI,KAAK,QAAQoB,QAAS2G,GAC1BC,W,GA9DahH,aAuEtC6Z,GAASxV,aAAe,CACrBmD,iBAAkB,O,IC/EAgF,G,iLAEf,OACG,yBAAKjR,GAAG,cACL,kBAAC,IAAD,CACGqH,OAAQrL,KAAKuI,MAAM8C,OACnB8E,QAASnQ,KAAKuI,MAAM6H,QACpBC,OAAQrQ,KAAKuI,MAAM+H,QAEnB,kBAAC,IAAD,KACG,yBAAKpJ,UAAU,aACZ,yBAAKlD,GAAIhE,KAAKuI,MAAMvE,IACjB,kBAAC,GAAD,CACG5C,KAAMpB,KAAKuI,MAAMnH,KACjB2D,QAAS/E,KAAKuI,MAAMpG,SACpBwN,gBAAiB3P,KAAKuI,MAAMoH,gBAC5BR,SAAUnP,KAAKuI,MAAM4G,SACrBK,SAAUxP,KAAKuI,MAAMgI,aACrBd,cAAezP,KAAKuI,MAAMkH,cAC1BC,QAAS1P,KAAKuI,MAAMmH,aAKhC,kBAAC,IAAD,CACGrE,OAAQrL,KAAKuI,MAAMiI,YACnBC,kBAAkB,aAClBC,UAAW1Q,KAAKuI,MAAMmH,QACtBiB,iBAAiB,SACjBC,SAAU5Q,KAAKuI,MAAMsI,WACrBrJ,OAAO,SACPC,KAAK,QACLqJ,WACG,kBAAC,IAAD,CACGC,UAAWpH,SAASqH,eAAe,iBAIzC,kBAAC,IAAD,KAAKhR,KAAKuI,MAAM0I,cAChB,yE,GAvCsBxI,aCInBlI,G,2MAClB6H,MAAQ,CACLqJ,YAAa,QACbC,cAAe,QACf9D,WAAW,EACX/K,KAAM,GACN8O,WAAW,EACXV,aAAc,GACdW,iBAAiB,EACjBC,kBAAkB,EAClBC,mBAAmB,EACnBV,SAAS,EACTG,WAAW,EACXnQ,KAAM,GACN2D,QAAS,GACTsD,SAAU,I,EAGb0J,YAAc,SAACC,EAAKC,GACjB,EAAK3J,SAAS,CACXD,SAAU2J,EACVZ,QAASa,EACTV,UAAWU,K,EA2CjB1B,a,sCAAe,WAAMvF,GAAN,uBAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEc,EAAK7C,MAAvBhH,EAFI,EAEJA,KAAM2D,EAFF,EAEEA,QACViI,EAAW,gBAHH,SAIKnF,EAAOpB,SAASZ,aAAa0c,cAC3CnhB,EACA2D,GANS,cAIRpB,EAJQ,yBASUkE,EAAOpB,SAASZ,aAAa2c,SAAS7e,GAThD,OAUa,MAVb,OAUE4B,SACRsC,EAAOR,cAAcgL,QAArB,eAAqCjR,EAArC,wBACA,EAAKkU,WAZC,kDAemB,MAAxB,KAAI/C,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B5L,EAA5B,SACRyG,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GAvBN,wD,wDA0BfyF,a,sCAAe,WAAMzH,GAAN,2BAAAkH,EAAA,4DACZlH,EAAEC,iBADU,EAEwB,EAAK7C,MAAjChH,EAFI,EAEJA,KAAM2D,EAFF,EAEEA,QAASsD,EAFX,EAEWA,SAEnB2E,EAAW,gBAJH,kBAMQnF,EAAOpB,SAASZ,aAAa0c,cAC3CnhB,EACA2D,GARM,cAMLpB,EANK,QAUJA,KAAKzC,IAAMmH,EAASnH,IAVhB,UAWU2G,EAAOpB,SAASZ,aAAa4c,WAAW9e,GAXlD,QAYa,OADlBjB,EAXK,QAYE6C,SACRsC,EAAOR,cAAcgL,QAArB,eAAqCjR,EAArC,wBACA,EAAKkU,UACLxN,QAAQC,IAAIrF,EAAOG,KAAKe,WAflB,kDAkBmB,MAAxB,KAAI2O,SAAShN,SACdyH,EAAQ,iBAAa,KAAIuF,SAAS1P,KAAKyE,SACvCO,EAAOR,cAAcmL,MAAMxF,IAEF,MAAxB,KAAIuF,SAAShN,SACdyH,EAAQ,gCAA4B5L,EAA5B,SACRyG,EAAOR,cAAcnE,MAAM8J,IAE9B,EAAK2E,UAAU3E,GA1BN,wD,wDAwCfmC,SAAW,SAAAnE,GACR,IAAM5C,EAAQ,EAAKA,MACnBA,EAAM4C,EAAElG,OAAOd,IAAMgH,EAAElG,OAAOiJ,MAC9B,EAAKzF,SAASF,I,EAcjBuK,e,sCAAiB,WAAM3H,GAAN,mBAAAkH,EAAA,4DACdlH,EAAEC,iBACM5C,EAAa,EAAKD,MAAlBC,SAFM,kBAIQR,EAAOpB,SAASZ,aAAa6c,YAC7Cra,EAASnH,KALD,OAOW,OAHlBwB,EAJO,QAOA6C,SACJ5B,EAAOjB,EAAOG,KAClBiF,QAAQC,IAAIpE,GACZ,EAAK2E,SAAS,CACXuJ,kBAAkB,EAClBzQ,KAAMuC,EAAKvC,KACX2D,QAASpB,EAAKoB,QAAQ7D,OAbjB,gDAiBX4G,QAAQC,IAAR,MACA,EAAKO,SAAS,CACXuJ,kBAAkB,EAClBzQ,KAAMiH,EAASjH,KACf2D,QAASsD,EAAStD,QAAQ7D,MArBlB,uD,wDAgDjB2R,gBAAkB,SAAApB,GACf,EAAKnJ,SAAS,CACXmJ,YAAaA,EACbC,cAAeD,K,mFA5KlBzR,KAAKsV,Y,qJAILtV,KAAKyO,YAAW,G,kBAIE5G,EAAOpB,SAASZ,aAAakb,W,OAA5Cre,E,OACA1C,KAAKsI,SAAS,CACXzF,KAAMH,EAAOG,O,gDAGhB2P,MAAM,EAAD,IACLxS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,WAC9B1K,EAAOR,cAAcmL,MAAM,kC,yBAE3BxS,KAAKyO,YAAW,G,yMAILzK,G,gFAGXhE,KAAK+S,gB,SACUlL,EAAOpB,SAASZ,aAAa8c,eAAe3e,G,OACrC,M,OAAXuB,QACRsC,EAAOR,cAAcgL,QAAQ,6B,gDAGhCrS,KAAKsI,SAAS,CAAE0E,SAAU,KAAIuF,SAAShN,SACvCsC,EAAOR,cAAcmL,MAAM,6B,yBAE3BxS,KAAKsV,UACLtV,KAAKiT,mB,iKA2DDC,GACPlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAMS,aAAciC,M,mCAGjDlT,KAAKsI,SAAS,CAAEkI,aAAa,EAAOS,aAAc,O,sCAIlDjR,KAAKsI,SAAS,CAAE2I,aAAc,O,mCAU9BjR,KAAKsI,SAAS,CACXsJ,iBAAiB,M,oCAIpB5R,KAAKsI,SAAS,CACXsJ,iBAAiB,M,wCA8BpB5R,KAAKsI,SAAS,CACXuJ,kBAAkB,M,wCAKrB7R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,yCAItB9R,KAAKsI,SAAS,CACXwJ,mBAAmB,M,iCAIdlD,GACR5O,KAAKsI,SAAS,CACXsF,UAAWgB,M,kCAWd5O,KAAKsI,SAAS,CACXlH,KAAM,GACN2D,QAAS,GACTyL,aAAa,EACbS,aAAc,O,wCAID,IAAD,OACf,GAAiC,UAA7BjR,KAAKoI,MAAMsJ,cACZ,OACG,kBAAC,GAAD,CACGP,OAAQnR,KAAK2S,eACbvB,QAASpR,KAAKoI,MAAMgJ,QACpBC,MAAO,kBAAM,EAAK8B,cAClB7B,SAAU,kBAAM,EAAK8B,mBACrB7B,UAAWvR,KAAKoI,MAAMmJ,UACtBjE,UAAW,kBAAM,EAAKgI,e,+BAMxB,IAAD,SAQFtV,KAAKoI,MANNvF,EAFG,EAEHA,KACA+K,EAHG,EAGHA,UACAxM,EAJG,EAIHA,KACA2D,EALG,EAKHA,QACAyL,EANG,EAMHA,YACAnI,EAPG,EAOHA,SAGH,OACG,yBAAKrE,GAAG,cACL,yBAAKkD,UAAU,QACZ,kBAAC,IAAD,qBAEH,kBAAC,IAAD,CACGiI,SAAUnP,KAAK6S,gBACfnB,cAAe1R,KAAKoI,MAAMsJ,cAC1BtI,OAAK,GAEL,kBAAC,IAAD,CACGpF,GAAG,QACHqP,MAAM,QACNC,MACG,kBAAC,IAAD,KACG,kBAAC,GAAD,CACGzQ,KAAMA,EACNyK,UAAW,kBAAM,EAAKgI,WACtB1H,UAAWA,EACXQ,YAAapO,KAAK+R,cAErB,kBAAC,GAAD,CACG1G,OAAQrL,KAAKoI,MAAMyJ,iBACnBvB,OAAQ,kBAAM,EAAKqC,kBACnBvC,QAAS,kBAAM,EAAKqD,mBACpBrS,KAAMA,EACN2D,QAASA,EACT4K,gBAAiB5K,EACjBoK,SAAUnP,KAAKmP,SACfoB,aAAcvQ,KAAKyS,aACnBhD,cAAc,SACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAMwJ,gBACnBtB,OAAQ,kBAAM,EAAK6C,cACnB/C,QAAS,kBAAM,EAAKuD,eACpBvS,KAAMA,EACN2D,QAASA,EACToK,SAAUnP,KAAKmP,SACfoB,aAAcvQ,KAAKuQ,aACnBd,cAAc,MACdC,QAAS,kBAAM,EAAKgE,aACpBlD,YAAaA,EACbK,WAAY,kBAAM,EAAKA,gBAE1B,kBAAC,GAAD,CACGxF,OAAQrL,KAAKoI,MAAM0J,kBACnBpB,UAAW,kBAAM,EAAKiQ,WAAWtY,EAASnH,MAC1C0P,SAAU,kBAAM,EAAKqC,oBACrB+D,SAAS,aACTrP,KAAI,gBAAWU,EAASjH,WAKpC,kBAAC,IAAKmS,SAAN,MACCvT,KAAKwT,wB,GAvSc/K,aCJdma,G,YAClB,WAAYra,GAAQ,IAAD,8BAChB,4CAAMA,KAOTsa,aAAe,SAAA7X,GACZA,EAAEC,iBACF,EAAK3C,SAAS,CACX8C,QAAQ,KATX,EAAKhD,MAAQ,CACVgD,QAAQ,GAGX,EAAKyX,aAAe,EAAKA,aAAatX,KAAlB,iBANJ,E,sEAgBhB,IAAM8H,EAAQ,kBAAC,IAAD,uBACRgL,EACH,oCACG,kBAAC,IAAD,8CACA,kBAAC,IAAD,mBACA,6BAEA,kBAAC,IAAD,CACG5W,KAAK,OACL0B,SAAO,EACPD,MAAI,EACJL,QAAS7I,KAAK6iB,gBAKvB,OAAI7iB,KAAKoI,MAAMgD,OACL,kBAAC,IAAD,CAAUxC,GAAG,UAIpB,kBAAC,IAAD,CACGnB,KAAK,QACL4L,MAAOA,EACPgL,YAAaA,EACbyE,OAAO,S,GA1CmBra,a,UCOhCvG,I,OAAc2F,EAAOpB,SAASvE,aAEf6gB,G,2MAClB3a,MAAQ,CACLkB,MAAOD,GAAUQ,WACjBmZ,cAAc,EACdpV,WAAW,EACXqV,eAAe,EACf3b,QAAS,GACT3F,MAAO,GACPS,SAAU,I,EAcboN,S,sCAAW,WAAMxE,GAAN,qBAAAkH,EAAA,4DACRlH,EAAEC,iBACF,EAAKwD,YAAW,GAFR,EAGoB,EAAKrG,MAAzBzG,EAHA,EAGAA,MAAOS,EAHP,EAGOA,SAHP,kBAMcF,GAAY8F,MAAMrG,EAAOS,GANvC,OAMDM,EANC,OAOLoF,QAAQC,IAAIrF,GACRA,IACD,EAAK4F,SAAS,CACXhB,QAAS,KACT2b,eAAe,IAEI,MAAlBvgB,EAAO6C,QACR,EAAK+C,SAAS,CACXhB,QAAS,wBAfb,kDAoBL,EAAKgB,SAAS,CACXhB,QAAS,iBArBP,yBAwBL,EAAKmH,YAAW,GAxBX,2E,wDAgCXU,SAAW,SAAAnE,GACR,IAAM5C,EAAQ,EAAKA,MACnBA,EAAM4C,EAAElG,OAAO1D,MAAQ4J,EAAElG,OAAOiJ,MAChC,EAAKzF,SAASF,GACd,EAAK8a,gB,mFA9CLljB,KAAKmjB,e,mCAGDtb,EAAOI,mBACRjI,KAAKsI,SAAS,CACX2a,eAAe,M,iCAiCbrU,GACR5O,KAAKsI,SAAS,CAAEsG,QAASA,M,qCAWzB5O,KAAKsI,SAAS,CAAEhB,QAAS,O,+BAGlB,IAAD,SACqDtH,KAAKoI,MAAxD6a,EADF,EACEA,cAAethB,EADjB,EACiBA,MAAOS,EADxB,EACwBA,SAAUkF,EADlC,EACkCA,QAASgC,EAD3C,EAC2CA,MAEjD,OAAI2Z,EACM,kBAAC,IAAD,CAAUra,GAAG,UAIpB,kBAAC,GAAD,CAAeqD,UAAQ,EAACN,gBAAgB,GACrC,kBAACoP,GAAA,EAAD,KACG,kBAACC,GAAA,EAAD,CACGC,GAAI,CAAEpM,KAAM,EAAGuU,OAAQ,GACvBlI,GAAI,CAAErM,KAAM,EAAGuU,OAAQ,GACvBjI,GAAI,CAAEtM,KAAM,EAAGuU,OAAQ,GACvBhI,GAAG,KACHC,GAAG,KACHnU,UAAU,QAEV,yBACGA,UAAS,UAAKoC,EAAL,qCACNhC,EAAU,QAAU,KAGvB,kBAAC,IAAD,CAAM2R,MAAO3P,EAAOpC,UAAU,uBAC3B,kBAAC,KAAD,CAAUA,UAAU,IACjB,0BAAMA,UAAU,gCAChB,wBAAIA,UAAU,eAAd,WACA,6BACA,kBAAC0I,GAAA,EAAD,KACG,yBAAK1I,UAAU,QACZ,kBAAC,IAAD,CACGyP,SAAS,OACTzP,UAAU,cACVM,OAAQF,EAAU,SAAW,GAC7B6H,SAAU,SAAAnE,GACP,EAAK1C,SAAS,CACX3G,MAAOqJ,EAAElG,OAAOiJ,QAEnB,EAAKmV,gBAER7T,YAAY,cACZ3L,KAAK,QACLqK,MAAOpM,KAGb,yBAAKuF,UAAU,QACZ,kBAAC,IAAD,CACGyP,SAAS,OACTzP,UAAU,cACVM,OAAQF,EAAU,SAAW,GAC7B6H,SAAU,SAAAnE,GACP,EAAK1C,SAAS,CACXlG,SAAU4I,EAAElG,OAAOiJ,QAEtB,EAAKmV,gBAER7T,YAAY,cACZ3L,KAAK,WACLqK,MAAO3L,KAGb,yBAAK8E,UAAWkG,KAAQiW,aACrB,kBAAC,IAAD,CACG3f,KAAK,SACLmL,KAAK,KACL3F,MAAI,EACJC,SAAO,EACPyD,KAAK,QACLmC,UAAU,QACVuU,UAAU,cACVza,QAAS7I,KAAKwP,uB,GAvIf/G,aCRd8a,G,2MAClBnb,MAAQ,CACLob,WAAY,GACZC,kBAAmB,I,wPAOA5b,EAAO6b,yB,OAAtBhhB,E,OAEJ1C,KAAKsI,SAAS,CACXkb,WAAY9gB,I,mIAKf,OACG,6BACG,yBAAKwE,UAAU,QACZ,kBAAC,IAAD,+BAGH,yBAAKA,UAAU,mBACZ,kBAAC6T,GAAA,EAAD,KACG,kBAACC,GAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAInU,UAAU,QACpD,kBAAC,IAAD,KACG,yBAAKA,UAAU,mBACZ,yBAAKA,UAAU,2BAAf,iBAIH,yBAAKA,UAAU,aACZ,4EACA,6BACA,wBAAIA,UAAWkG,KAAQC,YAAvB,0BAGA,6BACA,wBAAInG,UAAWkG,KAAQC,YAAvB,sC,GAxCO5E,aCab5B,G,iLAEf,OACG,kBAAC,IAAD,KACG,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAO8c,OAAK,EAACC,KAAK,IAAIxX,UAAW2W,KACjC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,UAAUxX,UAAW2W,KACvC,kBAAC5W,GAAD,CAAcwX,OAAK,EAACC,KAAK,QAAQC,MAAI,EAACzX,UAAWmX,KACjD,kBAACpX,GAAD,CAAcwX,OAAK,EAACC,KAAK,eAAexX,UAAW0X,KACnD,kBAAC3X,GAAD,CAAcwX,OAAK,EAACC,KAAK,aAAaxX,UAAW/L,KACjD,kBAAC8L,GAAD,CAAcwX,OAAK,EAACC,KAAK,SAASxX,UAAW5L,KAC7C,kBAAC2L,GAAD,CAAcwX,OAAK,EAACC,KAAK,cAAcxX,UAAWtP,KAClD,kBAACqP,GAAD,CAAcwX,OAAK,EAACC,KAAK,UAAUxX,UAAW7L,KAC9C,kBAAC4L,GAAD,CAAcwX,OAAK,EAACC,KAAK,YAAYxX,UAAWnN,KAChD,kBAACkN,GAAD,CAAcwX,OAAK,EAACC,KAAK,aAAaxX,UAAWG,KACjD,kBAACJ,GAAD,CAAcwX,OAAK,EAACC,KAAK,eAAexX,UAAW6K,KAEnD,kBAAC,IAAD,CAAO8M,KAAK,IAAInb,GAAG,IAAIwD,UAAWwW,W,GAjBbna,a,0BCWfub,I,yOAKf,OAHAra,SAASC,KAAK1C,UACc,SAAzBmC,GAAUQ,WAAwB,WAAa,WAClDoa,KAAkBC,sBAEf,yBAAKhd,UAAU,OACZ,kBAAC,GAAD,W,GAPqBuB,cCjBb0b,QACW,cAA7BrhB,OAAOC,SAASqhB,UAEe,UAA7BthB,OAAOC,SAASqhB,UAEhBthB,OAAOC,SAASqhB,SAASC,MACvB,2DCZNC,IAAShY,OAAO,kBAAC,GAAD,MAAS3C,SAASqH,eAAe,SD2H3C,kBAAmBuT,WACrBA,UAAUC,cAAcC,MAAMhiB,KAAK,SAAAiiB,GACjCA,EAAaC,iB","file":"static/js/main.a36b1233.chunk.js","sourcesContent":["const Projects = [\r\n   {\r\n      Project_Name: 'A',\r\n      Result: 0.6,\r\n      Target: 0.78\r\n   },\r\n   {\r\n      Project_Name: 'B',\r\n      Result: 1.1,\r\n      Target: 1.43\r\n   },\r\n   {\r\n      Project_Name: 'C',\r\n      Result: 0.27,\r\n      Target: 0.33\r\n   },\r\n   {\r\n      Project_Name: 'D',\r\n      Result: 1.12,\r\n      Target: 1.33\r\n   },\r\n   {\r\n      Project_Name: 'E',\r\n      Result: 0.57,\r\n      Target: 0.66\r\n   },\r\n   {\r\n      Project_Name: 'F',\r\n      Result: 0.54,\r\n      Target: 0.66\r\n   },\r\n   {\r\n      Project_Name: 'G',\r\n      Result: 1.31,\r\n      Target: 1.49\r\n   }\r\n];\r\n\r\nmodule.exports = Projects;\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/users'\r\n\r\nexport default class Auth {\r\n   static LOGIN = MAIN_PATH + '/login'\r\n}","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/employees';\r\n\r\nexport default class Employees {\r\n   static GET_EMPLOYEES = MAIN_PATH + '/';\r\n   static GET_EMPLOYEE_BY_ID = MAIN_PATH + '/id/';\r\n   static GET_EMPLOYEE_BY_NAME = MAIN_PATH + '/name/';\r\n   static GET_EMPLOYEE_BY_TYPE = MAIN_PATH + '/type/';\r\n   static GET_EMPLOYEE_BY_USER_ID = MAIN_PATH + '/user/';\r\n   static CREATE_EMPLOYEE = MAIN_PATH + '/';\r\n   static UPDATE_EMPLOYEE = MAIN_PATH + '/';\r\n   static DELETE_EMPLOYEE_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/employeesTypes';\r\n\r\nexport default class Employees_TYPES {\r\n   static GET_EMPLOYEES_TYPES = MAIN_PATH + '/';\r\n   static GET_EMPLOYEES_TYPE_BY_ID = MAIN_PATH + '/id/';\r\n   static CREATE_EMPLOYEES_TYPE = MAIN_PATH + '/';\r\n   static DELETE_EMPLOYEES_TYPE_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/projects';\r\n\r\nexport default class PROJECTS {\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_PROJECTS = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_PROJECT_BY_NAME = MAIN_PATH + '/name/';\r\n\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_PROJECT_BY_ID = MAIN_PATH + '/id/';\r\n\r\n   /**\r\n    * @description HTTP POST\r\n    */\r\n   static CREATE_NEW_PROEJCT = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP PUT\r\n    */\r\n   static UPDATE_PROJECT = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP DELETE => +PROJECT.ID\r\n    */\r\n   static DELETE_PROJECT_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/teams';\r\n\r\nexport default class teamS {\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_TEAMS = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_TEAM_BY_NAME = MAIN_PATH + '/name/';\r\n\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_TEAM_BY_ID = MAIN_PATH + '/id/';\r\n\r\n   /**\r\n    * @description HTTP POST\r\n    */\r\n   static CREATE_NEW_TEAM = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP PUT\r\n    */\r\n   static UPDATE_TEAM = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP DELETE => +team.ID\r\n    */\r\n   static DELETE_TEAM_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/kpi';\r\n\r\nexport default class KPI {\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_KPIS = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP GET\r\n    */\r\n   static GET_KPI_BY_ID = MAIN_PATH + '/id/';\r\n   static GET_KPI_BY_PROJECT_ID = MAIN_PATH + '/project/';\r\n\r\n   /**\r\n    * @description HTTP POST\r\n    */\r\n   static CREATE_NEW_KPI = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP PUT\r\n    */\r\n   static UPDATE_KPI = MAIN_PATH + '/';\r\n\r\n   /**\r\n    * @description HTTP DELETE => +KPI.ID\r\n    */\r\n   static DELETE_KPI_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/reports';\r\n\r\nexport default class Reports {\r\n   static GET_REPORTS = MAIN_PATH + '/';\r\n   static GET_REPORT_BY_ID = MAIN_PATH + '/id/';\r\n   static GET_REPORT_BY_KPI_ID = MAIN_PATH + '/kpi/';\r\n   static GET_REPORT_BY_PROJECT_ID = MAIN_PATH + '/project/';\r\n   static CREATE_REPORT = MAIN_PATH + '/';\r\n   static UPDATE_REPORT = MAIN_PATH + '/';\r\n   static DELETE_REPORT_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/users';\r\n\r\nexport default class Users {\r\n   static UPDATE_USER = MAIN_PATH + '/';\r\n   static CREATE_NEW_USER = MAIN_PATH + '/create/';\r\n   static DELETE_USER = MAIN_PATH + '/';\r\n   static LOGIN = MAIN_PATH + '/login/';\r\n   static GET_CURRENT_USER = MAIN_PATH + '/current/';\r\n   static GET_ALL_USERS = MAIN_PATH + '/';\r\n}\r\n","import Auth from './Auth/Auth';\r\nimport Employees from './Employees/Employees';\r\nimport EmployeesTypes from './Employees_Types/Employees_Types';\r\nimport Projects from './Projects/Projects';\r\nimport Teams from './Teams/Teams';\r\nimport KPIs from './KPIs/KPIs';\r\nimport Reports from './Reports/Reports';\r\nimport Users from './Users/Users';\r\n\r\nexport default class ROUTES {\r\n   constructor() {\r\n      return this;\r\n   }\r\n\r\n   static AUTH = Auth;\r\n   static EMPLOYEES = Employees;\r\n   static EMPLOYEES_TYPES = EmployeesTypes;\r\n   static PROJECTS = Projects;\r\n   static TEAMS = Teams;\r\n   static KPI = KPIs;\r\n   static REPORTS = Reports;\r\n   static USERS = Users;\r\n}\r\n","class User {\r\n   /**\r\n    * @returns {Object} User\r\n    */\r\n   static getUser() {\r\n      var user = localStorage.getItem('user') || null;\r\n      if (!user) {\r\n         return null;\r\n      }\r\n      user = JSON.parse(user);\r\n      return user;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Object.Id\r\n    */\r\n   static getUserId() {\r\n      return this.getUser()._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} Username\r\n    */\r\n   static getName() {\r\n      return this.getUser().employeeInfo.name;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} UserType ['user','team leader','service manager','operations manager','general manager','admin','root']\r\n    */\r\n   static getUserType() {\r\n      return this.getUser().usertype;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} UserType ['user','team leader','service manager','operations manager','general manager','admin','root']\r\n    *          AS Object.Id\r\n    */\r\n   static getUserTypeId() {\r\n      return this.getUser().userType._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User JWT token\r\n    */\r\n   static getUserJWTToken() {\r\n      if (this.getUser() != null) {\r\n         return this.getUser().token;\r\n      }\r\n      return '';\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User SAP ID Number\r\n    */\r\n   static getSAP() {\r\n      return this.getUser().employeeInfo.sap;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Role\r\n    */\r\n   static getRole() {\r\n      return this.getUserType();\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Role Object.Id\r\n    */\r\n   static getRoleId() {\r\n      return this.getUser().employeeInfo.role._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Email address\r\n    */\r\n   static getEmployeeEmail() {\r\n      return this.getUser().employeeInfo.email;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Email address\r\n    */\r\n   static getUserEmail() {\r\n      return this.getUser().email;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Project Name\r\n    */\r\n   static getProject() {\r\n      return this.getUser().employeeInfo.project.name;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Project Object.id\r\n    */\r\n   static getProjectID() {\r\n      return this.getUser().employeeInfo.project._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee RM name\r\n    */\r\n   static getRMName() {\r\n      return this.getUser().employeeInfo.rm.name;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee RM Object.Id\r\n    */\r\n   static getRMId() {\r\n      return this.getUser().employeeInfo.rm._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee RM email address\r\n    */\r\n   static getRMemail() {\r\n      return this.getUser().employeeInfo.rm.email;\r\n   }\r\n}\r\n\r\nexport default User;\r\n","import User from '../User/User';\r\n\r\nclass Auth {\r\n   /**\r\n    * Authenticate a user. Save a token string in Local Storage\r\n    *\r\n    * @param {object} user\r\n    */\r\n   static authenticateUser(user) {\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      return this.isUserAuthenticated();\r\n   }\r\n\r\n   /**\r\n    * Check if a user is authenticated - check if a token is saved in Local Storage\r\n    * @async\r\n    * @returns {boolean}\r\n    */\r\n   static isUserAuthenticated() {\r\n      return localStorage.getItem('user') !== null;\r\n   }\r\n\r\n   /**\r\n    * Deauthenticate a user. Remove a token from Local Storage.\r\n    * @return {boolean}\r\n    */\r\n   static deauthenticateUser() {\r\n      localStorage.removeItem('user');\r\n      return localStorage.getItem('user') === null;\r\n   }\r\n\r\n   /**\r\n    * Get a token value.\r\n    *\r\n    * @returns {string}\r\n    */\r\n   static getToken(whoCall = '') {\r\n      var user = localStorage.getItem('user') || null;\r\n      if (!user) {\r\n         return null;\r\n      }\r\n      user = JSON.parse(user);\r\n      return user.token;\r\n   }\r\n\r\n   /**\r\n    *  @returns {Boolean} Authorized : ['root','admin','ops manager', 'general manager']\r\n    */\r\n   static isAuthorizedToRemove() {\r\n      var userType = User.getUserType();\r\n\r\n      if (\r\n         userType === 'root' ||\r\n         userType === 'admin' ||\r\n         userType === 'operations manager' ||\r\n         userType === 'general manager'\r\n      ) {\r\n         return true;\r\n      }\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * @returns {Boolean} Admin or Root : ['root','admin']\r\n    */\r\n   static isAdminOrRoot() {\r\n      var userType = User.getUserType();\r\n\r\n      if (userType === 'root' || userType === 'admin') {\r\n         return true;\r\n      }\r\n      return false;\r\n   }\r\n}\r\nexport default Auth;\r\n","import axios from 'axios';\r\nimport API from '../../API';\r\nimport Auth from '../../Auth/Auth';\r\n\r\nexport default class AuthService {\r\n   static getLoginItem(username, password) {\r\n      return {\r\n         user: {\r\n            email: username,\r\n            password: password\r\n         }\r\n      };\r\n   }\r\n\r\n   static async login(username, password) {\r\n      return await axios\r\n         .post(API.ROUTES.AUTH.LOGIN, this.getLoginItem(username, password))\r\n         .then(result => {\r\n            let authorized = Auth.authenticateUser(result.data.user);\r\n            //============================\r\n            //reload local storage HOTFIX\r\n            if (authorized) {\r\n               window.location.reload()\r\n            }\r\n            //============================\r\n            return authorized;\r\n         })\r\n         .catch(error => {\r\n            throw error;\r\n         });\r\n   }\r\n\r\n   static isAuthenticated() {\r\n      return Auth.isUserAuthenticated();\r\n   }\r\n\r\n   static async logout() {\r\n      return await Auth.deauthenticateUser();\r\n   }\r\n}\r\n","import axios from 'axios';\r\nimport Auth from '../Auth/Auth';\r\n\r\n/**\r\n * @returns {Object} axios custom instance with Authorization JWT token header\r\n * @description Requests are modified with Authorization header (JWT)\r\n */\r\nvar Request = axios.create({\r\n   headers: {\r\n      Authorization: 'Token ' + Auth.getToken()\r\n   }\r\n});\r\n\r\nexport default Request;\r\n//JSON.parse(localStorage.getItem('user')).token\r\n//axios.defaults.headers.common['Authorization'] = 'Token ' + Auth.getToken();\r\n","export default class Employee {\r\n   constructor(name, email, user, type, project, team) {\r\n      this.name = name;\r\n      this.email = email;\r\n      this.user = user === '' ? null : user;\r\n      this.type = type;\r\n      this.project = project;\r\n      this.team = team;\r\n   }\r\n\r\n   getEmployeeDTO() {\r\n      return {\r\n         employee: {\r\n            name: this.name,\r\n            email: this.email,\r\n            user: this.user,\r\n            type: this.type,\r\n            project: this.project,\r\n            team: this.team\r\n         }\r\n      };\r\n   }\r\n\r\n   getCollapsedEmployeeDTO(emp) {\r\n      return {\r\n         employee: {\r\n            _id: emp._id,\r\n            email: emp.email,\r\n            user: emp.user._id,\r\n            type: emp.type._id,\r\n            project: emp.project._id,\r\n            team: emp.team._id\r\n         }\r\n      };\r\n   }\r\n}\r\n","import API from '../../API';\r\nimport Request from '../../Requests/Request';\r\nimport Employee from './DTO/Employee';\r\n\r\nexport default class EmployeesService {\r\n   static async createEmployeeDTO(name, email, user, type, project, team) {\r\n      return new Employee(\r\n         name,\r\n         email,\r\n         user,\r\n         type,\r\n         project,\r\n         team\r\n      ).getEmployeeDTO();\r\n   }\r\n\r\n   static async getEmployeeUpdateDTO(\r\n      id,\r\n      name,\r\n      email,\r\n      user,\r\n      type,\r\n      project,\r\n      team\r\n   ) {\r\n      var emp = await this.createEmployeeDTO(\r\n         name,\r\n         email,\r\n         user,\r\n         type,\r\n         project,\r\n         team\r\n      );\r\n      emp.employee._id = id;\r\n      return emp;\r\n   }\r\n\r\n   static async getEmployees() {\r\n      return await Request.get(API.ROUTES.EMPLOYEES.GET_EMPLOYEES)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n   static async getEmployeeById(id) {\r\n      return await Request.get(API.ROUTES.EMPLOYEES.GET_EMPLOYEE_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async getEmployeeByName(name) {\r\n      return await Request.get(API.ROUTES.EMPLOYEES.GET_EMPLOYEE_BY_NAME + name)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async getEmployeeByUserID(id) {\r\n      return await Request.get(\r\n         API.ROUTES.EMPLOYEES.GET_EMPLOYEE_BY_USER_ID + id\r\n      )\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async saveEmployee(employee) {\r\n      return await Request.post(API.ROUTES.EMPLOYEES.CREATE_EMPLOYEE, employee)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async updateEmployee(employee) {\r\n      return await Request.put(API.ROUTES.EMPLOYEES.UPDATE_EMPLOYEE, employee)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async deleteEmployeeById(id) {\r\n      return await Request.delete(\r\n         API.ROUTES.EMPLOYEES.DELETE_EMPLOYEE_BY_ID + id\r\n      )\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n}\r\n","export default class EmployeeType {\r\n   constructor(type) {\r\n      this.type = type;\r\n   }\r\n   getEmployeeDTO() {\r\n      return {\r\n         type: {\r\n            type: this.type\r\n         }\r\n      };\r\n   }\r\n}\r\n","import API from '../../API';\r\nimport Request from '../../Requests/Request';\r\nimport EmployeeTypeDTO from './DTO/EmployeeType';\r\n\r\nexport default class EmployeesTypesService {\r\n   static createEmployeeTypeDTO(type) {\r\n      return new EmployeeTypeDTO(type).getEmployeeDTO();\r\n   }\r\n   static async createEmployeeType(Type) {\r\n      return Request.post(\r\n         API.ROUTES.EMPLOYEES_TYPES.CREATE_EMPLOYEES_TYPE,\r\n         Type\r\n      )\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n   static async getEmployeeTypes() {\r\n      return Request.get(API.ROUTES.EMPLOYEES_TYPES.GET_EMPLOYEES_TYPES)\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n   static async getEmployeeTypeByID(id) {\r\n      return Request.get(API.ROUTES.EMPLOYEES_TYPES.getEmployeeTypeByID + id)\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n   static async deleteEmployeeTypeByID(id) {\r\n      return Request.delete(\r\n         API.ROUTES.EMPLOYEES_TYPES.DELETE_EMPLOYEES_TYPE_BY_ID + id\r\n      )\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n}\r\n","export default class KPI {\r\n   constructor(name, time_from, time_to, target, project, manager) {\r\n      this.name = name;\r\n      this.time_from = time_from;\r\n      this.time_to = time_to;\r\n      this.target = target;\r\n      this.project = project;\r\n      this.manager = manager;\r\n   }\r\n\r\n   getKPIDTO() {\r\n      return {\r\n         kpi: {\r\n            name: this.name,\r\n            time_from: this.time_from,\r\n            time_to: this.time_to,\r\n            target: this.target,\r\n            project: this.project,\r\n            manager: this.manager\r\n         }\r\n      };\r\n   }\r\n}\r\n","import API from '../../API';\r\nimport Request from '../../Requests/Request';\r\nimport KPIDTO from './DTO/KPIDTO';\r\n\r\nexport default class KPIService {\r\n   static async createKPIDTO(\r\n      name,\r\n      time_from,\r\n      time_to,\r\n      target,\r\n      project,\r\n      manager\r\n   ) {\r\n      return new KPIDTO(\r\n         name,\r\n         time_from,\r\n         time_to,\r\n         target,\r\n         project,\r\n         manager\r\n      ).getKPIDTO();\r\n   }\r\n\r\n   static async getKPIs() {\r\n      return await Request.get(API.ROUTES.KPI.GET_KPIS)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n   static async getKPIById(id) {\r\n      return await Request.get(API.ROUTES.KPI.GET_KPI_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async getKPIByProjectId(id) {\r\n      return await Request.get(API.ROUTES.KPI.GET_KPI_BY_PROJECT_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async saveKPI(KPI) {\r\n      return await Request.post(API.ROUTES.KPI.CREATE_NEW_KPI, KPI)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async updateKPI(KPI) {\r\n      return await Request.put(API.ROUTES.KPI.UPDATE_KPI, KPI)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async deleteKPIById(id) {\r\n      return await Request.delete(API.ROUTES.KPI.DELETE_KPI_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n}\r\n","export default class Report {\r\n   constructor(kpi, reportedBy, result, completed, status, reportedAt) {\r\n      this.kpi = kpi;\r\n      this.reportedBy = reportedBy;\r\n      this.result = result;\r\n      this.completed = completed;\r\n      this.status = status;\r\n      this.reportedAt = reportedAt;\r\n   }\r\n   /**\r\n    * @public\r\n    * @returns {Report} DTO\r\n    */\r\n   getReportDTO() {\r\n      return {\r\n         Report: {\r\n            kpi: this.kpi,\r\n            reportedBy: this.reportedBy,\r\n            result: this.result,\r\n            completed: this.completed,\r\n            status: this.status,\r\n            reportedAt: this.reportedAt\r\n         }\r\n      };\r\n   }\r\n}\r\n","import API from '../../API';\r\nimport Request from '../../Requests/Request';\r\nimport Report from './DTO/Report';\r\n\r\n/**\r\n * @author Rafal Cymbalsita\r\n * @class ReportsService\r\n * @description ReportsService : HTTP communication layer\r\n * @static\r\n */\r\nexport default class ReportsService {\r\n   /**\r\n    * @public\r\n    * @param {String} Name\r\n    * @param {ObjectID} Manager\r\n    *\r\n    */\r\n   static createReportDTO(\r\n      kpi,\r\n      reportedBy,\r\n      result,\r\n      completed,\r\n      status,\r\n      reportedAt\r\n   ) {\r\n      return new Report(\r\n         kpi,\r\n         reportedBy,\r\n         result,\r\n         completed,\r\n         status,\r\n         reportedAt\r\n      ).getReportDTO();\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {Report} Report\r\n    * @returns - HTTP Response\r\n    */\r\n   static async saveReport(Report) {\r\n      return await Request.post(API.ROUTES.REPORTS.CREATE_REPORT, Report)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {Report} Report\r\n    * @returns - HTTP Response\r\n    */\r\n   static async updateReport(Report) {\r\n      return await Request.put(API.ROUTES.REPORTS.UPDATE_REPORT, Report)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {id} Report._id\r\n    * @returns - HTTP Response\r\n    */\r\n   static async deleteReportByID(id) {\r\n      return await Request.delete(API.ROUTES.REPORTS.DELETE_REPORT_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @returns - HTTP Response\r\n    * @throws - HTTP Axios Error\r\n    */\r\n   static async getReports() {\r\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORTS)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {id} Report._id\r\n    * @returns - HTTP Response\r\n    */\r\n   static async getReportById(id) {\r\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async getReportByKPIID(kpiID) {\r\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_KPI_ID + kpiID)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   static async getReportByProjectID(id) {\r\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_PROJECT_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n}\r\n","export default class Team {\r\n   constructor(name, manager) {\r\n      this.name = name;\r\n      this.manager = manager;\r\n   }\r\n   getTeamDTO() {\r\n      return {\r\n         team: {\r\n            name: this.name,\r\n            manager: this.manager\r\n         }\r\n      };\r\n   }\r\n}\r\n","import API from '../../API';\r\nimport Request from '../../Requests/Request';\r\nimport Team from './DTO/Team';\r\n\r\n/**\r\n * @author Rafal Cymbalsita\r\n * @class TeamsService\r\n * @description TeamsService : HTTP communication layer\r\n * @static\r\n */\r\nexport default class TeamsService {\r\n   /**\r\n    * @public\r\n    * @param {String} Name\r\n    * @param {ObjectID} Manager\r\n    *\r\n    */\r\n   static createTeamDTO(name, manager) {\r\n      return new Team(name, manager).getTeamDTO();\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {Team} Team\r\n    * @returns - HTTP Response\r\n    */\r\n   static async saveTeam(Team) {\r\n      return await Request.post(API.ROUTES.TEAMS.CREATE_NEW_TEAM, Team)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {Team} Team\r\n    * @returns - HTTP Response\r\n    */\r\n   static async updateTeam(Team) {\r\n      return await Request.put(API.ROUTES.TEAMS.UPDATE_TEAM, Team)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {id} Team._id\r\n    * @returns - HTTP Response\r\n    */\r\n   static async deleteTeamByID(id) {\r\n      return await Request.delete(API.ROUTES.TEAMS.DELETE_TEAM_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @returns - HTTP Response\r\n    * @throws - HTTP Axios Error\r\n    */\r\n   static async getTeams() {\r\n      return await Request.get(API.ROUTES.TEAMS.GET_TEAMS)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {id} Team._id\r\n    * @returns - HTTP Response\r\n    */\r\n   static async getTeamById(id) {\r\n      return await Request.get(API.ROUTES.TEAMS.GET_TEAM_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {name} Team.name\r\n    * @returns - HTTP Response\r\n    */\r\n   static async getTeamByName(name) {\r\n      return await Request.get(API.ROUTES.TEAMS.GET_TEAM_BY_NAME + name)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n}\r\n","export default class Project {\r\n   constructor(name, manager) {\r\n      this.name = name;\r\n      this.manager = manager;\r\n   }\r\n   /**\r\n    * @public\r\n    * @returns {Project} DTO\r\n    */\r\n   getProjectDTO() {\r\n      return {\r\n         project: {\r\n            name: this.name,\r\n            manager: this.manager\r\n         }\r\n      };\r\n   }\r\n}\r\n","import API from '../../API';\r\nimport Request from '../../Requests/Request';\r\nimport Project from './DTO/Project';\r\n\r\n/**\r\n * @author Rafal Cymbalsita\r\n * @class ProjectsService\r\n * @description ProjectsService : HTTP communication layer\r\n * @static\r\n */\r\nexport default class ProjectsService {\r\n   /**\r\n    * @public\r\n    * @param {String} Name\r\n    * @param {ObjectID} Manager\r\n    *\r\n    */\r\n   static createProjectDTO(name, manager) {\r\n      return new Project(name, manager).getProjectDTO();\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {Project} project\r\n    * @returns - HTTP Response\r\n    */\r\n   static async saveProject(project) {\r\n      return await Request.post(API.ROUTES.PROJECTS.CREATE_NEW_PROEJCT, project)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {Project} project\r\n    * @returns - HTTP Response\r\n    */\r\n   static async updateProject(project) {\r\n      return await Request.put(API.ROUTES.PROJECTS.UPDATE_PROJECT, project)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {id} project._id\r\n    * @returns - HTTP Response\r\n    */\r\n   static async deleteProjectByID(id) {\r\n      return await Request.delete(API.ROUTES.PROJECTS.DELETE_PROJECT_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @returns - HTTP Response\r\n    * @throws - HTTP Axios Error\r\n    */\r\n   static async getProjects() {\r\n      return await Request.get(API.ROUTES.PROJECTS.GET_PROJECTS)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {id} project._id\r\n    * @returns - HTTP Response\r\n    */\r\n   static async getProjectById(id) {\r\n      return await Request.get(API.ROUTES.PROJECTS.GET_PROJECT_BY_ID + id)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @param {name} project.name\r\n    * @returns - HTTP Response\r\n    */\r\n   static async getProjectByName(name) {\r\n      return await Request.get(API.ROUTES.PROJECTS.GET_PROJECT_BY_NAME + name)\r\n         .then(result => {\r\n            return result;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n}\r\n","export default class User {\r\n   constructor(username, email, password, usertype, active = true) {\r\n      this.username = username;\r\n      this.email = email;\r\n      this.password = password;\r\n      this.usertype = usertype;\r\n      this.active = active;\r\n   }\r\n\r\n   getUserDTO() {\r\n      return {\r\n         user: {\r\n            username: this.username,\r\n            email: this.email,\r\n            password: this.password,\r\n            usertype: this.usertype,\r\n            active: this.active,\r\n            createdAt: new Date()\r\n         }\r\n      };\r\n   }\r\n}\r\n","import API from '../../API';\r\nimport Request from '../../Requests/Request';\r\nimport User from './DTO/User';\r\n\r\n/**\r\n * @class UserService\r\n * @description UserService HTTP communication layer\r\n */\r\nexport default class UserService {\r\n   static createUserDTO(username, email, password, usertype, active = true) {\r\n      return new User(username, email, password, usertype, active).getUserDTO();\r\n   }\r\n   /**\r\n    * @public\r\n    * @param {User} user DTO\r\n    * @returns HTTP Response\r\n    */\r\n   static async saveNewUser(user) {\r\n      return await Request.post(API.ROUTES.USERS.CREATE_NEW_USER, user)\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n   /**\r\n    * @public\r\n    * @param {User} user DTO\r\n    * @returns HTTP Response\r\n    */\r\n   static async updateUser(user) {\r\n      return await Request.put(API.ROUTES.USERS.UPDATE_USER, user)\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n   /**\r\n    * @public\r\n    * @returns HTTP Response\r\n    */\r\n   static async deleteUser(id) {\r\n      return await Request.delete(API.ROUTES.USERS.DELETE_USER + id)\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @returns HHTP response\r\n    */\r\n   static async getUsers() {\r\n      return await Request.get(API.ROUTES.USERS.GET_ALL_USERS)\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @returns HTTP Response\r\n    */\r\n   static async getUserTypes() {\r\n      return await Request.get(API.ROUTES.USERS.USER_TYPES.GET_USER_TYPES)\r\n         .then(res => {\r\n            return res;\r\n         })\r\n         .catch(err => {\r\n            throw err;\r\n         });\r\n   }\r\n}\r\n","import AuthService from './AuthService/AuthService';\r\nimport EmployeesService from './EmployeesService/EmployeesService';\r\nimport EmployeesTypesService from './EmployeesService/EmployeesTypesService';\r\nimport KPIsService from './KPIsService/KPIsService';\r\nimport ReportingService from './ReportingService/ReportingService';\r\nimport TeamsService from './TeamsService/TeamsService';\r\nimport ProjectsService from './ProjectsService/ProjectsService';\r\nimport UsersService from './UsersService/UserService';\r\n\r\nexport default class Services {\r\n   static AuthService = AuthService;\r\n   static EmployeesService = EmployeesService;\r\n   static EmployeesTypesService = EmployeesTypesService;\r\n   static KPIsService = KPIsService;\r\n   static ReportingService = ReportingService;\r\n   static TeamsService = TeamsService;\r\n   static ProjectsService = ProjectsService;\r\n   static UsersService = UsersService;\r\n}\r\n","import Routes from './Routes/Routes';\r\nimport Services from './Services/Services';\r\nimport Request from './Requests/Request';\r\n\r\n/**\r\n * @description Gives access to API Routes Services and Authorized Request with (JWT)\r\n */\r\nexport default class API {\r\n   /**\r\n    * @static\r\n    * @returns {Object}\r\n    * @description Gives access to all API routes\r\n    */\r\n   static ROUTES = Routes;\r\n\r\n   /**\r\n    * @static\r\n    * @returns {Object}\r\n    * @description Returns API services objects\r\n    */\r\n   static SERVICES = Services;\r\n\r\n   static REQUEST = Request;\r\n}\r\n","import { Toaster } from '@blueprintjs/core';\r\n\r\nconst doToast = Toaster.create({\r\n   className: '',\r\n   position: 'top-right',\r\n   maxToasts: 10\r\n});\r\n\r\nexport default class Notifications {\r\n   static simple(message) {\r\n      doToast.show({ message: message });\r\n   }\r\n   static success(message) {\r\n      doToast.show({\r\n         message: message,\r\n         intent: 'success',\r\n         icon: 'tick'\r\n      });\r\n   }\r\n   static alert(message) {\r\n      doToast.show({\r\n         message: message,\r\n         intent: 'warning',\r\n         icon: 'warning-sign'\r\n      });\r\n   }\r\n   static failure(message) {\r\n      doToast.show({\r\n         message: message,\r\n         intent: 'danger',\r\n         icon: 'delete'\r\n      });\r\n   }\r\n   static error(message) {\r\n      doToast.show({\r\n         message: message,\r\n         intent: 'danger',\r\n         icon: 'issue'\r\n      });\r\n   }\r\n   static custom(message, intent, icon, timeout) {\r\n      doToast.show({\r\n         message: message,\r\n         intent: intent,\r\n         icon: icon,\r\n         timeout: timeout\r\n      });\r\n   }\r\n}\r\n","//import User from './API/User/User';\r\nimport API from './API/API';\r\nimport Notifications from './Notifications/Notifications';\r\nimport User from './API/User/User';\r\nvar info = require('./info/info.json');\r\n\r\nexport default class Client {\r\n   /**\r\n    * @public\r\n    * @description Give access to client basic information\r\n    * @returns {JSON} ./info/info.json\r\n    */\r\n   static info = info;\r\n\r\n   /**\r\n    * @public\r\n    * @description API Object\r\n    */\r\n   static API = API;\r\n\r\n   /**\r\n    * @public\r\n    * @description API.Services\r\n    */\r\n   static Services = API.SERVICES;\r\n\r\n   /**\r\n    * @public\r\n    * @description React Client Notifications / Toasts\r\n    */\r\n   static Notifications = Notifications;\r\n\r\n   /**\r\n    * @public\r\n    * @description User Object\r\n    */\r\n   static User = User;\r\n\r\n   /**\r\n    * @public\r\n    * @description testing Authentication API route\r\n    * @returns {Object} user.username\r\n    *                   user.role\r\n    */\r\n   static async testingCurrentUserAuth() {\r\n      var data = await API.REQUEST.get(API.ROUTES.USERS.GET_CURRENT_USER)\r\n         .then(data => {\r\n            return data;\r\n         })\r\n         .catch(err => {\r\n            console.log(err);\r\n            return err;\r\n         });\r\n      if (data.err) {\r\n         return '';\r\n      }\r\n      return data.data.username + ' is ' + data.data.usertype;\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @description Login user with username and password and save USER (JWT) in localStorage\r\n    * @param {String} username\r\n    * @param {String} password\r\n    * @return {Boolean} TRUE - if successfull, FALSE othervise\r\n    */\r\n   static async login(username, password) {\r\n      return await API.SERVICES.AuthService.login(username, password);\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @returns {Boolean} if user is Authenticated\r\n    */\r\n   static isAuthenticated() {\r\n      return API.SERVICES.AuthService.isAuthenticated();\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @return {boolean} - TRUE once operation is completed, FALSE - if error\r\n    */\r\n   static async logout() {\r\n      return await API.SERVICES.AuthService.logout(); //this.Auth.deauthenticateUser()\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Sidebar.css';\r\n\r\nexport default class Sidebar extends Component {\r\n   state = {\r\n      selected: 1\r\n   };\r\n\r\n   changeSelection(id) {\r\n      this.setState({ selected: id });\r\n   }\r\n\r\n   render() {\r\n      return <nav className='side-bar'>{this.props.children}</nav>;\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { Button, Tooltip, Position } from '@blueprintjs/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class SidebarItem extends Component {\r\n   state = {\r\n      selected: this.props.selected,\r\n      link: this.props.link\r\n   };\r\n\r\n   render() {\r\n      const { to, selected, icon, onClick, tooltip } = this.props;\r\n      return (\r\n         <div className=''>\r\n            <Tooltip content={tooltip} position={Position.RIGHT} fill>\r\n               <Link to={to}>\r\n                  <Button\r\n                     minimal\r\n                     large\r\n                     icon={icon}\r\n                     fill={true}\r\n                     active={selected ? true : false}\r\n                     onClick={onClick}\r\n                  />\r\n               </Link>\r\n            </Tooltip>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { Button, Tooltip, Position } from '@blueprintjs/core';\r\n\r\nexport default class SidebarItem extends Component {\r\n   state = {\r\n      selected: this.props.selected,\r\n      link: this.props.link\r\n   };\r\n\r\n   render() {\r\n      const { intent, icon, onClick, tooltip } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Tooltip content={tooltip} position={Position.RIGHT} fill>\r\n               <Button\r\n                  minimal\r\n                  large\r\n                  icon={icon}\r\n                  fill={true}\r\n                  intent={intent}\r\n                  onClick={onClick}\r\n               />\r\n            </Tooltip>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","/**\r\n *    UIManager controls the user specific preferences in local storage\r\n *    ver:  0.0.1\r\n *    info: init release\r\n */\r\n\r\nimport { defaults } from 'react-chartjs-2';\r\n\r\nclass UIManager {\r\n   /**\r\n    * Save user theme in local storage\r\n    *\r\n    * @param {String} theme\r\n    */\r\n   static setTheme(theme) {\r\n      var t = theme.toLowerCase();\r\n      if (t === 'dark' || t === 'light') {\r\n         localStorage.setItem('theme', t);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Get user theme from local storage and set default theme if no theme selected\r\n    *    -- set light theme if no theme is set\r\n    *    -- return theme as {String}\r\n    * @returns {String} light || dark\r\n    *\r\n    */\r\n   static getTheme() {\r\n      if (!this.isThemeSet()) this.setTheme('light');\r\n      return localStorage.getItem('theme');\r\n   }\r\n\r\n   /**\r\n    * Check if theme is saved in local storage\r\n    * @returns {boolean} if light or dark theme is set\r\n    */\r\n   static isThemeSet() {\r\n      return localStorage.getItem('theme') !== null;\r\n   }\r\n\r\n   /**\r\n    *    Apply Selected theme\r\n    *       -- keeps selection in localstorage\r\n    *       -- theme can be selected by setTheme(theme) method\r\n    *       -- apply CSS class to 'bp3-dark' || 'bp3-body' to <body></body> tag\r\n    *       -- idea of BLUEPRINTJS UI framework\r\n    * @returns {void}\r\n    */\r\n   static applySelectedTheme() {\r\n      document.body.className =\r\n         UIManager.getTheme() === 'dark' ? 'bp3-dark' : 'bp3-body';\r\n   }\r\n\r\n   /**\r\n    * Switch doc theme based on selection :\r\n    *    -- dark\r\n    *    -- light\r\n    *\r\n    * @returns {void}\r\n    */\r\n   static swtichTheme() {\r\n      if (this.isDarkThemeEnabled()) {\r\n         this.setTheme('light');\r\n      } else {\r\n         this.setTheme('dark');\r\n      }\r\n      this.applySelectedTheme();\r\n      this.setChartView();\r\n      if (this.getCurrentView() === 'dashboards') {\r\n         window.location.reload();\r\n      }\r\n   }\r\n\r\n   /**\r\n    *    @returns {Boolean} if dark theme is set\r\n    */\r\n   static isDarkThemeEnabled() {\r\n      var th = this.getTheme();\r\n      if (th === 'dark') {\r\n         return true;\r\n      }\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * @returns {Boolean} if light theme is set\r\n    */\r\n   static isLightThemeEnabled() {\r\n      return !this.isDarkThemeEnabled();\r\n   }\r\n\r\n   static setChartView() {\r\n      var theme = this.getTheme();\r\n      if (theme === 'dark') {\r\n         defaults.global.defaultFontColor = 'lightgray';\r\n         defaults.global.legend.fontColor = 'white';\r\n      }\r\n      if (theme === 'light') {\r\n         defaults.global.defaultFontColor = 'black';\r\n         defaults.global.legend.fontColor = 'black';\r\n      }\r\n   }\r\n\r\n   static setCurrentView(view) {\r\n      localStorage.setItem('view', view);\r\n   }\r\n   static getCurrentView() {\r\n      let v = localStorage.getItem('view');\r\n      if (v == null) {\r\n         var _v = window.location.pathname.toString();\r\n         _v = _v.slice(1, _v.length);\r\n         return _v.toLocaleLowerCase();\r\n      }\r\n   }\r\n}\r\n\r\nexport default UIManager;\r\n","import React, { Component } from 'react';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport SidebarItem from '../Sidebar/SidebarItem';\r\nimport SidebarItemSpecial from '../Sidebar/SidebarItemSpecial';\r\nimport Client from '../../Modules/Client/Client';\r\nimport UIManager from '../../Modules/UIManager/UIManager';\r\nimport { MenuDivider } from '@blueprintjs/core';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AppSideBar extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         selected: UIManager.getCurrentView(),\r\n         themeIcon: UIManager.isDarkThemeEnabled() ? 'flash' : 'moon',\r\n         themeToSwitch: UIManager.isDarkThemeEnabled() ? 'Light' : 'Dark',\r\n         logout: false,\r\n         goHome: false,\r\n         isOpen: false\r\n      };\r\n      this.switchTheme = this.switchTheme.bind(this);\r\n      this.handleLogout = this.handleLogout.bind(this);\r\n   }\r\n   componentDidMount() {\r\n      this.setState({\r\n         selected: UIManager.getCurrentView()\r\n      });\r\n   }\r\n\r\n   changeSelection(id) {\r\n      this.setState({ selected: id });\r\n      UIManager.setChartView(id);\r\n   }\r\n\r\n   switchTheme() {\r\n      UIManager.swtichTheme();\r\n      UIManager.setChartView();\r\n      this.setState({\r\n         themeIcon: UIManager.isDarkThemeEnabled() ? 'flash' : 'moon',\r\n         themeToSwitch: UIManager.isDarkThemeEnabled() ? 'Light' : 'Dark'\r\n      });\r\n   }\r\n\r\n   handleLogout = e => {\r\n      e.preventDefault();\r\n      Client.logout();\r\n      this.setState({\r\n         logout: true\r\n      });\r\n   };\r\n\r\n   render() {\r\n      const { selected } = this.state;\r\n\r\n      if (this.state.logout) {\r\n         return <Redirect to='/' />;\r\n      }\r\n\r\n      return (\r\n         <Sidebar>\r\n            <div className='side-bar-logo bp3-fill'>\r\n               <i className='fas fa-dice-d20'></i>\r\n            </div>\r\n            <MenuDivider />\r\n            <div className='side-bar-group-center'>\r\n               <SidebarItem\r\n                  to='/Home'\r\n                  icon='home'\r\n                  tooltip='Home'\r\n                  selected={selected === 'home'}\r\n                  onClick={() => this.changeSelection('home')}\r\n               />\r\n               <SidebarItem\r\n                  to='/Dashboards'\r\n                  icon='dashboard'\r\n                  tooltip='Dashboard'\r\n                  selected={selected === 'dashboard'}\r\n                  onClick={() => this.changeSelection('dashboard')}\r\n               />\r\n               <SidebarItem\r\n                  to='/KPIs'\r\n                  icon='locate'\r\n                  tooltip='KPIs'\r\n                  selected={selected === 'kpis'}\r\n                  onClick={() => this.changeSelection('kpis')}\r\n               />\r\n               <SidebarItem\r\n                  to='/Reports'\r\n                  icon='manually-entered-data'\r\n                  tooltip='Reports'\r\n                  selected={selected === 'reports'}\r\n                  onClick={() => this.changeSelection('reports')}\r\n               />\r\n               <SidebarItem\r\n                  to='/Projects'\r\n                  icon='gantt-chart'\r\n                  tooltip='Projects'\r\n                  selected={selected === 'projects'}\r\n                  onClick={() => this.changeSelection('projects')}\r\n               />\r\n               <SidebarItem\r\n                  to='/Teams'\r\n                  icon='people'\r\n                  tooltip='Teams'\r\n                  selected={selected === 'teams'}\r\n                  onClick={() => this.changeSelection('teams')}\r\n               />\r\n               <SidebarItem\r\n                  to='/Employees'\r\n                  icon='user'\r\n                  tooltip='Employees'\r\n                  selected={selected === 'employees'}\r\n                  onClick={() => this.changeSelection('employees')}\r\n               />\r\n\r\n               <SidebarItem\r\n                  to='/AdminPanel'\r\n                  icon='control'\r\n                  tooltip='Admin Panel'\r\n                  selected={selected === 'adminpanel'}\r\n                  onClick={() => this.changeSelection('adminpanel')}\r\n               />\r\n            </div>\r\n\r\n            <div className='side-bar-group-bottom'>\r\n               <MenuDivider />\r\n               <SidebarItemSpecial\r\n                  icon={this.state.themeIcon}\r\n                  intent=''\r\n                  tooltip='Switch theme'\r\n                  onClick={this.switchTheme}\r\n               />\r\n               <SidebarItem\r\n                  to='/Settings'\r\n                  icon='cog'\r\n                  tooltip='Settings'\r\n                  selected={selected === 'settings'}\r\n                  onClick={() => this.changeSelection('settings')}\r\n               />\r\n               <SidebarItemSpecial\r\n                  icon='power'\r\n                  intent='danger'\r\n                  tooltip='Logout'\r\n                  onClick={this.handleLogout}\r\n               />\r\n            </div>\r\n         </Sidebar>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport './MainContainer.css';\r\n\r\nexport default class MainContainer extends Component {\r\n   state = {\r\n      displayBgImage: this.displayBgImage(this.props.displayBgImage),\r\n      appView: this.props.app === undefined ? true : false,\r\n      homeView: this.props.app === undefined ? false : true\r\n   };\r\n\r\n   displayBgImage(disply) {\r\n      if (disply) {\r\n         return 'bg-image';\r\n      }\r\n      return '';\r\n   }\r\n\r\n   selectPlace() {\r\n      const { appView, homeView, noAppBar } = this.props;\r\n      if (appView) {\r\n         return 'main-data-app';\r\n      }\r\n      if (homeView) {\r\n         return 'main-data-home';\r\n      }\r\n      if (noAppBar) {\r\n         return 'main-data-home';\r\n      }\r\n      return '';\r\n   }\r\n\r\n   render() {\r\n      const { appView, homeView, noAppBar } = this.props;\r\n\r\n      if (appView || homeView) {\r\n         return (\r\n            <div className='main-container'>\r\n               <div\r\n                  className={`${this.displayBgImage(this.props.displayBgImage)}\r\n                        ${this.selectPlace()} `}\r\n                  id='MainContainer'\r\n               >\r\n                  {this.props.children}\r\n               </div>\r\n            </div>\r\n         );\r\n      }\r\n      if (noAppBar) {\r\n         return (\r\n            <div\r\n               className={`${this.displayBgImage(this.props.displayBgImage)}\r\n                        ${this.selectPlace()}`}\r\n               id='MainContainer'\r\n            >\r\n               {this.props.children}\r\n            </div>\r\n         );\r\n      }\r\n   }\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Client from '../Modules/Client/Client';\r\n//import AppBar from '../components/AppBar/AppBar';\r\nimport AppSidebar from '../components/AppSideBar/AppSideBar';\r\nimport MainContainer from '../components/MainContainer/MainContainer';\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n   //const { layout: Layout, component: Component, ...rest } = this.props;\r\n   return (\r\n      // Show the component only when the user is logged in\r\n      // Otherwise, redirect the user to /signin page\r\n      <Route\r\n         {...rest}\r\n         render={props =>\r\n            Client.isAuthenticated() ? (\r\n               <div>\r\n                  <AppSidebar />\r\n                  <MainContainer appView>\r\n                     <Component {...props} />\r\n                  </MainContainer>\r\n               </div>\r\n            ) : (\r\n               <Redirect to='/login' />\r\n            )\r\n         }\r\n      />\r\n   );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Settings extends Component {\r\n   render() {\r\n      return <div></div>;\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class TableHeaders extends Component {\r\n   renderTableHeader() {\r\n      return this.props.headers.map(header => {\r\n         return (\r\n            <th className={header.center ? 'text-center' : ''}>\r\n               {header.text}\r\n            </th>\r\n         );\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <thead>\r\n            <tr>{this.renderTableHeader()}</tr>\r\n         </thead>\r\n      );\r\n   }\r\n}\r\n\r\nTableHeaders.defaultProps = {\r\n   headers: []\r\n};\r\n","import React, { Component } from 'react';\r\nimport {\r\n   HTMLTable,\r\n   Button,\r\n   NonIdealState,\r\n   H5,\r\n   Spinner,\r\n   Classes\r\n} from '@blueprintjs/core';\r\n\r\nimport TableHeaders from './TableHeaders';\r\n\r\nexport default class Table extends Component {\r\n   state = {\r\n      errorMsg: ''\r\n   };\r\n   renderTableHeader() {\r\n      return <TableHeaders headers={this.props.headers} />;\r\n   }\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n   renderTableRows() {\r\n      return this.props.rows;\r\n   }\r\n\r\n   renderNonIdealState(header, information = '') {\r\n      return (\r\n         <div className='card-body'>\r\n            <NonIdealState icon='issue'>\r\n               <H5>\r\n                  <strong>{header}</strong>\r\n               </H5>\r\n               <i className={Classes.TEXT_MUTED}>{information}</i>\r\n               <Button\r\n                  icon='refresh'\r\n                  minimal\r\n                  onClick={() => {\r\n                     this.props.onRefresh();\r\n                     this.setState({\r\n                        errorMsg: ''\r\n                     });\r\n                  }}\r\n               ></Button>\r\n            </NonIdealState>\r\n         </div>\r\n      );\r\n   }\r\n\r\n   renderContent() {\r\n      if (this.props.errorMsg) {\r\n         this.renderNonIdealState('Something went wrong', 'Cannot load table');\r\n      }\r\n\r\n      if (this.props.rows.length === 0) {\r\n         return this.renderNonIdealState('There are no items to display');\r\n      }\r\n\r\n      return (\r\n         <HTMLTable\r\n            fill='true'\r\n            striped={true}\r\n            condensed\r\n            interactive\r\n            className={this.props.className}\r\n         >\r\n            {this.renderTableHeader()}\r\n            {this.renderTableBody()}\r\n         </HTMLTable>\r\n      );\r\n   }\r\n\r\n   render() {\r\n      const { isLoading } = this.props;\r\n\r\n      if (isLoading) {\r\n         return <Spinner intent='primary'></Spinner>;\r\n      }\r\n      return this.renderContent();\r\n   }\r\n}\r\n\r\nTable.defaultProps = {\r\n   rows: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Icon } from '@blueprintjs/core';\r\n\r\nexport default class TableCell extends Component {\r\n   handleCellValue(value) {\r\n      if (typeof value === 'boolean') {\r\n         if (value) {\r\n            return <Icon icon='tick' intent='success' />;\r\n         }\r\n         return <Icon icon='cross' intent='danger' />;\r\n      }\r\n      if (typeof value === 'undefined') {\r\n         return 'N/A';\r\n      }\r\n      if (value == null) {\r\n         return 'null';\r\n      }\r\n      return value;\r\n   }\r\n\r\n   render() {\r\n      const { center, value, key } = this.props;\r\n      return (\r\n         <td className={center ? 'text-center' : ''} key={key}>\r\n            {this.handleCellValue(value)}\r\n         </td>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport TableCell from './TableCell';\r\n\r\nexport default class ProjectsTable extends Component {\r\n   state = {\r\n      selected: '',\r\n      headers: [\r\n         { text: '#', center: true },\r\n         { text: 'Name' },\r\n         { text: 'Manager' }\r\n      ]\r\n   };\r\n\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n   renderTableRows() {\r\n      const { data } = this.props;\r\n      return data.map((project, key) => {\r\n         return (\r\n            <tr\r\n               key={project._id}\r\n               onClick={e => this.handleSelection(e, project)}\r\n               className={` ${\r\n                  this.state.selected._id === project._id ? 'bg-selected' : ''\r\n               }`}\r\n            >\r\n               <TableCell center value={key} key={key} />\r\n               <TableCell value={project.name} />\r\n               <TableCell value={project.manager.name} />\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   handleSelection(e, project) {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      if (selected._id !== project._id) {\r\n         this.props.onSelection(project, false);\r\n         this.setState({\r\n            selected: project\r\n         });\r\n         return;\r\n      }\r\n      this.props.onSelection({}, true);\r\n      this.setState({ selected: {} });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Table\r\n            headers={this.state.headers}\r\n            rows={this.renderTableRows()}\r\n            errorMsg={this.props.errorMsg}\r\n            isLoading={this.props.isLoading}\r\n            onRefresh={this.props.onRefresh}\r\n         />\r\n      );\r\n   }\r\n}\r\nProjectsTable.defaultProps = {\r\n   data: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect, Spinner, Button, Alignment } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class EmployeesOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      isLoading: true,\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         this.setLoading(true);\r\n         var result = await Client.Services.EmployeesService.getEmployees();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n   setLoading(loading) {\r\n      this.setState({ isLoading: loading });\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      const { isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <Button\r\n               icon={<Spinner size={20} />}\r\n               disabled={isLoading}\r\n               alignText={Alignment.LEFT}\r\n               fill\r\n            >\r\n               Employees...\r\n            </Button>\r\n         );\r\n      }\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable\r\n} from '@blueprintjs/core';\r\nimport EmployeesOptions from '../Selects/EmployeesOptions';\r\n\r\nexport default class ProjectForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name,\r\n         manager,\r\n         selectedManager\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createProjectForm'>\r\n               <HTMLTable condensed>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Project Name'\r\n                           labelFor='name'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <InputGroup\r\n                           id='name'\r\n                           onChange={onChange}\r\n                           placeholder='Project Name...'\r\n                           type='text'\r\n                           value={name}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Manager'\r\n                           labelFor='manager'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <EmployeesOptions\r\n                           id='manager'\r\n                           onChange={onChange}\r\n                           placeholder='Project Manager...'\r\n                           value={manager}\r\n                           fill\r\n                           selected={selectedManager}\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nProjectForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\r\nimport ProjectForm from '../Forms/ProjectForm';\r\n\r\nexport default class ProjectDialog extends Component {\r\n   render() {\r\n      return (\r\n         <div id='ProjectDialog'>\r\n            <Dialog\r\n               isOpen={this.props.isOpen}\r\n               onClose={this.props.toClose}\r\n               toggle={this.props.toOpen}\r\n            >\r\n               <Card>\r\n                  <div className='card-body'>\r\n                     <div id={this.props.id}>\r\n                        <ProjectForm\r\n                           name={this.props.name}\r\n                           manager={this.props.manager}\r\n                           selectedManager={this.props.selectedManager}\r\n                           onChange={this.props.onChange}\r\n                           onSubmit={this.props.handleSubmit}\r\n                           buttonCaption={this.props.buttonCaption}\r\n                           onClear={this.props.onClear}\r\n                        />\r\n                     </div>\r\n                  </div>\r\n               </Card>\r\n               <Alert\r\n                  isOpen={this.props.isAlertOpen}\r\n                  confirmButtonText='Clear form'\r\n                  onConfirm={this.props.onClear}\r\n                  cancelButtonText='Cancel'\r\n                  onCancel={this.props.closeAlert}\r\n                  intent='danger'\r\n                  icon='issue'\r\n                  ussePortal={\r\n                     <Portal\r\n                        container={document.getElementById('ProjectDialog')}\r\n                     />\r\n                  }\r\n               >\r\n                  <H5>{this.props.errorMessage}</H5>\r\n                  <strong>Do you want to clear the data?</strong>\r\n               </Alert>\r\n            </Dialog>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { ButtonGroup, Button, Divider } from '@blueprintjs/core';\r\n\r\nexport default class TableControllers extends Component {\r\n   render() {\r\n      const {\r\n         onEdit,\r\n         canEdit,\r\n         onAdd,\r\n         onDelete,\r\n         canDelete,\r\n         onRefresh\r\n      } = this.props;\r\n      return (\r\n         <div>\r\n            <ButtonGroup>{this.props.children}</ButtonGroup>\r\n            <ButtonGroup>\r\n               <Button\r\n                  icon='edit'\r\n                  small\r\n                  minimal\r\n                  onClick={onEdit}\r\n                  disabled={canEdit}\r\n               />\r\n               <Button icon='add' small minimal onClick={onAdd} />\r\n               <Button\r\n                  icon='trash'\r\n                  small\r\n                  minimal\r\n                  onClick={onDelete}\r\n                  disabled={canDelete}\r\n               />\r\n               <Divider />\r\n               <Button icon='refresh' small minimal onClick={onRefresh} />\r\n            </ButtonGroup>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {\r\n   Tabs,\r\n   Tab,\r\n   H2,\r\n   Alert,\r\n   Portal,\r\n   H5,\r\n   Classes,\r\n   Card\r\n} from '@blueprintjs/core';\r\nimport ProjectsTable from '../../components/Tables/ProjectsTable';\r\nimport ProjectDialog from '../../components/Dialogs/ProjectDialog';\r\nimport Client from '../../Modules/Client/Client';\r\nimport TableControllers from '../../components/Tables/TableControllers';\r\n\r\nexport default class Projects extends Component {\r\n   state = {\r\n      activeTabID: 'Projects',\r\n      selectedTabId: 'Projects',\r\n      isLoading: true,\r\n      data: [],\r\n      openAlert: true,\r\n      errorMessage: '',\r\n      isAddDialogOpen: false,\r\n      isEditDialogOpen: false,\r\n      isDeleteAlertOpen: false,\r\n      canEdit: !false,\r\n      canDelete: !false,\r\n      name: '',\r\n      manager: '',\r\n      selected: {}\r\n   };\r\n\r\n   getSelected = (sel, isSelected) => {\r\n      this.setState({\r\n         selected: sel,\r\n         canEdit: isSelected,\r\n         canDelete: isSelected\r\n      });\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.getProjectsData();\r\n   }\r\n\r\n   async getProjectsData() {\r\n      this.setLoading(true);\r\n      var result;\r\n      try {\r\n         //this.resetErrorMsg();\r\n         result = await Client.Services.ProjectsService.getProjects();\r\n         this.setState({\r\n            data: result.data\r\n         });\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ errorMsg: err.response });\r\n         Client.Notifications.alert('Error while loading Projects list');\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   async deleteUser(id) {\r\n      var result;\r\n      try {\r\n         this.resetErrorMsg();\r\n         result = await Client.Services.ProjectsService.deleteProjectByID(id);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success('Project removed successfully');\r\n         }\r\n      } catch (err) {\r\n         this.setState({ errorMsg: err.response.status });\r\n         Client.Notifications.alert('Error, cannot delete Project');\r\n      } finally {\r\n         this.getProjectsData();\r\n         this.closeDeleteAlert();\r\n      }\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n      const { name, manager } = this.state;\r\n      var errorMsg = 'Unknown Error';\r\n      let project = await Client.Services.ProjectsService.createProjectDTO(\r\n         name,\r\n         manager\r\n      );\r\n      try {\r\n         let result = await Client.Services.ProjectsService.saveProject(\r\n            project\r\n         );\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Project ${name} successfully saved`);\r\n            this.getProjectsData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${name} Project`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n   handleUpdate = async e => {\r\n      e.preventDefault();\r\n      const { name, manager, selected } = this.state;\r\n\r\n      var errorMsg = 'Unknown Error';\r\n      try {\r\n         let project = await Client.Services.ProjectsService.createProjectDTO(\r\n            name,\r\n            manager\r\n         );\r\n         project.project._id = selected._id;\r\n         let result = await Client.Services.ProjectsService.updateProject(\r\n            project\r\n         );\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Project ${name} successfully saved`);\r\n            this.getProjectsData();\r\n            console.log(result.data.employee);\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${name} project`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n   openAlert(msg) {\r\n      this.setState({ isAlertOpen: true, errorMessage: msg });\r\n   }\r\n   closeAlert() {\r\n      this.setState({ isAlertOpen: false, errorMessage: '' });\r\n   }\r\n\r\n   resetErrorMsg() {\r\n      this.setState({ errorMessage: '' });\r\n   }\r\n\r\n   onChange = e => {\r\n      const state = this.state;\r\n      state[e.target.id] = e.target.value;\r\n      this.setState(state);\r\n   };\r\n\r\n   openDialog() {\r\n      this.setState({\r\n         isAddDialogOpen: true\r\n      });\r\n   }\r\n   closeDialog() {\r\n      this.setState({\r\n         isAddDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openEditDialog = async e => {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      try {\r\n         let result = await Client.Services.ProjectsService.getProjectById(\r\n            selected._id\r\n         );\r\n         if (result.status === 200) {\r\n            let project = result.data;\r\n            this.setState({\r\n               isEditDialogOpen: true,\r\n               name: project.name,\r\n               manager: project.manager._id\r\n            });\r\n         }\r\n      } catch (err) {\r\n         console.log(err);\r\n         this.setState({\r\n            isEditDialogOpen: true,\r\n            name: selected.name,\r\n            manager: selected.manager._id\r\n         });\r\n      }\r\n   };\r\n   closeEditDialog() {\r\n      this.setState({\r\n         isEditDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: true\r\n      });\r\n   }\r\n   closeDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: false\r\n      });\r\n   }\r\n\r\n   setLoading(loading) {\r\n      this.setState({\r\n         isLoading: loading\r\n      });\r\n   }\r\n\r\n   handleTabChange = activeTabID => {\r\n      this.setState({\r\n         activeTabID: activeTabID,\r\n         selectedTabId: activeTabID\r\n      });\r\n   };\r\n   clearForm() {\r\n      this.setState({\r\n         name: '',\r\n         manager: '',\r\n         isAlertOpen: false,\r\n         errorMessage: ''\r\n      });\r\n   }\r\n\r\n   renderControlls() {\r\n      if (this.state.selectedTabId === 'Projects') {\r\n         return (\r\n            <TableControllers\r\n               onEdit={this.openEditDialog}\r\n               canEdit={this.state.canEdit}\r\n               onAdd={() => this.openDialog()}\r\n               onDelete={() => this.openDeleteAlert()}\r\n               canDelete={this.state.canDelete}\r\n               onRefresh={() => this.getProjectsData()}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         data,\r\n         isLoading,\r\n         name,\r\n         manager,\r\n         isAlertOpen,\r\n         selected\r\n      } = this.state;\r\n\r\n      return (\r\n         <div id='ProjectsPanel'>\r\n            <div className='mt-2'>\r\n               <H2>Projects Panel</H2>\r\n            </div>\r\n            <Tabs\r\n               onChange={this.handleTabChange}\r\n               selectedTabId={this.state.selectedTabId}\r\n               large\r\n            >\r\n               <Tab\r\n                  id='Projects'\r\n                  title='Projects'\r\n                  panel={\r\n                     <Card>\r\n                        <ProjectsTable\r\n                           data={data}\r\n                           onRefresh={() => this.getProjectsData()}\r\n                           isLoading={isLoading}\r\n                           onSelection={this.getSelected}\r\n                        />\r\n                     </Card>\r\n                  }\r\n               />\r\n               <Tabs.Expander />\r\n               {this.renderControlls()}\r\n            </Tabs>\r\n            <ProjectDialog\r\n               isOpen={this.state.isEditDialogOpen}\r\n               toOpen={() => this.openEditDialog()}\r\n               toClose={() => this.closeEditDialog()}\r\n               name={name}\r\n               manager={manager}\r\n               selectedManager={manager}\r\n               onChange={this.onChange}\r\n               handleSubmit={this.handleUpdate}\r\n               buttonCaption='Update'\r\n               onClear={() => this.clearForm()}\r\n               isAlertOpen={isAlertOpen}\r\n               closeAlert={() => this.closeAlert()}\r\n            />\r\n            <ProjectDialog\r\n               isOpen={this.state.isAddDialogOpen}\r\n               toOpen={() => this.openDialog()}\r\n               toClose={() => this.closeDialog()}\r\n               name={name}\r\n               manager={manager}\r\n               onChange={this.onChange}\r\n               handleSubmit={this.handleSubmit}\r\n               buttonCaption='Add'\r\n               onClear={() => this.clearForm()}\r\n               isAlertOpen={isAlertOpen}\r\n               closeAlert={() => this.closeAlert()}\r\n            />\r\n            <Alert\r\n               isOpen={this.state.isDeleteAlertOpen}\r\n               confirmButtonText='Delete'\r\n               onConfirm={() => this.deleteUser(selected._id)}\r\n               cancelButtonText='Cancel'\r\n               onCancel={() => this.closeDeleteAlert()}\r\n               intent='danger'\r\n               icon='issue'\r\n               ussePortal={\r\n                  <Portal container={document.getElementById('AdminPanel')} />\r\n               }\r\n            >\r\n               <H5>Are you sure that you want to delete this user?</H5>\r\n               <strong>{`User: ${selected.username}`}</strong>\r\n               <p></p>\r\n               <strong\r\n                  className={Classes.TEXT_MUTED}\r\n               >{`Will be permanentyly deleted...`}</strong>\r\n            </Alert>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport TableCell from './TableCell';\r\n\r\nexport default class ReportsTable extends Component {\r\n   state = {\r\n      selected: '',\r\n      headers: [\r\n         { text: '#', center: true },\r\n         { text: 'Project' },\r\n         { text: 'KPI' },\r\n         { text: 'Reported By' },\r\n         { text: 'Result', center: true },\r\n         { text: 'Completed', center: true },\r\n         { text: 'Status', center: true },\r\n         { text: 'Reported At' }\r\n      ]\r\n   };\r\n\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n   renderTableRows() {\r\n      const { data } = this.props;\r\n      return data.map((report, key) => {\r\n         return (\r\n            <tr\r\n               key={report._id}\r\n               onClick={e => this.handleSelection(e, report)}\r\n               className={` ${\r\n                  this.state.selected._id === report._id ? 'bg-selected' : ''\r\n               }`}\r\n            >\r\n               <TableCell center key={key} value={key} />\r\n               <TableCell value={report.kpi.project.name} />\r\n               <TableCell value={report.kpi.name} />\r\n               <TableCell value={report.reportedBy.name} />\r\n               <TableCell value={report.result} center />\r\n               <TableCell\r\n                  value={this.getCompletedValue(report.completed)}\r\n                  center\r\n               />\r\n               <TableCell value={report.status} center />\r\n               <TableCell value={new Date(report.reportedAt).toDateString()} />\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   getCompletedValue(val) {\r\n      if (val === null) {\r\n         return 0;\r\n      }\r\n      let v = val.toFixed(2) * 100;\r\n      return v.toFixed(0) + '%';\r\n   }\r\n\r\n   handleSelection(e, report) {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      if (selected._id !== report._id) {\r\n         this.props.onSelection(report, false);\r\n         this.setState({\r\n            selected: report\r\n         });\r\n         return;\r\n      }\r\n      this.props.onSelection({}, true);\r\n      this.setState({ selected: {} });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Table\r\n            headers={this.state.headers}\r\n            rows={this.renderTableRows()}\r\n            errorMsg={this.props.errorMsg}\r\n            isLoading={this.props.isLoading}\r\n            onRefresh={this.props.onRefresh}\r\n         />\r\n      );\r\n   }\r\n}\r\nReportsTable.defaultProps = {\r\n   data: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect, Spinner, Button, Alignment } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class KPIsOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      isLoading: true,\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         this.setLoading(true);\r\n         var result = await Client.Services.KPIsService.getKPIs();\r\n         console.log(result.data);\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n   setLoading(loading) {\r\n      this.setState({ isLoading: loading });\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.project.name + ' @ ' + option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      const { isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <Button\r\n               icon={<Spinner size={20} />}\r\n               disabled={isLoading}\r\n               alignText={Alignment.LEFT}\r\n               fill\r\n            >\r\n               KPIs...\r\n            </Button>\r\n         );\r\n      }\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable,\r\n   NumericInput,\r\n   Icon,\r\n   Spinner\r\n} from '@blueprintjs/core';\r\nimport { DateInput } from '@blueprintjs/datetime';\r\n\r\nimport KPIsOptions from '../Selects/KPIsOptions';\r\n\r\nexport default class ReportForm extends Component {\r\n   renderRest() {\r\n      if (this.props.target >= this.props.result) {\r\n         return (\r\n            <div>\r\n               <tr>\r\n                  <td>Passed</td>\r\n                  <td>Status</td>\r\n               </tr>\r\n               <tr>\r\n                  <td className='text-center'>\r\n                     <Icon icon='tick' intent='success' />\r\n                  </td>\r\n                  <td className='text-center'>\r\n                     <Spinner value={this.props.result / this.props.target} />\r\n                  </td>\r\n               </tr>\r\n            </div>\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         kpi,\r\n         reportedBy,\r\n         result,\r\n         reportedAt,\r\n         selectedKPI\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createProjectForm'>\r\n               <HTMLTable condensed>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='KPI'\r\n                           labelFor='kpi'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <KPIsOptions\r\n                           id='kpi'\r\n                           ref='kpi'\r\n                           onChange={onChange}\r\n                           vale={kpi}\r\n                           selected={selectedKPI}\r\n                           fill\r\n                           placeholder='Select KPI...'\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Name'\r\n                           labelFor='name'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <InputGroup\r\n                           id='reportedBy'\r\n                           onChange={onChange}\r\n                           placeholder='Reported By...'\r\n                           type='text'\r\n                           value={reportedBy}\r\n                           disabled\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Reported At'\r\n                           labelFor='reportedAt'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <DateInput\r\n                           formatDate={reportedAt =>\r\n                              reportedAt.toLocaleDateString()\r\n                           }\r\n                           onChange={this.props.handleDateChange}\r\n                           parseDate={reportedAt =>\r\n                              new Date(reportedAt).toLocaleDateString()\r\n                           }\r\n                           placeholder='DD/MM/YYYY'\r\n                           defaultValue={new Date()}\r\n                           value={reportedAt}\r\n                           minDate={new Date()}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Result'\r\n                           labelFor='result'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <NumericInput\r\n                           id='result'\r\n                           onValueChange={this.props.onResultValueChange}\r\n                           placeholder='Result...'\r\n                           type='number'\r\n                           value={result}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n\r\n                  {this.renderRest()}\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nReportForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\r\nimport ReportDialog from '../Forms/ReportForm';\r\n\r\nexport default class UserDialog extends Component {\r\n   render() {\r\n      return (\r\n         <div id='userDialog'>\r\n            <Dialog\r\n               isOpen={this.props.isOpen}\r\n               onClose={this.props.toClose}\r\n               toggle={this.props.toOpen}\r\n            >\r\n               <Card>\r\n                  <div className='card-body'>\r\n                     <div id={this.props.id}>\r\n                        <ReportDialog\r\n                           onChange={this.props.onChange}\r\n                           onResultValueChange={this.props.onResultValueChange}\r\n                           onSubmit={this.props.handleSubmit}\r\n                           buttonCaption={this.props.buttonCaption}\r\n                           onClear={this.props.onClear}\r\n                           kpi={this.props.kpi}\r\n                           reportedBy={this.props.reportedBy}\r\n                           result={this.props.result}\r\n                           completed={this.props.completed}\r\n                           status={this.props.status}\r\n                           reportedAt={this.props.reportedAt}\r\n                           selectedKPI={this.props.selectedKPI}\r\n                           handleDateChange={this.props.handleDateChange}\r\n                        />\r\n                     </div>\r\n                  </div>\r\n               </Card>\r\n               <Alert\r\n                  isOpen={this.props.isAlertOpen}\r\n                  confirmButtonText='Clear form'\r\n                  onConfirm={this.props.onClear}\r\n                  cancelButtonText='Cancel'\r\n                  onCancel={this.props.closeAlert}\r\n                  intent='danger'\r\n                  icon='issue'\r\n                  ussePortal={\r\n                     <Portal\r\n                        container={document.getElementById('userDialog')}\r\n                     />\r\n                  }\r\n               >\r\n                  <H5>{this.props.errorMessage}</H5>\r\n                  <strong>Do you want to clear the data?</strong>\r\n               </Alert>\r\n            </Dialog>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {\r\n   Tabs,\r\n   Tab,\r\n   H2,\r\n   Alert,\r\n   Portal,\r\n   H5,\r\n   Classes,\r\n   Card\r\n} from '@blueprintjs/core';\r\nimport ReportsTable from '../../components/Tables/ReportsTable';\r\nimport ReportDialog from '../../components/Dialogs/ReportDialog';\r\nimport Client from '../../Modules/Client/Client';\r\nimport TableControllers from '../../components/Tables/TableControllers';\r\n\r\nexport default class Reports extends Component {\r\n   state = {\r\n      activeTabID: 'Reports',\r\n      selectedTabId: 'Reports',\r\n      isLoading: true,\r\n      data: [],\r\n      openAlert: true,\r\n      errorMessage: '',\r\n      isEmployeesDialogOpen: false,\r\n      kpi: '',\r\n      reportedBy: '',\r\n      result: 0,\r\n      completed: '',\r\n      status: '',\r\n      reportedAt: new Date(),\r\n      selected: {},\r\n      emp: {},\r\n      isUserEditDialogOpen: false,\r\n      isDeleteAlertOpen: false,\r\n      canEdit: !false,\r\n      canDelete: !false\r\n   };\r\n\r\n   getSelected = (emp, isSelected) => {\r\n      this.setState({\r\n         selected: emp,\r\n         canEdit: isSelected,\r\n         canDelete: isSelected\r\n      });\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.getData();\r\n      this.setUserId();\r\n   }\r\n\r\n   async getData() {\r\n      this.setLoading(true);\r\n      var result;\r\n      try {\r\n         //this.resetErrorMsg();\r\n         result = await Client.Services.ReportingService.getReports();\r\n         this.setState({\r\n            data: result.data\r\n         });\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ errorMsg: err.response });\r\n         Client.Notifications.alert('Error while loading reports');\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   async setUserId() {\r\n      this.setLoading(true);\r\n      var result;\r\n      try {\r\n         result = await Client.Services.EmployeesService.getEmployeeByUserID(\r\n            Client.User.getUserId()\r\n         );\r\n         this.setState({\r\n            emp: result.data,\r\n            reportedBy: result.data._id\r\n         });\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ errorMsg: err.response });\r\n         Client.Notifications.alert('Error while loading Employee info');\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   async deleteReportByID(id) {\r\n      var result;\r\n      try {\r\n         this.resetErrorMsg();\r\n         result = await Client.Services.ReportingService.deleteReportByID(id);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success('Report removed successfully');\r\n         }\r\n      } catch (err) {\r\n         this.setState({ errorMsg: err.response.status });\r\n         Client.Notifications.alert('Error, cannot delete Report');\r\n      } finally {\r\n         this.getData();\r\n         this.closeDeleteAlert();\r\n      }\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n      const { kpi, emp, result, completed, status, reportedAt } = this.state;\r\n      var errorMsg = 'Unknown Error';\r\n      let report = await Client.Services.ReportingService.createReportDTO(\r\n         kpi,\r\n         emp._id,\r\n         result,\r\n         completed,\r\n         status,\r\n         reportedAt\r\n      );\r\n      try {\r\n         let result = await Client.Services.ReportingService.saveReport(report);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Report successfully saved`);\r\n            this.getData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving the report`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n   handleUpdate = async e => {\r\n      e.preventDefault();\r\n      const { emp, kpi, completed, status, reportedAt } = this.state;\r\n\r\n      var errorMsg = 'Unknown Error';\r\n      try {\r\n         let report = await Client.Services.ReportingService.createReportDTO(\r\n            kpi,\r\n            emp._id,\r\n            completed,\r\n            status,\r\n            reportedAt\r\n         );\r\n         let result = await Client.Services.ReportingService.updateReport(\r\n            report\r\n         );\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Report updated successfully`);\r\n            this.getData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while updating the report`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n\r\n   handleResultValueChange = number => {\r\n      this.setState({ result: number });\r\n   };\r\n\r\n   handleValueChange = number => {\r\n      this.setState({ result: number });\r\n   };\r\n\r\n   handleDateChange = newFromDate => {\r\n      this.setState({ time_from: newFromDate });\r\n   };\r\n   openAlert(msg) {\r\n      this.setState({ isAlertOpen: true, errorMessage: msg });\r\n   }\r\n   closeAlert() {\r\n      this.setState({ isAlertOpen: false, errorMessage: '' });\r\n   }\r\n\r\n   resetErrorMsg() {\r\n      this.setState({ errorMessage: '' });\r\n   }\r\n\r\n   onChange = e => {\r\n      const state = this.state;\r\n      state[e.target.id] = e.target.value;\r\n      this.setState(state);\r\n   };\r\n\r\n   openDialog() {\r\n      this.setState({\r\n         isEmployeesDialogOpen: true\r\n      });\r\n   }\r\n   closeEmployeesDialog() {\r\n      this.setState({\r\n         isEmployeesDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openEditDialog = async e => {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      try {\r\n         let result = await Client.Services.ReportingService.getReportById(\r\n            selected._id\r\n         );\r\n         if (result.status === 200) {\r\n            let report = result.data;\r\n            this.setState({\r\n               isUserEditDialogOpen: true,\r\n               kpi: report.kpi._id,\r\n               reportedBy: report.reportedBy.name,\r\n               result: report.result,\r\n               completed: report.completed,\r\n               status: report.status,\r\n               reportedAt: report.reportedAt\r\n            });\r\n         }\r\n      } catch (err) {\r\n         console.log(err);\r\n         this.setState({\r\n            isUserEditDialogOpen: true,\r\n            kpi: selected.kpi._id,\r\n            reportedBy: selected.reportedBy.name,\r\n            result: selected.result,\r\n            completed: selected.completed,\r\n            status: selected.status,\r\n            reportedAt: selected.reportedAt\r\n         });\r\n      }\r\n   };\r\n   closeUserEditDialog() {\r\n      this.setState({\r\n         isUserEditDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: true\r\n      });\r\n   }\r\n   closeDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: false\r\n      });\r\n   }\r\n\r\n   setLoading(loading) {\r\n      this.setState({\r\n         isLoading: loading\r\n      });\r\n   }\r\n\r\n   handleTabChange = activeTabID => {\r\n      this.setState({\r\n         activeTabID: activeTabID,\r\n         selectedTabId: activeTabID\r\n      });\r\n   };\r\n   clearForm() {\r\n      this.setState({\r\n         kpi: '',\r\n         reportedBy: '',\r\n         result: '',\r\n         completed: '',\r\n         status: '',\r\n         reportedAt: '',\r\n         isAlertOpen: false,\r\n         errorMessage: ''\r\n      });\r\n   }\r\n\r\n   renderControlls() {\r\n      if (this.state.selectedTabId === 'Reports') {\r\n         return (\r\n            <TableControllers\r\n               onEdit={this.openEditDialog}\r\n               canEdit={this.state.canEdit}\r\n               onAdd={() => this.openDialog()}\r\n               onDelete={() => this.openDeleteAlert()}\r\n               canDelete={this.state.canDelete}\r\n               onRefresh={() => this.getData()}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         emp,\r\n         data,\r\n         isLoading,\r\n         kpi,\r\n         result,\r\n         completed,\r\n         status,\r\n         reportedAt,\r\n         isAlertOpen,\r\n         selected\r\n      } = this.state;\r\n\r\n      return (\r\n         <div id='AdminPanel'>\r\n            <div className='mt-2'>\r\n               <H2>Reports Panel</H2>\r\n            </div>\r\n            <Tabs\r\n               onChange={this.handleTabChange}\r\n               selectedTabId={this.state.selectedTabId}\r\n               large\r\n            >\r\n               <Tab\r\n                  id='Reports'\r\n                  title='Reports'\r\n                  panel={\r\n                     <Card>\r\n                        <ReportsTable\r\n                           data={data}\r\n                           onRefresh={() => this.getData()}\r\n                           isLoading={isLoading}\r\n                           onSelection={this.getSelected}\r\n                        />\r\n                     </Card>\r\n                  }\r\n               />\r\n               <Tabs.Expander />\r\n               {this.renderControlls()}\r\n            </Tabs>\r\n            <ReportDialog\r\n               isOpen={this.state.isUserEditDialogOpen}\r\n               toOpen={() => this.openEditDialog()}\r\n               toClose={() => this.closeUserEditDialog()}\r\n               kpi={kpi}\r\n               selectedKPI={kpi}\r\n               reportedBy={emp.name}\r\n               result={result}\r\n               completed={completed}\r\n               status={status}\r\n               reportedAt={reportedAt}\r\n               onChange={this.onChange}\r\n               handleDateFromChange={this.handleDateChange}\r\n               onResultValueChange={this.handleValueChange}\r\n               handleSubmit={this.handleUpdate}\r\n               buttonCaption='Update'\r\n               onClear={() => this.clearForm()}\r\n               isAlertOpen={isAlertOpen}\r\n               closeAlert={() => this.closeAlert()}\r\n            />\r\n\r\n            <ReportDialog\r\n               isOpen={this.state.isEmployeesDialogOpen}\r\n               toOpen={() => this.openDialog()}\r\n               toClose={() => this.closeEmployeesDialog()}\r\n               kpi={kpi}\r\n               reportedBy={emp.name}\r\n               result={result}\r\n               completed={completed}\r\n               status={status}\r\n               reportedAt={reportedAt}\r\n               onChange={this.onChange}\r\n               handleDateFromChange={this.handleDateChange}\r\n               onResultValueChange={this.handleValueChange}\r\n               handleSubmit={this.handleSubmit}\r\n               buttonCaption='Add'\r\n               onClear={() => this.clearForm()}\r\n               isAlertOpen={isAlertOpen}\r\n               closeAlert={() => this.closeAlert()}\r\n            />\r\n            <Alert\r\n               isOpen={this.state.isDeleteAlertOpen}\r\n               confirmButtonText='Delete'\r\n               onConfirm={() => this.deleteReportByID(selected._id)}\r\n               cancelButtonText='Cancel'\r\n               onCancel={() => this.closeDeleteAlert()}\r\n               intent='danger'\r\n               icon='issue'\r\n               ussePortal={\r\n                  <Portal container={document.getElementById('ReportsPanel')} />\r\n               }\r\n            >\r\n               <H5>Are you sure that you want to delete this user?</H5>\r\n               <strong>{`Report`}</strong>\r\n               <p></p>\r\n               <strong\r\n                  className={Classes.TEXT_MUTED}\r\n               >{`Will be permanentyly deleted...`}</strong>\r\n            </Alert>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport TableCell from './TableCell';\r\n\r\nexport default class UsersTable extends Component {\r\n   state = {\r\n      selected: '',\r\n      headers: [\r\n         { text: '#', center: true },\r\n         { text: 'User name' },\r\n         { text: 'Email' },\r\n         { text: 'Role' },\r\n         { text: 'Active', center: true }\r\n      ]\r\n   };\r\n\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n   renderTableRows() {\r\n      const { usersData } = this.props;\r\n      return usersData.map((user, key) => {\r\n         return (\r\n            <tr\r\n               key={user._id}\r\n               onClick={e => this.handleSelection(e, user)}\r\n               className={`${\r\n                  this.state.selected._id === user._id ? 'bg-selected' : ''\r\n               }`}\r\n            >\r\n               <TableCell key={key} value={key} center />\r\n               <TableCell value={user.username} />\r\n               <TableCell value={user.email} />\r\n               <TableCell value={user.usertype} />\r\n               <TableCell value={user.active} center />\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   handleSelection(e, user) {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      if (selected._id !== user._id) {\r\n         this.props.onSelection(user, false);\r\n         this.setState({\r\n            selected: user\r\n         });\r\n         return;\r\n      }\r\n      this.props.onSelection({}, true);\r\n      this.setState({ selected: {} });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Table\r\n            headers={this.state.headers}\r\n            rows={this.renderTableRows()}\r\n            errorMsg={this.props.errorMsg}\r\n            isLoading={this.props.isLoading}\r\n            onRefresh={this.props.onRefresh}\r\n         />\r\n      );\r\n   }\r\n}\r\nUsersTable.defaultProps = {\r\n   usersData: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect } from '@blueprintjs/core';\r\n\r\nexport default class UserTypesOptions extends Component {\r\n   state = {\r\n      roles: ['standard', 'manager', 'director', 'admin'],\r\n      usertype: this.props.usertype\r\n   };\r\n\r\n   renderOptions() {\r\n      return this.state.roles.map((option, key) => {\r\n         return (\r\n            <option key={key} value={option}>\r\n               {option}\r\n            </option>\r\n         );\r\n      });\r\n   }\r\n\r\n   renderPlaceholder() {\r\n      if (this.props.selected == null) {\r\n         if (this.props.placeholder !== null) {\r\n            return (\r\n               <option selected hidden disabled>\r\n                  {this.props.placeholder}\r\n               </option>\r\n            );\r\n         }\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            selected={this.props.selected}\r\n            value={this.props.selected}\r\n         >\r\n            {this.renderPlaceholder()}\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\nUserTypesOptions.defaultProps = {\r\n   placeholder: null,\r\n   usertype: 'standard'\r\n};\r\n","import React, { Component } from 'react';\r\nimport {\r\n   Button,\r\n   FormGroup,\r\n   InputGroup,\r\n   ButtonGroup,\r\n   Switch\r\n} from '@blueprintjs/core';\r\nimport UserTypeOptions from '../../components/Selects/UserTypeOptions';\r\n\r\nexport default class UserForm extends Component {\r\n   render() {\r\n      return (\r\n         <div>\r\n            <FormGroup\r\n               label='Username'\r\n               labelFor='username'\r\n               labelInfo='(required)'\r\n            >\r\n               <InputGroup\r\n                  id='username'\r\n                  leftIcon='user'\r\n                  onChange={this.props.onChange}\r\n                  placeholder='Username...'\r\n                  type='text'\r\n                  value={this.props.username}\r\n                  fill\r\n               />\r\n            </FormGroup>\r\n            <FormGroup label='Email' labelFor='email' labelInfo='(required)'>\r\n               <InputGroup\r\n                  id='email'\r\n                  leftIcon='envelope'\r\n                  onChange={this.props.onChange}\r\n                  placeholder='Email...'\r\n                  type='email'\r\n                  value={this.props.email}\r\n                  fill\r\n               />\r\n            </FormGroup>\r\n            <FormGroup\r\n               label='Password'\r\n               labelFor='password'\r\n               labelInfo='(required)'\r\n            >\r\n               <InputGroup\r\n                  id='password'\r\n                  leftIcon='key'\r\n                  onChange={this.props.onChange}\r\n                  placeholder='Username...'\r\n                  type='password'\r\n                  value={this.props.password}\r\n                  fill\r\n               />\r\n            </FormGroup>\r\n\r\n            <FormGroup\r\n               label='User Type'\r\n               labelFor='usertype'\r\n               labelInfo='(required)'\r\n            >\r\n               <UserTypeOptions\r\n                  id='usertype'\r\n                  onChange={this.props.onChange}\r\n                  value={this.props.usertype}\r\n                  selected={this.props.usertype}\r\n                  placeholder='Select user type'\r\n                  fill\r\n               />\r\n            </FormGroup>\r\n            <div className='text-right'>\r\n               <FormGroup label='Active' labelFor='active'>\r\n                  <Switch\r\n                     id='active'\r\n                     onChange={this.props.onChange}\r\n                     value={this.props.active}\r\n                     checked={this.props.active}\r\n                     defaultChecked={true}\r\n                     fill\r\n                  />\r\n               </FormGroup>\r\n            </div>\r\n            <div className='text-right'>\r\n               <ButtonGroup>\r\n                  <Button onClick={this.props.onClear}>\r\n                     {this.props.clearButtonCaption}\r\n                  </Button>\r\n                  <Button onClick={this.props.onClick}>\r\n                     {this.props.buttonCaption}\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nUserForm.defaultProps = {\r\n   clearButtonCaption: 'Clear',\r\n   buttonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\r\nimport UserForm from '../Forms/UserForm';\r\n\r\nexport default class UserDialog extends Component {\r\n   render() {\r\n      return (\r\n         <div id='userDialog'>\r\n            <Dialog\r\n               isOpen={this.props.isOpen}\r\n               onClose={this.props.toClose}\r\n               toggle={this.props.toOpen}\r\n            >\r\n               <Card>\r\n                  <div className='card-body'>\r\n                     <div id={this.props.id}>\r\n                        <UserForm\r\n                           email={this.props.email}\r\n                           username={this.props.username}\r\n                           password={this.props.password}\r\n                           usertype={this.props.usertype}\r\n                           active={this.props.active}\r\n                           onChange={this.props.onChange}\r\n                           onClick={this.props.handleSubmit}\r\n                           buttonCaption={this.props.buttonCaption}\r\n                           onClear={this.props.onClear}\r\n                        />\r\n                     </div>\r\n                  </div>\r\n               </Card>\r\n               <Alert\r\n                  isOpen={this.props.isAlertOpen}\r\n                  confirmButtonText='Clear form'\r\n                  onConfirm={this.props.onClear}\r\n                  cancelButtonText='Cancel'\r\n                  onCancel={this.props.closeAlert}\r\n                  intent='danger'\r\n                  icon='issue'\r\n                  ussePortal={\r\n                     <Portal\r\n                        container={document.getElementById('userDialog')}\r\n                     />\r\n                  }\r\n               >\r\n                  <H5>{this.props.errorMessage}</H5>\r\n                  <strong>Do you want to clear the data?</strong>\r\n               </Alert>\r\n            </Dialog>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Alert, Portal, H5, Classes } from '@blueprintjs/core';\r\n\r\nexport default class BeforeDeleteAlert extends Component {\r\n   render() {\r\n      const { isOpen, onConfirm, onCancel, portalID, info } = this.props;\r\n      return (\r\n         <Alert\r\n            isOpen={isOpen}\r\n            confirmButtonText='Delete'\r\n            onConfirm={onConfirm}\r\n            cancelButtonText='Cancel'\r\n            onCancel={onCancel}\r\n            intent='danger'\r\n            icon='issue'\r\n            ussePortal={\r\n               <Portal container={document.getElementById(portalID)} />\r\n            }\r\n         >\r\n            <H5>Are you sure that you want to delete?</H5>\r\n            <strong>{info}</strong>\r\n            <p></p>\r\n            <strong\r\n               className={Classes.TEXT_MUTED}\r\n            >{`Will be permanentyly deleted...`}</strong>\r\n         </Alert>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Tabs, Tab, H2, Card } from '@blueprintjs/core';\r\nimport UsersTable from '../../components/Tables/UsersTable';\r\nimport UserDialog from '../../components/Dialogs/UserDialog';\r\nimport Client from '../../Modules/Client/Client';\r\nimport TableControllers from '../../components/Tables/TableControllers';\r\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\r\n\r\nexport default class AdminPanel extends Component {\r\n   state = {\r\n      activeTabID: 'Users',\r\n      selectedTabId: 'Users',\r\n      isLoading: true,\r\n      users: [],\r\n      openAlert: true,\r\n      errorMessage: '',\r\n      isUserDialogOpen: false,\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      usertype: 'standard',\r\n      active: false,\r\n      selected: {},\r\n      isUserEditDialogOpen: false,\r\n      isDeleteAlertOpen: false,\r\n      canEdit: !false,\r\n      canDelete: !false\r\n   };\r\n\r\n   getSelected = (user, isSelected) => {\r\n      this.setState({\r\n         selected: user,\r\n         canEdit: isSelected,\r\n         canDelete: isSelected\r\n      });\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.getUsersData();\r\n   }\r\n\r\n   async getUsersData() {\r\n      this.setLoading(true);\r\n      var result;\r\n      try {\r\n         //this.resetErrorMsg();\r\n         result = await Client.Services.UsersService.getUsers();\r\n         this.setState({\r\n            users: result.data\r\n         });\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ errorMsg: err.response });\r\n         Client.Notifications.alert('Error while loading users list');\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   async deleteUser(id) {\r\n      var result;\r\n      try {\r\n         this.resetErrorMsg();\r\n         result = await Client.Services.UsersService.deleteUser(id);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success('User removed successfully');\r\n         }\r\n      } catch (err) {\r\n         this.setState({ errorMsg: err.response.status });\r\n         Client.Notifications.alert('Error, cannot delete user');\r\n      } finally {\r\n         this.getUsersData();\r\n         this.closeDeleteAlert();\r\n      }\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n      const { email, username, usertype, password, active } = this.state;\r\n      var errorMsg = 'Unknown Error';\r\n      let usr = Client.Services.UsersService.createUserDTO(\r\n         username,\r\n         email,\r\n         password,\r\n         usertype,\r\n         active\r\n      );\r\n      try {\r\n         let result = await Client.Services.UsersService.saveNewUser(usr);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`User ${username} successfully saved`);\r\n            this.getUsersData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${username} user`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n\r\n   handleUpdate = async e => {\r\n      e.preventDefault();\r\n      const {\r\n         email,\r\n         username,\r\n         usertype,\r\n         password,\r\n         active,\r\n         selected\r\n      } = this.state;\r\n      var errorMsg = 'Unknown Error';\r\n      let usr = Client.Services.UsersService.createUserDTO(\r\n         username,\r\n         email,\r\n         password,\r\n         usertype,\r\n         active\r\n      );\r\n      usr.user._id = selected._id;\r\n      console.log(usr);\r\n      try {\r\n         let result = await Client.Services.UsersService.updateUser(usr);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`User ${username} successfully saved`);\r\n            this.getUsersData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${username} user`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n\r\n   resetErrorMsg() {\r\n      this.setState({ errorMessage: '' });\r\n   }\r\n   openAlert(msg) {\r\n      this.setState({ isAlertOpen: true, errorMessage: msg });\r\n   }\r\n   closeAlert() {\r\n      this.setState({ isAlertOpen: false, errorMessage: '' });\r\n   }\r\n\r\n   onChange = e => {\r\n      const state = this.state;\r\n      if (e.target.id === 'active') {\r\n         let a = state.active;\r\n         this.setState({ active: !a });\r\n         return;\r\n      }\r\n      state[e.target.id] = e.target.value;\r\n      this.setState(state);\r\n   };\r\n\r\n   openUserDialog() {\r\n      this.setState({\r\n         isUserDialogOpen: true\r\n      });\r\n   }\r\n   closeUserDialog() {\r\n      this.setState({\r\n         isUserDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openUserEditDialog() {\r\n      let selected = this.state.selected;\r\n\r\n      this.setState({\r\n         isUserEditDialogOpen: true,\r\n         username: selected.username,\r\n         email: selected.email,\r\n         password: '',\r\n         usertype: selected.type\r\n      });\r\n   }\r\n   closeUserEditDialog() {\r\n      this.setState({\r\n         isUserEditDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: true\r\n      });\r\n   }\r\n   closeDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: false\r\n      });\r\n   }\r\n\r\n   setLoading(loading) {\r\n      this.setState({\r\n         isLoading: loading\r\n      });\r\n   }\r\n\r\n   handleTabChange = activeTabID => {\r\n      this.setState({\r\n         activeTabID: activeTabID,\r\n         selectedTabId: activeTabID\r\n      });\r\n   };\r\n   clearForm() {\r\n      this.setState({\r\n         email: '',\r\n         username: '',\r\n         usertype: 'standard',\r\n         password: '',\r\n         isAlertOpen: false,\r\n         errorMessage: ''\r\n      });\r\n   }\r\n\r\n   renderControlls() {\r\n      if (this.state.selectedTabId === 'Users') {\r\n         return (\r\n            <TableControllers\r\n               onEdit={() => this.openUserEditDialog()}\r\n               canEdit={this.state.canEdit}\r\n               onAdd={() => this.openUserDialog()}\r\n               onDelete={() => this.openDeleteAlert()}\r\n               canDelete={this.state.canDelete}\r\n               onRefresh={() => this.getUsersData()}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         users,\r\n         isLoading,\r\n         email,\r\n         username,\r\n         usertype,\r\n         password,\r\n         active,\r\n         isAlertOpen,\r\n         selected\r\n      } = this.state;\r\n\r\n      return (\r\n         <div id='AdminPanel'>\r\n            <div className='mt-2'>\r\n               <H2>Admin Panel</H2>\r\n            </div>\r\n            <Tabs\r\n               onChange={this.handleTabChange}\r\n               selectedTabId={this.state.selectedTabId}\r\n               large\r\n            >\r\n               <Tab\r\n                  id='Users'\r\n                  title='Users'\r\n                  panel={\r\n                     <Card>\r\n                        <UsersTable\r\n                           usersData={users}\r\n                           onRefresh={() => this.getUsersData()}\r\n                           isLoading={isLoading}\r\n                           onSelection={this.getSelected}\r\n                        />\r\n                        <UserDialog\r\n                           isOpen={this.state.isUserEditDialogOpen}\r\n                           toOpen={() => this.openUserEditDialog()}\r\n                           toClose={() => this.closeUserEditDialog()}\r\n                           email={email}\r\n                           username={username}\r\n                           password={password}\r\n                           usertype={usertype}\r\n                           active={active}\r\n                           onChange={this.onChange}\r\n                           handleSubmit={this.handleUpdate}\r\n                           buttonCaption='Update'\r\n                           onClear={() => this.clearForm()}\r\n                           isAlertOpen={isAlertOpen}\r\n                           closeAlert={() => this.closeAlert()}\r\n                        />\r\n                        <UserDialog\r\n                           isOpen={this.state.isUserDialogOpen}\r\n                           toOpen={() => this.openUserDialog()}\r\n                           toClose={() => this.closeUserDialog()}\r\n                           email={email}\r\n                           username={username}\r\n                           password={password}\r\n                           usertype={usertype}\r\n                           active={active}\r\n                           onChange={this.onChange}\r\n                           handleSubmit={this.handleSubmit}\r\n                           buttonCaption='Add'\r\n                           onClear={() => this.clearForm()}\r\n                           isAlertOpen={isAlertOpen}\r\n                           closeAlert={() => this.closeAlert()}\r\n                        />\r\n                        <BeforeDeleteAlert\r\n                           isOpen={this.state.isDeleteAlertOpen}\r\n                           onConfirm={() => this.deleteUser(selected._id)}\r\n                           onCancel={() => this.closeDeleteAlert()}\r\n                           portalID='AdminPanel'\r\n                           info={`User: ${selected.username}`}\r\n                        />\r\n                     </Card>\r\n                  }\r\n               />\r\n\r\n               <Tabs.Expander />\r\n               {this.renderControlls()}\r\n            </Tabs>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './StdCard.css';\r\n\r\nexport default class CardHeader extends Component {\r\n   render() {\r\n      return (\r\n         <div\r\n            className={`bp3-card-header ${\r\n               this.props.isBodyOpen ? '' : 'bp3-border-collapsed'\r\n            }`}\r\n         >\r\n            <div className='bp3-card-header-content'>{this.props.children}</div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nCardHeader.defaultProps = {\r\n   isBodyOpen: true\r\n};\r\n\r\n/*\r\n<div className='bp3-card-header'>\r\n   <div className='bp3-card-header-content'>{this.props.children}</div>\r\n</div>\r\n*/\r\n","import React, { Component } from 'react';\r\nimport './StdCard.css';\r\n\r\nexport default class CardBody extends Component {\r\n   render() {\r\n      return <div className='bp3-card-body'>{this.props.children}</div>;\r\n   }\r\n}\r\n\r\n//return <div className='bp3-card-body'>{this.props.children}</div>;\r\n","import React, { Component } from 'react';\r\nimport {\r\n   Line,\r\n   Bar,\r\n   Pie,\r\n   Doughnut,\r\n   HorizontalBar,\r\n   Radar,\r\n   defaults\r\n} from 'react-chartjs-2';\r\nimport UIManager from '../../../Modules/UIManager/UIManager';\r\n\r\nexport default class Chart_ extends Component {\r\n   state = {\r\n      theme: UIManager.getTheme()\r\n   };\r\n\r\n   componentWillReceiveProps() {\r\n      this.setChartFontColor();\r\n   }\r\n\r\n   setChartFontColor() {\r\n      const { theme } = this.state;\r\n\r\n      if (theme === 'dark') {\r\n         defaults.global.defaultFontColor = 'lightgray';\r\n         defaults.global.legend.fontColor = 'white';\r\n      }\r\n      if (theme === 'light') {\r\n         defaults.global.defaultFontColor = 'black';\r\n         defaults.global.legend.fontColor = 'black';\r\n      }\r\n   }\r\n\r\n   getChartOption(\r\n      _displyGridLinesX = true,\r\n      _displyGridLinesY = true,\r\n      _isDoughnut = false\r\n   ) {\r\n      this.setChartFontColor();\r\n      let _doughnutHole = 0;\r\n      if (_isDoughnut) _doughnutHole = 75;\r\n      let chartOption = {\r\n         maintainAspectRatio: true,\r\n         legend: {\r\n            labels: {\r\n               //fontColor: \"black\"\r\n            }\r\n         },\r\n         responsive: true,\r\n         cutoutPercentage: _doughnutHole,\r\n         scales: {\r\n            xAxes: [\r\n               {\r\n                  ticks: {\r\n                     display: !_isDoughnut\r\n                  },\r\n                  gridLines: {\r\n                     display: _displyGridLinesX,\r\n                     drawBorder: false,\r\n                     color: 'rgb(0,0,0,0.1)'\r\n                  }\r\n               }\r\n            ],\r\n            yAxes: [\r\n               {\r\n                  ticks: {\r\n                     display: !_isDoughnut\r\n                  },\r\n                  gridLines: {\r\n                     display: _displyGridLinesY,\r\n                     drawBorder: false,\r\n                     color: 'rgb(0,0,0,0.1)'\r\n                  }\r\n               }\r\n            ]\r\n         }\r\n      };\r\n      return chartOption;\r\n   }\r\n\r\n   //chart factory\r\n   getChart(chartType, data, height, width) {\r\n      if ((chartType === 'Bar') | (chartType === 'bar')) {\r\n         return (\r\n            <Bar\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if (\r\n         (chartType === 'HorizontalBar') |\r\n         (chartType === 'horizontalBar') |\r\n         (chartType === 'hBar')\r\n      ) {\r\n         return (\r\n            <HorizontalBar\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Line') | (chartType === 'line')) {\r\n         return (\r\n            <Line\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Pie') | (chartType === 'pie')) {\r\n         return (\r\n            <Pie\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Radar') | (chartType === 'radar')) {\r\n         return (\r\n            <Radar\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Doughnut') | (chartType === 'doughnut')) {\r\n         return (\r\n            <Doughnut\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const { chartType, data, height, width } = this.props;\r\n\r\n      return <div>{this.getChart(chartType, data, height, width)}</div>;\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Card, Icon, Dialog } from '@blueprintjs/core';\r\nimport CardHeader from '../CardHeader';\r\nimport CardBody from '../CardBody';\r\nimport Chart from '../../Charts/Chart/Chart';\r\n\r\nexport default class CardWithChart extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         modal: false\r\n      };\r\n      this.windowMaximize = this.windowMaximize.bind(this);\r\n   }\r\n\r\n   toggle = () => {\r\n      this.setState(state => ({ collapse: !state.collapse }));\r\n   };\r\n\r\n   windowMaximize() {\r\n      this.setState(state => ({\r\n         modal: !state.modal\r\n      }));\r\n   }\r\n\r\n   render() {\r\n      const { headerText, chartType, data, height, width } = this.props;\r\n\r\n      return (\r\n         <Card>\r\n            <CardHeader>\r\n               <span class='fas fa-chart-line header-icon mr-2' />\r\n               {headerText}\r\n               <div className='float-right'>\r\n                  <Icon\r\n                     icon='maximize'\r\n                     iconSize={14}\r\n                     className='mr-2'\r\n                     onClick={this.windowMaximize}\r\n                  />\r\n               </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n               <Chart\r\n                  theme={this.state.theme}\r\n                  chartType={chartType}\r\n                  data={data}\r\n                  width={width}\r\n                  height={height}\r\n               />\r\n            </CardBody>\r\n            <Dialog\r\n               isOpen={this.state.modal}\r\n               onClose={() => this.windowMaximize()}\r\n               className='modal-full modal-my'\r\n            >\r\n               <Card>\r\n                  <CardHeader>\r\n                     <span class='fas fa-chart-line header-icon' />\r\n                     {headerText}\r\n                     <div className='float-right'>\r\n                        <Icon\r\n                           icon='minimize'\r\n                           iconSize={14}\r\n                           onClick={this.windowMaximize}\r\n                        />\r\n                     </div>\r\n                  </CardHeader>\r\n                  <CardBody className='card-body'>\r\n                     <Chart\r\n                        theme={this.props.theme}\r\n                        chartType={chartType}\r\n                        data={data}\r\n                        width={width}\r\n                        height={height}\r\n                     />\r\n                  </CardBody>\r\n               </Card>\r\n            </Dialog>\r\n         </Card>\r\n      );\r\n   }\r\n}\r\nCardWithChart.defaultProps = {\r\n   size: 'm'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport ChartCard from '../../../components/Card/ChartCard/ChartCard';\r\n\r\nconst testData = require('../../../Data_OldStatic/old_data');\r\n\r\nexport default class MainDashboard extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         showReportFilter: false,\r\n         activeTab: '1'\r\n      };\r\n   }\r\n\r\n   switchTab(tab) {\r\n      if (this.state.activeTab !== tab) {\r\n         this.setState({\r\n            activeTab: tab\r\n         });\r\n      }\r\n   }\r\n\r\n   testd = testData;\r\n\r\n   labels() {\r\n      return this.testd.map(P => P.Project_Name);\r\n   }\r\n\r\n   getKPITargetData() {\r\n      return this.testd.map(P => P.Result);\r\n   }\r\n\r\n   getKPIData() {\r\n      return this.testd.map(P => P.Target);\r\n   }\r\n\r\n   data = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'Data',\r\n            backgroundColor: '#008FFB',\r\n            borderColor: '#008FFB',\r\n            data: this.getKPITargetData()\r\n         }\r\n      ]\r\n   };\r\n   dataBar = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'KPI 1',\r\n            backgroundColor: '#008FFB',\r\n            data: this.getKPIData()\r\n         },\r\n         {\r\n            label: 'Target',\r\n            backgroundColor: '#00E396',\r\n            data: this.getKPITargetData()\r\n         }\r\n      ]\r\n   };\r\n   data_line = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'KPI 2',\r\n            borderColor: '#008FFB',\r\n            backgroundColor: 'transparent',\r\n            data: this.getKPIData()\r\n         },\r\n         {\r\n            label: 'Target',\r\n            borderColor: '#00E396',\r\n            backgroundColor: 'rgba(0,0,0,0)',\r\n            data: this.getKPITargetData()\r\n         }\r\n      ]\r\n   };\r\n   dataRound = {\r\n      labels: ['a', 'b'],\r\n      datasets: [\r\n         {\r\n            label: 'Data',\r\n            backgroundColor: ['#4099ff', '#FFF3201'],\r\n            borderColor: 'transparent',\r\n            data: [90, 10]\r\n         }\r\n      ]\r\n   };\r\n\r\n   switchShowReportFilter = () => {\r\n      this.setState(state => ({\r\n         showReportFilter: !state.showReportFilter\r\n      }));\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <Row>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Bar'\r\n                     data={this.dataBar}\r\n                     headerText='Graf'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Line'\r\n                     data={this.data_line}\r\n                     headerText='Graf'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Line'\r\n                     data={this.data}\r\n                     headerText='Line_test'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Bar'\r\n                     data={this.data}\r\n                     headerText='Bar_test'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Pie'\r\n                     data={this.dataRound}\r\n                     headerText='Pie Test'\r\n                     size='s'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Doughnut'\r\n                     data={this.dataRound}\r\n                     headerText='Doughnut test'\r\n                     size='s'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={12} lg={12} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Radar'\r\n                     data={this.dataBar}\r\n                     headerText='Radar test'\r\n                     height={300}\r\n                     width={700}\r\n                     size='s'\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={12} lg={12} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='hBar'\r\n                     data={this.dataBar}\r\n                     headerText='Horizontal Bar'\r\n                     height={300}\r\n                     width={700}\r\n                     size='xl'\r\n                  />\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { ButtonGroup, Button, Divider } from '@blueprintjs/core';\r\n\r\nexport default class DashboardControllers extends Component {\r\n   render() {\r\n      const { onRefresh } = this.props;\r\n      return (\r\n         <div>\r\n            <ButtonGroup>{this.props.children}</ButtonGroup>\r\n            <ButtonGroup>\r\n               {this.props.children}\r\n               <Divider />\r\n               <Button icon='refresh' small minimal onClick={onRefresh} />\r\n            </ButtonGroup>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Card, Icon, Dialog } from '@blueprintjs/core';\r\nimport CardHeader from './CardHeader';\r\nimport CardBody from './CardBody';\r\n\r\nexport default class CardWithModal extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         modal: false\r\n      };\r\n      this.windowMaximize = this.windowMaximize.bind(this);\r\n   }\r\n\r\n   toggle = () => {\r\n      this.setState(state => ({ collapse: !state.collapse }));\r\n   };\r\n\r\n   windowMaximize() {\r\n      this.setState(state => ({\r\n         modal: !state.modal\r\n      }));\r\n   }\r\n\r\n   render() {\r\n      const { headerText } = this.props;\r\n\r\n      return (\r\n         <Card className={this.props.className}>\r\n            <CardHeader>\r\n               <span class='fas fa-chart-line header-icon mr-2' />\r\n               {headerText}\r\n               <div className='float-right'>\r\n                  <Icon\r\n                     icon='maximize'\r\n                     iconSize={14}\r\n                     className='mr-2'\r\n                     onClick={this.windowMaximize}\r\n                  />\r\n               </div>\r\n            </CardHeader>\r\n            <CardBody>{this.props.children}</CardBody>\r\n            <Dialog\r\n               isOpen={this.state.modal}\r\n               onClose={() => this.windowMaximize()}\r\n               className='modal-full modal-my'\r\n            >\r\n               <Card>\r\n                  <CardHeader>\r\n                     <span class='fas fa-chart-line header-icon' />\r\n                     {headerText}\r\n                     <div className='float-right'>\r\n                        <Icon\r\n                           icon='minimize'\r\n                           iconSize={14}\r\n                           onClick={this.windowMaximize}\r\n                        />\r\n                     </div>\r\n                  </CardHeader>\r\n                  <CardBody className='card-body'>\r\n                     {this.props.children}\r\n                  </CardBody>\r\n               </Card>\r\n            </Dialog>\r\n         </Card>\r\n      );\r\n   }\r\n}\r\nCardWithModal.defaultProps = {\r\n   size: 'm'\r\n};\r\n","import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { NonIdealState } from '@blueprintjs/core';\r\nimport UIManager from '../../../Modules/UIManager/UIManager';\r\n\r\nexport default class LineChart extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n         options: {\r\n            chart: {\r\n               id: 'basic-bar',\r\n               background: 'transparent',\r\n               dropShadow: {\r\n                  enabled: true,\r\n                  color: '#000',\r\n                  top: 18,\r\n                  left: 7,\r\n                  blur: 10,\r\n                  opacity: 0.2\r\n               },\r\n               foreColor:\r\n                  UIManager.getTheme() === 'dark' ? '#f5f8fa' : '#1e1e1e',\r\n               toolbar: false\r\n            },\r\n            dataLabels: {\r\n               enabled: true\r\n            },\r\n            stroke: {\r\n               curve: 'smooth'\r\n            },\r\n            title: {\r\n               text: 'Some Data',\r\n               align: 'left'\r\n            },\r\n            grid: {\r\n               borderColor: 'rbga(0,0,0,0.5)',\r\n               row: {\r\n                  colors: ['rgba(0,0,0,0.2)', 'transparent'], // takes an array which will be repeated on columns\r\n                  opacity: 0.5\r\n               }\r\n            },\r\n            xaxis: {\r\n               type: 'date',\r\n               labels: {\r\n                  style: {\r\n                     cssClass: 'text'\r\n                  }\r\n               },\r\n\r\n               categories: this.props.labels,\r\n               axisBorder: {\r\n                  show: true\r\n               },\r\n               tooltip: {\r\n                  enabled: false\r\n               }\r\n            },\r\n            yaxis: {\r\n               //min: 5,\r\n               max:\r\n                  Math.max(this.props.series[0].data) > this.props.targetValue\r\n                     ? Math.max(this.props.series[0].data) + 30\r\n                     : this.props.targetValue + 30\r\n            },\r\n            annotations: {\r\n               position: 'back',\r\n               yaxis: [\r\n                  {\r\n                     y: this.props.targetValue,\r\n                     y2: null,\r\n                     strokeDashArray: 3,\r\n                     borderColor: 'red',\r\n                     fillColor: '#b30000',\r\n                     opacity: 0.8,\r\n                     offsetX: 0,\r\n                     offsetY: 0,\r\n                     yAxisIndex: 0,\r\n                     label: {\r\n                        borderColor: 'transparent',\r\n                        style: {\r\n                           color: '#fff',\r\n                           background: '#b30000'\r\n                        },\r\n                        position: 'right',\r\n                        offsetX: 0,\r\n                        offsetY: 15,\r\n                        text:\r\n                           this.props.targetInfo + ': ' + this.props.targetValue\r\n                     }\r\n                  },\r\n                  {\r\n                     y: this.getAverage(),\r\n                     y2: null,\r\n                     strokeDashArray: 3,\r\n                     borderColor: '#279f27',\r\n                     fillColor: '#279f27',\r\n                     opacity: 0.8,\r\n                     offsetX: 0,\r\n                     offsetY: 0,\r\n                     yAxisIndex: 0,\r\n                     label: {\r\n                        borderColor: 'transparent',\r\n                        style: {\r\n                           color: '#fff',\r\n                           background: '#279f27'\r\n                        },\r\n                        position: 'right',\r\n                        text: 'Average: ' + this.getAverage(),\r\n                        offsetX: 0,\r\n                        offsetY: 0\r\n                     }\r\n                  }\r\n               ]\r\n            },\r\n            legend: {\r\n               position: 'top',\r\n               horizontalAlign: 'right',\r\n               floating: true,\r\n               offsetY: -25,\r\n               offsetX: -5\r\n            }\r\n         },\r\n         series: this.props.series\r\n      };\r\n   }\r\n\r\n   getAverage() {\r\n      if (this.props.series[0].data.length === 0) {\r\n         return 0;\r\n      }\r\n      let values = this.props.series[0].data;\r\n      let sum = values.reduce((previous, current) => (current += previous));\r\n      let avg = sum / values.length;\r\n      return avg.toPrecision(3);\r\n   }\r\n   render() {\r\n      if (this.props.series[0].data.length === 0) {\r\n         return (\r\n            <NonIdealState\r\n               icon='warning-sign'\r\n               description='There is no data to be displayed'\r\n            />\r\n         );\r\n      }\r\n      return (\r\n         <Chart\r\n            options={this.state.options}\r\n            series={this.props.series}\r\n            type='line'\r\n            width='100%'\r\n            height={300}\r\n         />\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CardWithModal from '../../../components/Card/CardWithModal';\r\nimport LineChart from '../../../components/Charts/ApexChart/LineChart';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nexport default class ChartsBuilder extends Component {\r\n   state = {\r\n      kpis: []\r\n   };\r\n   componentDidMount() {\r\n      this.unpackData();\r\n   }\r\n\r\n   unpackData() {\r\n      var k = this.props.data.map(d => {\r\n         return {\r\n            name: d.name,\r\n            target: d.target,\r\n            labels: d.reports.map(r => {\r\n               return new Date(r.reportedAt).toLocaleString();\r\n            }),\r\n            series: [\r\n               {\r\n                  name: d.name,\r\n                  data: d.reports.map(r => {\r\n                     return r.result;\r\n                  })\r\n               }\r\n            ]\r\n         };\r\n      });\r\n      this.setState({ kpis: k });\r\n   }\r\n   renderKPIs() {\r\n      return this.state.kpis.map((kpi, key) => {\r\n         return (\r\n            <Col xs='12'>\r\n               <CardWithModal\r\n                  headerText={kpi.name}\r\n                  className={key > 0 ? 'mt-3' : ''}\r\n               >\r\n                  <LineChart\r\n                     labels={kpi.labels}\r\n                     yaxisLabel='Results'\r\n                     xasisLabel='Reports'\r\n                     series={kpi.series}\r\n                     targetValue={kpi.target}\r\n                     targetInfo='KPI target'\r\n                  />\r\n               </CardWithModal>\r\n            </Col>\r\n         );\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return <Row>{this.renderKPIs()}</Row>;\r\n   }\r\n}\r\n\r\nChartsBuilder.defaultProps = {\r\n   data: []\r\n};\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect, Spinner, Button, Alignment } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class ProjectOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      isLoading: true,\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         this.setLoading(true);\r\n         var result = await Client.Services.ProjectsService.getProjects();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n   setLoading(loading) {\r\n      this.setState({ isLoading: loading });\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      const { isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <Button\r\n               icon={<Spinner size={20} />}\r\n               disabled={isLoading}\r\n               alignText={Alignment.LEFT}\r\n               fill\r\n            >\r\n               Projects...\r\n            </Button>\r\n         );\r\n      }\r\n\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill ? this.props.fill : true}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Tabs, Tab, H2, Spinner, NonIdealState } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\nimport MainDashboard from './components/MainDashboard';\r\nimport DashboardControllers from './components/DashboardControllers';\r\nimport TestView2 from './components/ChartsBuilder';\r\nimport ProjectOptions from '../../components/Selects/ProjectOptions';\r\n\r\nexport default class Dashboard extends Component {\r\n   state = {\r\n      activeTabID: 'KPIs',\r\n      selectedTabId: 'KPIs',\r\n      isLoading: true,\r\n      data: [],\r\n      errorMessage: '',\r\n      project: '',\r\n      selectedProjectName: ''\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.getData();\r\n   }\r\n\r\n   async getData() {\r\n      this.setLoading(true);\r\n      const { project } = this.state;\r\n\r\n      if (project === '') {\r\n         this.setLoading(false);\r\n         return;\r\n      }\r\n\r\n      try {\r\n         //this.resetErrorMsg();\r\n         var result = await Client.Services.ReportingService.getReportByProjectID(\r\n            project\r\n         );\r\n         this.setState({\r\n            data: result.data\r\n         });\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ errorMsg: err.response });\r\n         Client.Notifications.alert('Error while loading reports');\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   resetErrorMsg() {\r\n      this.setState({ errorMessage: '' });\r\n   }\r\n\r\n   onChangeProject = e => {\r\n      const state = this.state;\r\n      state[e.target.id] = e.target.value;\r\n      state['selectedProjectName'] =\r\n         e.target.options[e.target.selectedIndex].text;\r\n\r\n      this.setState(state);\r\n      this.getData();\r\n   };\r\n\r\n   setLoading(loading) {\r\n      this.setState({\r\n         isLoading: loading\r\n      });\r\n   }\r\n\r\n   handleTabChange = activeTabID => {\r\n      this.setState({\r\n         activeTabID: activeTabID,\r\n         selectedTabId: activeTabID\r\n      });\r\n   };\r\n\r\n   renderControlls() {\r\n      if (this.state.selectedTabId === 'Dashboards') {\r\n         return <DashboardControllers onRefresh={() => this.getData()} />;\r\n      }\r\n   }\r\n\r\n   renderProjectOptions() {\r\n      return (\r\n         <ProjectOptions\r\n            id='project'\r\n            ref='project'\r\n            onChange={this.onChangeProject}\r\n            value={this.state.project}\r\n            placeholder={\r\n               this.state.project\r\n                  ? this.state.selectedProjectName\r\n                  : 'Select Project...'\r\n            }\r\n         />\r\n      );\r\n   }\r\n   renderContent() {\r\n      const { project, isLoading, data } = this.state;\r\n      if (project === '') {\r\n         return (\r\n            <NonIdealState\r\n               title='No project selected yet'\r\n               description='Please select project'\r\n            >\r\n               {this.renderProjectOptions()}\r\n            </NonIdealState>\r\n         );\r\n      }\r\n\r\n      if (isLoading) {\r\n         return <Spinner></Spinner>;\r\n      }\r\n\r\n      if (data.length === 0) {\r\n         return (\r\n            <NonIdealState\r\n               icon='issue'\r\n               title=\"Selected Project don't have KPIs\"\r\n               description='Please select different Project'\r\n            >\r\n               {this.renderProjectOptions()}\r\n            </NonIdealState>\r\n         );\r\n      }\r\n\r\n      return (\r\n         <Tabs\r\n            onChange={this.handleTabChange}\r\n            selectedTabId={this.state.selectedTabId}\r\n            large\r\n         >\r\n            <Tab\r\n               id='KPIs'\r\n               title='KPIs'\r\n               panel={\r\n                  <TestView2\r\n                     labels={this.state.labels}\r\n                     yaxisLabel='Results'\r\n                     xasisLabel='Reports'\r\n                     series={this.state.series}\r\n                     targetValue={this.state.target}\r\n                     targetInfo='KPI target'\r\n                     data={this.state.data}\r\n                  />\r\n               }\r\n            />\r\n            <Tab id='Beta' title='Beta' panel={<MainDashboard />} />\r\n            <Tabs.Expander />\r\n            {this.renderControlls()}\r\n         </Tabs>\r\n      );\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div id='Dashboards'>\r\n            <div className='mt-2'>\r\n               <H2>\r\n                  Dashboard Panel\r\n                  <div className='float-right'>\r\n                     {this.renderProjectOptions()}\r\n                  </div>\r\n               </H2>\r\n            </div>\r\n            {this.renderContent()}\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport TableCell from './TableCell';\r\nimport TableHeaders from './TableHeaders';\r\n\r\nexport default class KPIsTable extends Component {\r\n   state = {\r\n      selected: '',\r\n      headers: [\r\n         { text: '#', center: true },\r\n         { text: 'KPI' },\r\n         { text: 'Valid From' },\r\n         { text: 'Valid Until' },\r\n         { text: 'Target', center: true },\r\n         { text: 'Project' },\r\n         { text: 'Manager' }\r\n      ]\r\n   };\r\n\r\n   renderTableHeader() {\r\n      return <TableHeaders headers={this.state.headers} />;\r\n   }\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n   renderTableRows() {\r\n      const { data } = this.props;\r\n      return data.map((kpi, key) => {\r\n         return (\r\n            <tr\r\n               key={kpi._id}\r\n               onClick={e => this.handleSelection(e, kpi)}\r\n               className={`${\r\n                  this.state.selected._id === kpi._id ? 'bg-selected' : ''\r\n               }`}\r\n            >\r\n               <TableCell key={key} value={key} center />\r\n               <TableCell value={kpi.name} />\r\n               <TableCell\r\n                  value={new Date(kpi.time_from).toLocaleDateString()}\r\n               />\r\n               <TableCell value={new Date(kpi.time_to).toLocaleDateString()} />\r\n               <TableCell value={kpi.target} center />\r\n               <TableCell value={kpi.project.name} />\r\n               <TableCell value={kpi.manager.name} />\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   handleSelection(e, kpi) {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      if (selected._id !== kpi._id) {\r\n         this.props.onSelection(kpi, false);\r\n         this.setState({\r\n            selected: kpi\r\n         });\r\n         return;\r\n      }\r\n      this.props.onSelection({}, true);\r\n      this.setState({ selected: {} });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Table\r\n            headers={this.state.headers}\r\n            rows={this.renderTableRows()}\r\n            errorMsg={this.props.errorMsg}\r\n            isLoading={this.props.isLoading}\r\n            onRefresh={this.props.onRefresh}\r\n         />\r\n      );\r\n   }\r\n}\r\nKPIsTable.defaultProps = {\r\n   data: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable,\r\n   NumericInput\r\n} from '@blueprintjs/core';\r\nimport { DateInput } from '@blueprintjs/datetime';\r\n\r\nimport ProjectOptions from '../Selects/ProjectOptions';\r\nimport EmployeesOptions from '../Selects/EmployeesOptions';\r\n\r\nexport default class KPIForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onTargetValueChange,\r\n         handleDateToChange,\r\n         handleDateFromChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name, //String\r\n         time_from, //Date\r\n         time_to, //date\r\n         target, // number\r\n         project, //ProjectOPt\r\n         selectedProject,\r\n         manager, //ManagerOPT\r\n         selectedManager\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createProjectForm'>\r\n               <HTMLTable condensed>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Name'\r\n                           labelFor='name'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <InputGroup\r\n                           id='name'\r\n                           onChange={onChange}\r\n                           placeholder='Name...'\r\n                           type='text'\r\n                           value={name}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Time From'\r\n                           labelFor='fime_from'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <DateInput\r\n                           formatDate={time_from =>\r\n                              time_from.toLocaleDateString()\r\n                           }\r\n                           onChange={handleDateFromChange}\r\n                           parseDate={time_from =>\r\n                              new Date(time_from).toLocaleDateString()\r\n                           }\r\n                           placeholder='DD/MM/YYYY'\r\n                           defaultValue={new Date()}\r\n                           value={time_from}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Time To'\r\n                           labelFor='fime_to'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <DateInput\r\n                           formatDate={time_to => time_to.toLocaleDateString()}\r\n                           onChange={handleDateToChange}\r\n                           parseDate={time_to =>\r\n                              new Date(time_to).toLocaleDateString\r\n                           }\r\n                           placeholder='DD/MM/YYYY'\r\n                           defaultValue={new Date()}\r\n                           value={time_to}\r\n                           minDate={new Date()}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Target'\r\n                           labelFor='Target'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <NumericInput\r\n                           id='target'\r\n                           onValueChange={onTargetValueChange}\r\n                           placeholder='Target...'\r\n                           type='number'\r\n                           value={target}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Project'\r\n                           labelFor='project'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <ProjectOptions\r\n                           id='project'\r\n                           onChange={onChange}\r\n                           placeholder='Project...'\r\n                           value={project}\r\n                           selected={selectedProject}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Manager'\r\n                           labelFor='team'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <EmployeesOptions\r\n                           id='manager'\r\n                           ref='manager'\r\n                           onChange={onChange}\r\n                           vale={manager}\r\n                           selected={selectedManager}\r\n                           fill\r\n                           placeholder='Select Manager...'\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nKPIForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\r\nimport KPIForm from '../Forms/KPIForm';\r\n\r\nexport default class UserDialog extends Component {\r\n   render() {\r\n      return (\r\n         <div id='userDialog'>\r\n            <Dialog\r\n               isOpen={this.props.isOpen}\r\n               onClose={this.props.toClose}\r\n               toggle={this.props.toOpen}\r\n            >\r\n               <Card>\r\n                  <div className='card-body'>\r\n                     <div id={this.props.id}>\r\n                        <KPIForm\r\n                           name={this.props.name}\r\n                           time_from={this.props.time_from}\r\n                           time_to={this.props.time_to}\r\n                           selectedKPI={this.props.selectedKPI}\r\n                           selectedProject={this.props.selectedProject}\r\n                           selectedManager={this.props.selectedManager}\r\n                           target={this.props.target}\r\n                           onChange={this.props.onChange}\r\n                           handleDateToChange={this.props.handleDateToChange}\r\n                           handleDateFromChange={\r\n                              this.props.handleDateFromChange\r\n                           }\r\n                           onTargetValueChange={this.props.onTargetValueChange}\r\n                           onSubmit={this.props.handleSubmit}\r\n                           buttonCaption={this.props.buttonCaption}\r\n                           onClear={this.props.onClear}\r\n                        />\r\n                     </div>\r\n                  </div>\r\n               </Card>\r\n               <Alert\r\n                  isOpen={this.props.isAlertOpen}\r\n                  confirmButtonText='Clear form'\r\n                  onConfirm={this.props.onClear}\r\n                  cancelButtonText='Cancel'\r\n                  onCancel={this.props.closeAlert}\r\n                  intent='danger'\r\n                  icon='issue'\r\n                  ussePortal={\r\n                     <Portal\r\n                        container={document.getElementById('userDialog')}\r\n                     />\r\n                  }\r\n               >\r\n                  <H5>{this.props.errorMessage}</H5>\r\n                  <strong>Do you want to clear the data?</strong>\r\n               </Alert>\r\n            </Dialog>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Tabs, Tab, H2, Divider, Card } from '@blueprintjs/core';\r\nimport KPIsTable from '../../components/Tables/KPIsTable';\r\nimport KPIDialog from '../../components/Dialogs/KPIDialog';\r\nimport Client from '../../Modules/Client/Client';\r\nimport TableControllers from '../../components/Tables/TableControllers';\r\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\r\n\r\nexport default class Teams extends Component {\r\n   state = {\r\n      activeTabID: 'KPIs',\r\n      selectedTabId: 'KPIs',\r\n      isLoading: true,\r\n      data: [],\r\n      isNoData: true,\r\n      openAlert: true,\r\n      errorMessage: '',\r\n      isAddDialogOpen: false,\r\n      isEditDialogOpen: false,\r\n      isDeleteAlertOpen: false,\r\n      canEdit: !false,\r\n      canDelete: !false,\r\n      name: '',\r\n      time_from: new Date(),\r\n      time_to: this.setDefaultToDate(new Date()),\r\n      target: 0,\r\n      project: '',\r\n      manager: '',\r\n      selected: {}\r\n   };\r\n\r\n   setDefaultToDate(d) {\r\n      const finalDate = new Date();\r\n      finalDate.setDate(d.getDate() + 30);\r\n      return finalDate;\r\n   }\r\n\r\n   getSelected = (sel, isSelected) => {\r\n      this.setState({\r\n         selected: sel,\r\n         canEdit: isSelected,\r\n         canDelete: isSelected\r\n      });\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.getData();\r\n   }\r\n\r\n   async getData() {\r\n      this.setLoading(true);\r\n      var result;\r\n      try {\r\n         //this.resetErrorMsg();\r\n         result = await Client.Services.KPIsService.getKPIs();\r\n         this.setState({\r\n            data: result.data,\r\n            isNoData: false\r\n         });\r\n         if (result.data.length === 0) {\r\n            this.setState({ isNoData: true });\r\n         }\r\n      } catch (err) {\r\n         this.handleError(err);\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   async deleteItem(id) {\r\n      var result;\r\n      try {\r\n         this.resetErrorMsg();\r\n         result = await Client.Services.KPIsService.deleteKPIById(id);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success('KPI removed successfully');\r\n         }\r\n      } catch (err) {\r\n         this.handleError(err);\r\n      } finally {\r\n         this.getData();\r\n         this.closeDeleteAlert();\r\n      }\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n      const { name, time_from, time_to, target, project, manager } = this.state;\r\n      let kpi = await Client.Services.KPIsService.createKPIDTO(\r\n         name,\r\n         time_from,\r\n         time_to,\r\n         target,\r\n         project,\r\n         manager\r\n      );\r\n      console.log(kpi);\r\n      try {\r\n         let result = await Client.Services.KPIsService.saveKPI(kpi);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`KPI ${name} successfully saved`);\r\n            this.getData();\r\n         }\r\n      } catch (err) {\r\n         this.handleError(err);\r\n      }\r\n   };\r\n   handleUpdate = async e => {\r\n      e.preventDefault();\r\n      const {\r\n         name,\r\n         time_from,\r\n         time_to,\r\n         target,\r\n         project,\r\n         manager,\r\n         selected\r\n      } = this.state;\r\n\r\n      try {\r\n         let kpi = await Client.Services.KPIsService.createKPIDTO(\r\n            name,\r\n            time_from,\r\n            time_to,\r\n            target,\r\n            project,\r\n            manager\r\n         );\r\n         kpi.kpi._id = selected._id;\r\n         let result = await Client.Services.KPIsService.updateKPI(kpi);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`KPI ${name} successfully saved`);\r\n            this.getData();\r\n         }\r\n      } catch (err) {\r\n         this.handleError(err);\r\n      }\r\n   };\r\n\r\n   handleError(err) {\r\n      var errorMsg = 'Unknown Error';\r\n      if (err.response.status === 409) {\r\n         errorMsg = `Error: ${err.response.data.message}`;\r\n         Client.Notifications.alert(errorMsg);\r\n      }\r\n      if (err.response.status !== 409) {\r\n         errorMsg = `Error:  while saving: item`;\r\n         Client.Notifications.error(errorMsg);\r\n      }\r\n      this.openAlert(errorMsg);\r\n   }\r\n\r\n   openAlert(msg) {\r\n      this.setState({ isAlertOpen: true, errorMessage: msg });\r\n   }\r\n   closeAlert() {\r\n      this.setState({ isAlertOpen: false, errorMessage: '' });\r\n   }\r\n\r\n   resetErrorMsg() {\r\n      this.setState({ errorMessage: '' });\r\n   }\r\n\r\n   onChange = e => {\r\n      const state = this.state;\r\n      state[e.target.id] = e.target.value;\r\n      this.setState(state);\r\n   };\r\n\r\n   handleTargetValueChange = number => {\r\n      this.setState({ target: number });\r\n   };\r\n\r\n   handleDateFromChange = newFromDate => {\r\n      this.setState({ time_from: newFromDate });\r\n   };\r\n   handleDateToChange = newToDate => {\r\n      this.setState({ time_to: newToDate });\r\n   };\r\n\r\n   openDialog() {\r\n      this.setState({\r\n         isAddDialogOpen: true\r\n      });\r\n   }\r\n   closeDialog() {\r\n      this.setState({\r\n         isAddDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openEditDialog = async e => {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      try {\r\n         let result = await Client.Services.KPIsService.getKPIById(\r\n            selected._id\r\n         );\r\n         if (result.status === 200 || result.status === 304) {\r\n            var kpi = result.data;\r\n            console.log(kpi);\r\n\r\n            this.setState({\r\n               isEditDialogOpen: true,\r\n               selected: kpi,\r\n               name: kpi.name,\r\n               time_from: new Date(kpi.time_from),\r\n               time_to: new Date(kpi.time_to),\r\n               target: kpi.target,\r\n               project: kpi.project._id,\r\n               manager: kpi.manager._id\r\n            });\r\n         }\r\n      } catch (err) {\r\n         console.log(err);\r\n         this.setState({\r\n            isEditDialogOpen: true,\r\n            name: selected.name,\r\n            manager: selected.manager._id,\r\n            time_from: new Date(selected.time_from),\r\n            time_to: new Date(selected.time_to),\r\n            target: selected.target,\r\n            project: selected.project._id\r\n         });\r\n      }\r\n   };\r\n   closeEditDialog() {\r\n      this.setState({\r\n         isEditDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: true\r\n      });\r\n   }\r\n   closeDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: false\r\n      });\r\n   }\r\n\r\n   setLoading(loading) {\r\n      this.setState({\r\n         isLoading: loading\r\n      });\r\n   }\r\n\r\n   handleTabChange = activeTabID => {\r\n      this.setState({\r\n         activeTabID: activeTabID,\r\n         selectedTabId: activeTabID\r\n      });\r\n   };\r\n   clearForm() {\r\n      this.setState({\r\n         name: '',\r\n         manager: '',\r\n         isAlertOpen: false,\r\n         errorMessage: ''\r\n      });\r\n   }\r\n\r\n   renderControlls() {\r\n      if (this.state.selectedTabId === 'KPIs') {\r\n         return (\r\n            <TableControllers\r\n               onEdit={this.openEditDialog}\r\n               canEdit={this.state.canEdit}\r\n               onAdd={() => this.openDialog()}\r\n               onDelete={() => this.openDeleteAlert()}\r\n               canDelete={this.state.canDelete}\r\n               onRefresh={() => this.getData()}\r\n            >\r\n               <Divider></Divider>\r\n            </TableControllers>\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         data,\r\n         isLoading,\r\n         name,\r\n         time_from,\r\n         time_to,\r\n         target,\r\n         project,\r\n         manager,\r\n         isAlertOpen,\r\n         selected\r\n      } = this.state;\r\n\r\n      return (\r\n         <div id='KPIPanel'>\r\n            <div className='mt-2'>\r\n               <H2>KPIs Panel</H2>\r\n            </div>\r\n            <Tabs\r\n               onChange={this.handleTabChange}\r\n               selectedTabId={this.state.selectedTabId}\r\n               large\r\n            >\r\n               <Tab\r\n                  id='KPIs'\r\n                  title='KPIs'\r\n                  panel={\r\n                     <Card>\r\n                        <KPIsTable\r\n                           isEmpty={this.state.isNoData}\r\n                           data={data}\r\n                           onRefresh={() => this.getData()}\r\n                           isLoading={isLoading}\r\n                           onSelection={this.getSelected}\r\n                        />\r\n                        <KPIDialog\r\n                           isOpen={this.state.isEditDialogOpen}\r\n                           toOpen={() => this.openEditDialog()}\r\n                           toClose={() => this.closeEditDialog()}\r\n                           name={selected.name}\r\n                           time_from={time_from}\r\n                           time_to={time_to}\r\n                           target={target}\r\n                           project={project}\r\n                           selectedProject={project}\r\n                           manager={manager}\r\n                           selectedManager={manager}\r\n                           onChange={this.onChange}\r\n                           handleDateFromChange={this.handleDateFromChange}\r\n                           handleDateToChange={this.handleDateToChange}\r\n                           onTargetValueChange={this.handleTargetValueChange}\r\n                           handleSubmit={this.handleUpdate}\r\n                           buttonCaption='Update'\r\n                           onClear={() => this.clearForm()}\r\n                           isAlertOpen={isAlertOpen}\r\n                           closeAlert={() => this.closeAlert()}\r\n                        />\r\n                        <KPIDialog\r\n                           isOpen={this.state.isAddDialogOpen}\r\n                           toOpen={() => this.openDialog()}\r\n                           toClose={() => this.closeDialog()}\r\n                           name={name}\r\n                           time_from={time_from}\r\n                           time_to={time_to}\r\n                           target={target}\r\n                           project={project}\r\n                           manager={manager}\r\n                           onChange={this.onChange}\r\n                           handleDateFromChange={this.handleDateFromChange}\r\n                           handleDateToChange={this.handleDateToChange}\r\n                           onTargetValueChange={this.handleTargetValueChange}\r\n                           handleSubmit={this.handleSubmit}\r\n                           buttonCaption='Add'\r\n                           onClear={() => this.clearForm()}\r\n                           isAlertOpen={isAlertOpen}\r\n                           closeAlert={() => this.closeAlert()}\r\n                        />\r\n                        <BeforeDeleteAlert\r\n                           isOpen={this.state.isDeleteAlertOpen}\r\n                           onConfirm={() => this.deleteItem(selected._id)}\r\n                           onCancel={() => this.closeDeleteAlert()}\r\n                           portalID='KPIPanel'\r\n                           info={`KPI: ${selected.name}`}\r\n                        />\r\n                     </Card>\r\n                  }\r\n               />\r\n               <Tabs.Expander />\r\n               {this.renderControlls()}\r\n            </Tabs>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n/**\r\n  * \r\n  * \r\n    <Button icon='annotation' minimal small></Button>\r\n    <Button icon='dashboard' minimal small></Button>\r\n    <Button icon='eye-open' minimal small></Button>\r\n  * \r\n  * \r\n  */\r\n","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport TableCell from './TableCell';\r\n\r\nexport default class EmployeesTable extends Component {\r\n   state = {\r\n      selected: '',\r\n      headers: [\r\n         { text: '#', center: true },\r\n         { text: 'Name' },\r\n         { text: 'Email' },\r\n         { text: 'Is User', center: true },\r\n         { text: 'Type' },\r\n         { text: 'Project' },\r\n         { text: 'Team' }\r\n      ]\r\n   };\r\n\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n\r\n   renderTableRows() {\r\n      const { data } = this.props;\r\n      return data.map((employee, key) => {\r\n         return (\r\n            <tr\r\n               key={employee._id}\r\n               onClick={e => this.handleSelection(e, employee)}\r\n               className={` ${\r\n                  this.state.selected._id === employee._id ? 'bg-selected' : ''\r\n               }`}\r\n            >\r\n               <TableCell key={key} value={key} center />\r\n               <TableCell value={employee.name} />\r\n               <TableCell value={employee.email} />\r\n               <TableCell\r\n                  value={employee.user === null ? false : true}\r\n                  center\r\n               />\r\n               <TableCell\r\n                  value={employee.type === null ? 'N/A' : employee.type.type}\r\n               />\r\n               <TableCell\r\n                  value={\r\n                     employee.project === null ? 'N/A' : employee.project.name\r\n                  }\r\n               />\r\n               <TableCell\r\n                  value={employee.team == null ? 'N/A' : employee.team.name}\r\n               />\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   handleSelection(e, employee) {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      if (selected._id !== employee._id) {\r\n         this.props.onSelection(employee, false);\r\n         this.setState({\r\n            selected: employee\r\n         });\r\n         return;\r\n      }\r\n      this.props.onSelection({}, true);\r\n      this.setState({ selected: {} });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Table\r\n            headers={this.state.headers}\r\n            rows={this.renderTableRows()}\r\n            errorMsg={this.props.errorMsg}\r\n            isLoading={this.props.isLoading}\r\n            onRefresh={this.props.onRefresh}\r\n         />\r\n      );\r\n   }\r\n}\r\nEmployeesTable.defaultProps = {\r\n   data: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect, Spinner, Button, Alignment } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class EmployeesOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      isLoading: true,\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         this.setLoading(true);\r\n         var result = await Client.Services.UsersService.getUsers();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({\r\n            options: new Array('N/A'),\r\n            option: 'N/A'\r\n         });\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   setLoading(loading) {\r\n      this.setState({ isLoading: loading });\r\n   }\r\n\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  ${option.username} | ${option.email}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      const { isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <Button\r\n               icon={<Spinner size={20} />}\r\n               disabled={isLoading}\r\n               alignText={Alignment.LEFT}\r\n               fill\r\n            >\r\n               Users...\r\n            </Button>\r\n         );\r\n      }\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect, Spinner, Button, Alignment } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class EmployeesOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      isLoading: true,\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         this.setLoading(true);\r\n         var result = await Client.Services.EmployeesTypesService.getEmployeeTypes();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({\r\n            options: new Array('N/A'),\r\n            option: 'N/A'\r\n         });\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n   setLoading(loading) {\r\n      this.setState({ isLoading: loading });\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.type}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      const { isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <Button\r\n               icon={<Spinner size={20} />}\r\n               disabled={isLoading}\r\n               alignText={Alignment.LEFT}\r\n               fill\r\n            >\r\n               Employee Types...\r\n            </Button>\r\n         );\r\n      }\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect, Spinner, Button, Alignment } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class TeamsOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      isLoading: true,\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         this.setLoading(true);\r\n         var result = await Client.Services.TeamsService.getTeams();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({\r\n            options: new Array('N/A'),\r\n            option: 'N/A'\r\n         });\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n   setLoading(loading) {\r\n      this.setState({ isLoading: loading });\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      const { isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <Button\r\n               icon={<Spinner size={20} />}\r\n               disabled={isLoading}\r\n               alignText={Alignment.LEFT}\r\n               fill\r\n            >\r\n               Teams...\r\n            </Button>\r\n         );\r\n      }\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable\r\n} from '@blueprintjs/core';\r\nimport UsersOptions from '../Selects/UsersOptions';\r\nimport EmployeesTypesOptions from '../Selects/EmployeesTypesOptions';\r\nimport ProjectOptions from '../Selects/ProjectOptions';\r\nimport TeamOptions from '../Selects/TeamsOptions';\r\n\r\nexport default class EmployeeForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name,\r\n         email,\r\n         user,\r\n         selectedUser,\r\n         type,\r\n         selectedType,\r\n         project,\r\n         selectedProject,\r\n         team,\r\n         selectedTeam\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createProjectForm'>\r\n               <HTMLTable condensed>\r\n                  <tbody>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Name'\r\n                              labelFor='name'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <InputGroup\r\n                              id='name'\r\n                              onChange={onChange}\r\n                              placeholder='Name...'\r\n                              type='text'\r\n                              value={name}\r\n                              fill\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Email'\r\n                              labelFor='email'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <InputGroup\r\n                              id='email'\r\n                              onChange={onChange}\r\n                              placeholder='Email...'\r\n                              type='email'\r\n                              value={email}\r\n                              fill\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup label='User' labelFor='user' />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <UsersOptions\r\n                              id='user'\r\n                              ref='user'\r\n                              onChange={onChange}\r\n                              vale={user}\r\n                              selected={selectedUser}\r\n                              fill\r\n                              placeholder='Select User'\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Employee Type'\r\n                              labelFor='user'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <EmployeesTypesOptions\r\n                              id='type'\r\n                              ref='type'\r\n                              onChange={onChange}\r\n                              vale={type}\r\n                              selected={selectedType}\r\n                              fill\r\n                              placeholder='Select Employee Type'\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Project'\r\n                              labelFor='project'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <ProjectOptions\r\n                              id='project'\r\n                              onChange={onChange}\r\n                              placeholder='Project...'\r\n                              value={project}\r\n                              selected={selectedProject}\r\n                              fill\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Team'\r\n                              labelFor='team'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <TeamOptions\r\n                              id='team'\r\n                              ref='team'\r\n                              onChange={onChange}\r\n                              vale={team}\r\n                              selected={selectedTeam}\r\n                              fill\r\n                              placeholder='Select Team'\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                  </tbody>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nEmployeeForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\r\nimport EmployeeForm from '../Forms/EmployeeForm';\r\n\r\nexport default class UserDialog extends Component {\r\n   render() {\r\n      return (\r\n         <div id='userDialog'>\r\n            <Dialog\r\n               isOpen={this.props.isOpen}\r\n               onClose={this.props.toClose}\r\n               toggle={this.props.toOpen}\r\n            >\r\n               <Card>\r\n                  <div className='card-body'>\r\n                     <div id={this.props.id}>\r\n                        <EmployeeForm\r\n                           name={this.props.name}\r\n                           email={this.props.email}\r\n                           user={this.props.user}\r\n                           selectedUser={this.props.selectedUser}\r\n                           type={this.props.type}\r\n                           selectedType={this.props.selectedType}\r\n                           project={this.props.project}\r\n                           selectedProject={this.props.selectedProject}\r\n                           team={this.props.team}\r\n                           selectedTeam={this.props.selectedTeam}\r\n                           onChange={this.props.onChange}\r\n                           onSubmit={this.props.handleSubmit}\r\n                           buttonCaption={this.props.buttonCaption}\r\n                           onClear={this.props.onClear}\r\n                        />\r\n                     </div>\r\n                  </div>\r\n               </Card>\r\n               <Alert\r\n                  isOpen={this.props.isAlertOpen}\r\n                  confirmButtonText='Clear form'\r\n                  onConfirm={this.props.onClear}\r\n                  cancelButtonText='Cancel'\r\n                  onCancel={this.props.closeAlert}\r\n                  intent='danger'\r\n                  icon='issue'\r\n                  ussePortal={\r\n                     <Portal\r\n                        container={document.getElementById('userDialog')}\r\n                     />\r\n                  }\r\n               >\r\n                  <H5>{this.props.errorMessage}</H5>\r\n                  <strong>Do you want to clear the data?</strong>\r\n               </Alert>\r\n            </Dialog>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport EmployeesTable from '../Tables/EmployeesTable';\r\nimport EmployeeDialog from '../Dialogs/EmployeeDialog';\r\nimport BeforeDeleteAlert from '../Alerts/BeforeDeleteAlert';\r\n\r\nexport default class EmployeePanel extends Component {\r\n   render() {\r\n      const {\r\n         data,\r\n         onRefresh,\r\n         isLoading,\r\n         isAlertOpen,\r\n         isDeleteAlertOpen,\r\n         getSelected,\r\n         isUserEditDialogOpen,\r\n         toOpenUserEditDialog,\r\n         toCloseUserEditDialog,\r\n         isEmployeesDialogOpen,\r\n         toOpenEmployeesDialog,\r\n         toCloseEmployeesDialog,\r\n         name,\r\n         email,\r\n         user,\r\n         selectedUser,\r\n         type,\r\n         selectedType,\r\n         project,\r\n         selectedProject,\r\n         team,\r\n         selectedTeam,\r\n         onChange,\r\n         handleSubmit,\r\n         handleUpdate,\r\n         onClear,\r\n         onAlertClose,\r\n         onDeleteConfirm,\r\n         onDeleteCancel,\r\n         beforeDeleteInfo,\r\n         portalID\r\n      } = this.props;\r\n      return (\r\n         <div>\r\n            <EmployeesTable\r\n               data={data}\r\n               onRefresh={onRefresh}\r\n               isLoading={isLoading}\r\n               onSelection={getSelected}\r\n            />\r\n            <EmployeeDialog\r\n               isOpen={isUserEditDialogOpen}\r\n               toOpen={toOpenUserEditDialog}\r\n               toClose={toCloseUserEditDialog}\r\n               name={name}\r\n               email={email}\r\n               user={user}\r\n               selectedUser={selectedUser}\r\n               type={type}\r\n               selectedType={selectedType}\r\n               project={project}\r\n               selectedProject={selectedProject}\r\n               team={team}\r\n               selectedTeam={selectedTeam}\r\n               onChange={onChange}\r\n               handleSubmit={handleUpdate}\r\n               buttonCaption='Update'\r\n               onClear={onClear}\r\n               isAlertOpen={isAlertOpen}\r\n               closeAlert={onAlertClose}\r\n            />\r\n            <EmployeeDialog\r\n               isOpen={isEmployeesDialogOpen}\r\n               toOpen={toOpenEmployeesDialog}\r\n               toClose={toCloseEmployeesDialog}\r\n               name={name}\r\n               email={email}\r\n               user={user}\r\n               type={type}\r\n               project={project}\r\n               team={team}\r\n               onChange={onChange}\r\n               handleSubmit={handleSubmit}\r\n               buttonCaption='Add'\r\n               onClear={onClear}\r\n               isAlertOpen={isAlertOpen}\r\n               closeAlert={onAlertClose}\r\n            />\r\n            <BeforeDeleteAlert\r\n               isOpen={isDeleteAlertOpen}\r\n               onConfirm={onDeleteConfirm}\r\n               onCancel={onDeleteCancel}\r\n               portalID={portalID}\r\n               info={beforeDeleteInfo}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Tabs, Tab, H2, Card } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\nimport TableControllers from '../../components/Tables/TableControllers';\r\nimport EmployeePanel from '../../components/Panels/EmployeePanel';\r\n\r\nexport default class Employees extends Component {\r\n   state = {\r\n      activeTabID: 'Employees',\r\n      selectedTabId: 'Employees',\r\n      isLoading: true,\r\n      data: [],\r\n      openAlert: true,\r\n      errorMessage: '',\r\n      isEmployeesDialogOpen: false,\r\n      name: '',\r\n      email: '',\r\n      user: '',\r\n      type: '',\r\n      project: '',\r\n      team: '',\r\n      selected: {},\r\n      isUserEditDialogOpen: false,\r\n      isDeleteAlertOpen: false,\r\n      canEdit: !false,\r\n      canDelete: !false\r\n   };\r\n\r\n   getSelected = (emp, isSelected) => {\r\n      this.setState({\r\n         selected: emp,\r\n         canEdit: isSelected,\r\n         canDelete: isSelected\r\n      });\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.getEmployeesData();\r\n   }\r\n\r\n   async getEmployeesData() {\r\n      this.setLoading(true);\r\n      var result;\r\n      try {\r\n         //this.resetErrorMsg();\r\n         result = await Client.Services.EmployeesService.getEmployees();\r\n         this.setState({\r\n            data: result.data\r\n         });\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ errorMsg: err.response });\r\n         Client.Notifications.alert('Error while loading Employees list');\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   async deleteEmployee(id) {\r\n      var result;\r\n      try {\r\n         this.resetErrorMsg();\r\n         result = await Client.Services.EmployeesService.deleteEmployeeById(id);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success('Employee removed successfully');\r\n         }\r\n      } catch (err) {\r\n         this.setState({ errorMsg: err.response.status });\r\n         Client.Notifications.alert('Error, cannot delete uEmployeeser');\r\n      } finally {\r\n         this.getEmployeesData();\r\n         this.closeDeleteAlert();\r\n      }\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n      const { email, name, team, project, user, type } = this.state;\r\n      var errorMsg = 'Unknown Error';\r\n      let emp = await Client.Services.EmployeesService.createEmployeeDTO(\r\n         name,\r\n         email,\r\n         user,\r\n         type,\r\n         project,\r\n         team\r\n      );\r\n      try {\r\n         let result = await Client.Services.EmployeesService.saveEmployee(emp);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Employee ${name} successfully saved`);\r\n            this.getEmployeesData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${name} Employee`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n   handleUpdate = async e => {\r\n      e.preventDefault();\r\n      const { name, email, user, type, project, team, selected } = this.state;\r\n\r\n      var errorMsg = 'Unknown Error';\r\n      try {\r\n         let emp = await Client.Services.EmployeesService.getEmployeeUpdateDTO(\r\n            selected._id,\r\n            name,\r\n            email,\r\n            user,\r\n            type,\r\n            project,\r\n            team\r\n         );\r\n         let result = await Client.Services.EmployeesService.updateEmployee(\r\n            emp\r\n         );\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Employee ${name} successfully saved`);\r\n            this.getEmployeesData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${name} Employee`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n   openAlert(msg) {\r\n      this.setState({ isAlertOpen: true, errorMessage: msg });\r\n   }\r\n   closeAlert() {\r\n      this.setState({ isAlertOpen: false, errorMessage: '' });\r\n   }\r\n\r\n   resetErrorMsg() {\r\n      this.setState({ errorMessage: '' });\r\n   }\r\n\r\n   onChange = e => {\r\n      const state = this.state;\r\n      state[e.target.id] = e.target.value;\r\n      this.setState(state);\r\n   };\r\n\r\n   openEmployeesDialog() {\r\n      this.setState({\r\n         isEmployeesDialogOpen: true\r\n      });\r\n   }\r\n   closeEmployeesDialog() {\r\n      this.setState({\r\n         isEmployeesDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openUserEditDialog = async e => {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      try {\r\n         let result = await Client.Services.EmployeesService.getEmployeeById(\r\n            selected._id\r\n         );\r\n         if (result.status === 200) {\r\n            let emp = result.data;\r\n            this.setState({\r\n               isUserEditDialogOpen: true,\r\n               name: emp.name,\r\n               email: emp.email,\r\n               user: emp.user._id,\r\n               type: emp.type._id,\r\n               project: emp.project._id,\r\n               team: emp.team._id\r\n            });\r\n         }\r\n      } catch (err) {\r\n         console.log(err);\r\n         this.setState({\r\n            isUserEditDialogOpen: true,\r\n            name: selected.name,\r\n            email: selected.email,\r\n            user: selected.user._id,\r\n            type: selected.type._id,\r\n            project: selected.project === null ? '' : selected.project._id,\r\n            team: selected.team._id\r\n         });\r\n      }\r\n   };\r\n   closeUserEditDialog() {\r\n      this.setState({\r\n         isUserEditDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: true\r\n      });\r\n   }\r\n   closeDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: false\r\n      });\r\n   }\r\n\r\n   setLoading(loading) {\r\n      this.setState({\r\n         isLoading: loading\r\n      });\r\n   }\r\n\r\n   handleTabChange = activeTabID => {\r\n      this.setState({\r\n         activeTabID: activeTabID,\r\n         selectedTabId: activeTabID\r\n      });\r\n   };\r\n   clearForm() {\r\n      this.setState({\r\n         name: '',\r\n         email: '',\r\n         user: '',\r\n         type: '',\r\n         project: '',\r\n         team: '',\r\n         isAlertOpen: false,\r\n         errorMessage: ''\r\n      });\r\n   }\r\n\r\n   renderControlls() {\r\n      if (this.state.selectedTabId === 'Employees') {\r\n         return (\r\n            <TableControllers\r\n               onEdit={this.openUserEditDialog}\r\n               canEdit={this.state.canEdit}\r\n               onAdd={() => this.openEmployeesDialog()}\r\n               onDelete={() => this.openDeleteAlert()}\r\n               canDelete={this.state.canDelete}\r\n               onRefresh={() => this.getEmployeesData()}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         data,\r\n         isLoading,\r\n         email,\r\n         name,\r\n         team,\r\n         project,\r\n         user,\r\n         type,\r\n         isAlertOpen,\r\n         selected\r\n      } = this.state;\r\n\r\n      return (\r\n         <div id='EmployeePanel'>\r\n            <div className='mt-2'>\r\n               <H2>Employees Panel</H2>\r\n            </div>\r\n            <Tabs\r\n               onChange={this.handleTabChange}\r\n               selectedTabId={this.state.selectedTabId}\r\n               large\r\n            >\r\n               <Tab\r\n                  id='Employees'\r\n                  title='Employees'\r\n                  panel={\r\n                     <Card>\r\n                        <EmployeePanel\r\n                           data={data}\r\n                           onRefresh={() => this.getEmployeesData()}\r\n                           isLoading={isLoading}\r\n                           isAlertOpen={isAlertOpen}\r\n                           isDeleteAlertOpen={this.state.isDeleteAlertOpen}\r\n                           getSelected={this.getSelected}\r\n                           isUserEditDialogOpen={\r\n                              this.state.isUserEditDialogOpen\r\n                           }\r\n                           toOpenUserEditDialog={() =>\r\n                              this.openUserEditDialog()\r\n                           }\r\n                           toCloseUserEditDialog={() =>\r\n                              this.closeUserEditDialog()\r\n                           }\r\n                           isEmployeesDialogOpen={\r\n                              this.state.isEmployeesDialogOpen\r\n                           }\r\n                           toOpenEmployeesDialog={() =>\r\n                              this.openEmployeesDialog()\r\n                           }\r\n                           toCloseEmployeesDialog={() =>\r\n                              this.closeEmployeesDialog()\r\n                           }\r\n                           name={name}\r\n                           email={email}\r\n                           user={user}\r\n                           selectedUser={user}\r\n                           type={type}\r\n                           selectedType={type}\r\n                           project={project}\r\n                           selectedProject={project}\r\n                           team={team}\r\n                           selectedTeam={team}\r\n                           onChange={this.onChange}\r\n                           handleSubmit={this.handleSubmit}\r\n                           handleUpdate={this.handleUpdate}\r\n                           onClear={() => this.clearForm()}\r\n                           onAlertClose={() => this.closeAlert()}\r\n                           onDeleteConfirm={() =>\r\n                              this.deleteEmployee(selected._id)\r\n                           }\r\n                           onDeleteCancel={() => this.closeDeleteAlert()}\r\n                           beforeDeleteInfo={`Employee: ${selected.name}`}\r\n                           portalID='EmployeePanel'\r\n                        />\r\n                     </Card>\r\n                  }\r\n               />\r\n               <Tabs.Expander />\r\n               {this.renderControlls()}\r\n            </Tabs>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport TableCell from './TableCell';\r\n\r\nexport default class TeamsTable extends Component {\r\n   state = {\r\n      selected: '',\r\n      headers: [\r\n         { text: '#', center: true },\r\n         { text: 'Team' },\r\n         { text: 'Manager' }\r\n      ]\r\n   };\r\n\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n   renderTableRows() {\r\n      const { data } = this.props;\r\n      return data.map((team, key) => {\r\n         return (\r\n            <tr\r\n               key={team._id}\r\n               onClick={e => this.handleSelection(e, team)}\r\n               className={`${\r\n                  this.state.selected._id === team._id ? 'bg-selected' : ''\r\n               }`}\r\n            >\r\n               <TableCell key={key} value={key} center />\r\n               <TableCell value={team.name} />\r\n               <TableCell value={team.manager.name} />\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   handleSelection(e, team) {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      if (selected._id !== team._id) {\r\n         this.props.onSelection(team, false);\r\n         this.setState({\r\n            selected: team\r\n         });\r\n         return;\r\n      }\r\n      this.props.onSelection({}, true);\r\n      this.setState({ selected: {} });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Table\r\n            headers={this.state.headers}\r\n            rows={this.renderTableRows()}\r\n            errorMsg={this.props.errorMsg}\r\n            isLoading={this.props.isLoading}\r\n            onRefresh={this.props.onRefresh}\r\n         />\r\n      );\r\n   }\r\n}\r\nTeamsTable.defaultProps = {\r\n   data: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable\r\n} from '@blueprintjs/core';\r\nimport EmployeesOptions from '../Selects/EmployeesOptions';\r\n\r\nexport default class TeamForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name,\r\n         manager,\r\n         selectedManager\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createTeamForm'>\r\n               <HTMLTable condensed>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Team Name'\r\n                           labelFor='name'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <InputGroup\r\n                           id='name'\r\n                           onChange={onChange}\r\n                           placeholder='Team Name...'\r\n                           type='text'\r\n                           value={name}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Manager'\r\n                           labelFor='manager'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <EmployeesOptions\r\n                           id='manager'\r\n                           onChange={onChange}\r\n                           placeholder='Team Manager...'\r\n                           value={manager}\r\n                           selected={selectedManager}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nTeamForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\r\nimport TeamForm from '../Forms/TeamForm';\r\n\r\nexport default class UserDialog extends Component {\r\n   render() {\r\n      return (\r\n         <div id='userDialog'>\r\n            <Dialog\r\n               isOpen={this.props.isOpen}\r\n               onClose={this.props.toClose}\r\n               toggle={this.props.toOpen}\r\n            >\r\n               <Card>\r\n                  <div className='card-body'>\r\n                     <div id={this.props.id}>\r\n                        <TeamForm\r\n                           name={this.props.name}\r\n                           manager={this.props.username}\r\n                           selectedManager={this.props.selectedManager}\r\n                           onChange={this.props.onChange}\r\n                           onSubmit={this.props.handleSubmit}\r\n                           buttonCaption={this.props.buttonCaption}\r\n                           onClear={this.props.onClear}\r\n                        />\r\n                     </div>\r\n                  </div>\r\n               </Card>\r\n               <Alert\r\n                  isOpen={this.props.isAlertOpen}\r\n                  confirmButtonText='Clear form'\r\n                  onConfirm={this.props.onClear}\r\n                  cancelButtonText='Cancel'\r\n                  onCancel={this.props.closeAlert}\r\n                  intent='danger'\r\n                  icon='issue'\r\n                  ussePortal={\r\n                     <Portal\r\n                        container={document.getElementById('userDialog')}\r\n                     />\r\n                  }\r\n               >\r\n                  <H5>{this.props.errorMessage}</H5>\r\n                  <strong>Do you want to clear the data?</strong>\r\n               </Alert>\r\n            </Dialog>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Tabs, Tab, H2, Card } from '@blueprintjs/core';\r\nimport TeamsTable from '../../components/Tables/TeamsTable';\r\nimport TeamDialog from '../../components/Dialogs/TeamDialog';\r\nimport Client from '../../Modules/Client/Client';\r\nimport TableControllers from '../../components/Tables/TableControllers';\r\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\r\n\r\nexport default class Teams extends Component {\r\n   state = {\r\n      activeTabID: 'Teams',\r\n      selectedTabId: 'Teams',\r\n      isLoading: true,\r\n      data: [],\r\n      openAlert: true,\r\n      errorMessage: '',\r\n      isAddDialogOpen: false,\r\n      isEditDialogOpen: false,\r\n      isDeleteAlertOpen: false,\r\n      canEdit: !false,\r\n      canDelete: !false,\r\n      name: '',\r\n      manager: '',\r\n      selected: {}\r\n   };\r\n\r\n   getSelected = (sel, isSelected) => {\r\n      this.setState({\r\n         selected: sel,\r\n         canEdit: isSelected,\r\n         canDelete: isSelected\r\n      });\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.getData();\r\n   }\r\n\r\n   async getData() {\r\n      this.setLoading(true);\r\n      var result;\r\n      try {\r\n         //this.resetErrorMsg();\r\n         result = await Client.Services.TeamsService.getTeams();\r\n         this.setState({\r\n            data: result.data\r\n         });\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ errorMsg: err.response });\r\n         Client.Notifications.alert('Error while loading Teams list');\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   }\r\n\r\n   async deleteItem(id) {\r\n      var result;\r\n      try {\r\n         this.resetErrorMsg();\r\n         result = await Client.Services.TeamsService.deleteTeamByID(id);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success('Team removed successfully');\r\n         }\r\n      } catch (err) {\r\n         this.setState({ errorMsg: err.response.status });\r\n         Client.Notifications.alert('Error, cannot delete Team');\r\n      } finally {\r\n         this.getData();\r\n         this.closeDeleteAlert();\r\n      }\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n      const { name, manager } = this.state;\r\n      var errorMsg = 'Unknown Error';\r\n      let team = await Client.Services.TeamsService.createTeamDTO(\r\n         name,\r\n         manager\r\n      );\r\n      try {\r\n         let result = await Client.Services.TeamsService.saveTeam(team);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Team ${name} successfully saved`);\r\n            this.getData();\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${name} Team`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n   handleUpdate = async e => {\r\n      e.preventDefault();\r\n      const { name, manager, selected } = this.state;\r\n\r\n      var errorMsg = 'Unknown Error';\r\n      try {\r\n         let team = await Client.Services.TeamsService.createTeamDTO(\r\n            name,\r\n            manager\r\n         );\r\n         team.team._id = selected._id;\r\n         let result = await Client.Services.TeamsService.updateTeam(team);\r\n         if (result.status === 200) {\r\n            Client.Notifications.success(`Team ${name} successfully saved`);\r\n            this.getData();\r\n            console.log(result.data.employee);\r\n         }\r\n      } catch (err) {\r\n         if (err.response.status === 409) {\r\n            errorMsg = `Error: ${err.response.data.message}`;\r\n            Client.Notifications.alert(errorMsg);\r\n         }\r\n         if (err.response.status !== 409) {\r\n            errorMsg = `Error:  while saving: ${name} team`;\r\n            Client.Notifications.error(errorMsg);\r\n         }\r\n         this.openAlert(errorMsg);\r\n      }\r\n   };\r\n   openAlert(msg) {\r\n      this.setState({ isAlertOpen: true, errorMessage: msg });\r\n   }\r\n   closeAlert() {\r\n      this.setState({ isAlertOpen: false, errorMessage: '' });\r\n   }\r\n\r\n   resetErrorMsg() {\r\n      this.setState({ errorMessage: '' });\r\n   }\r\n\r\n   onChange = e => {\r\n      const state = this.state;\r\n      state[e.target.id] = e.target.value;\r\n      this.setState(state);\r\n   };\r\n\r\n   openDialog() {\r\n      this.setState({\r\n         isAddDialogOpen: true\r\n      });\r\n   }\r\n   closeDialog() {\r\n      this.setState({\r\n         isAddDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openEditDialog = async e => {\r\n      e.preventDefault();\r\n      const { selected } = this.state;\r\n      try {\r\n         let result = await Client.Services.TeamsService.getTeamById(\r\n            selected._id\r\n         );\r\n         if (result.status === 200) {\r\n            let team = result.data;\r\n            console.log(team);\r\n            this.setState({\r\n               isEditDialogOpen: true,\r\n               name: team.name,\r\n               manager: team.manager._id\r\n            });\r\n         }\r\n      } catch (err) {\r\n         console.log(err);\r\n         this.setState({\r\n            isEditDialogOpen: true,\r\n            name: selected.name,\r\n            manager: selected.manager._id\r\n         });\r\n      }\r\n   };\r\n   closeEditDialog() {\r\n      this.setState({\r\n         isEditDialogOpen: false\r\n      });\r\n   }\r\n\r\n   openDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: true\r\n      });\r\n   }\r\n   closeDeleteAlert() {\r\n      this.setState({\r\n         isDeleteAlertOpen: false\r\n      });\r\n   }\r\n\r\n   setLoading(loading) {\r\n      this.setState({\r\n         isLoading: loading\r\n      });\r\n   }\r\n\r\n   handleTabChange = activeTabID => {\r\n      this.setState({\r\n         activeTabID: activeTabID,\r\n         selectedTabId: activeTabID\r\n      });\r\n   };\r\n   clearForm() {\r\n      this.setState({\r\n         name: '',\r\n         manager: '',\r\n         isAlertOpen: false,\r\n         errorMessage: ''\r\n      });\r\n   }\r\n\r\n   renderControlls() {\r\n      if (this.state.selectedTabId === 'Teams') {\r\n         return (\r\n            <TableControllers\r\n               onEdit={this.openEditDialog}\r\n               canEdit={this.state.canEdit}\r\n               onAdd={() => this.openDialog()}\r\n               onDelete={() => this.openDeleteAlert()}\r\n               canDelete={this.state.canDelete}\r\n               onRefresh={() => this.getData()}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         data,\r\n         isLoading,\r\n         name,\r\n         manager,\r\n         isAlertOpen,\r\n         selected\r\n      } = this.state;\r\n\r\n      return (\r\n         <div id='TeamsPanel'>\r\n            <div className='mt-2'>\r\n               <H2>Teams Panel</H2>\r\n            </div>\r\n            <Tabs\r\n               onChange={this.handleTabChange}\r\n               selectedTabId={this.state.selectedTabId}\r\n               large\r\n            >\r\n               <Tab\r\n                  id='Teams'\r\n                  title='Teams'\r\n                  panel={\r\n                     <Card>\r\n                        <TeamsTable\r\n                           data={data}\r\n                           onRefresh={() => this.getData()}\r\n                           isLoading={isLoading}\r\n                           onSelection={this.getSelected}\r\n                        />\r\n                        <TeamDialog\r\n                           isOpen={this.state.isEditDialogOpen}\r\n                           toOpen={() => this.openEditDialog()}\r\n                           toClose={() => this.closeEditDialog()}\r\n                           name={name}\r\n                           manager={manager}\r\n                           selectedManager={manager}\r\n                           onChange={this.onChange}\r\n                           handleSubmit={this.handleUpdate}\r\n                           buttonCaption='Update'\r\n                           onClear={() => this.clearForm()}\r\n                           isAlertOpen={isAlertOpen}\r\n                           closeAlert={() => this.closeAlert()}\r\n                        />\r\n                        <TeamDialog\r\n                           isOpen={this.state.isAddDialogOpen}\r\n                           toOpen={() => this.openDialog()}\r\n                           toClose={() => this.closeDialog()}\r\n                           name={name}\r\n                           manager={manager}\r\n                           onChange={this.onChange}\r\n                           handleSubmit={this.handleSubmit}\r\n                           buttonCaption='Add'\r\n                           onClear={() => this.clearForm()}\r\n                           isAlertOpen={isAlertOpen}\r\n                           closeAlert={() => this.closeAlert()}\r\n                        />\r\n                        <BeforeDeleteAlert\r\n                           isOpen={this.state.isDeleteAlertOpen}\r\n                           onConfirm={() => this.deleteItem(selected._id)}\r\n                           onCancel={() => this.closeDeleteAlert()}\r\n                           portalID='TeamsPanel'\r\n                           info={`Team: ${selected.name}`}\r\n                        />\r\n                     </Card>\r\n                  }\r\n               />\r\n               <Tabs.Expander />\r\n               {this.renderControlls()}\r\n            </Tabs>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { NonIdealState, H5, H2, H4, Button } from '@blueprintjs/core';\r\n\r\nexport default class Route404 extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         goHome: false\r\n      };\r\n\r\n      this.handleGoHome = this.handleGoHome.bind(this);\r\n   }\r\n   handleGoHome = e => {\r\n      e.preventDefault();\r\n      this.setState({\r\n         goHome: true\r\n      });\r\n   };\r\n\r\n   render() {\r\n      const title = <H2>Path not found</H2>;\r\n      const description = (\r\n         <>\r\n            <H4>Page you are looking for do not exist</H4>\r\n            <H5>Error: 404</H5>\r\n            <br />\r\n\r\n            <Button\r\n               icon='home'\r\n               minimal\r\n               fill\r\n               onClick={this.handleGoHome}\r\n            ></Button>\r\n         </>\r\n      );\r\n\r\n      if (this.state.goHome) {\r\n         return <Redirect to='/home' />;\r\n      }\r\n\r\n      return (\r\n         <NonIdealState\r\n            icon='error'\r\n            title={title}\r\n            description={description}\r\n            action=''\r\n         />\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Row, Col, CardBody, Form } from 'reactstrap';\r\nimport { Card, Button, InputGroup, Classes } from '@blueprintjs/core';\r\n\r\nimport Client from '../../Modules/Client/Client';\r\nimport MainContainer from '../../components/MainContainer/MainContainer';\r\nimport UIManager from '../../Modules/UIManager/UIManager';\r\n\r\nimport './Login.css';\r\n\r\nconst AuthService = Client.Services.AuthService;\r\n\r\nexport default class Login extends Component {\r\n   state = {\r\n      theme: UIManager.getTheme(),\r\n      alertVisible: true,\r\n      isLoading: false,\r\n      authenticated: false,\r\n      message: '',\r\n      email: '',\r\n      password: ''\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.checkLogin();\r\n   }\r\n   checkLogin() {\r\n      if (Client.isAuthenticated()) {\r\n         this.setState({\r\n            authenticated: true\r\n         });\r\n      }\r\n   }\r\n\r\n   onSubmit = async e => {\r\n      e.preventDefault();\r\n      this.setLoading(true);\r\n      const { email, password } = this.state;\r\n\r\n      try {\r\n         var result = await AuthService.login(email, password); //Client.login(email, password);\r\n         console.log(result);\r\n         if (result) {\r\n            this.setState({\r\n               message: 'ok',\r\n               authenticated: true\r\n            });\r\n            if (result.status === 401) {\r\n               this.setState({\r\n                  message: 'User is not active'\r\n               });\r\n            }\r\n         }\r\n      } catch (err) {\r\n         this.setState({\r\n            message: 'Login failed'\r\n         });\r\n      } finally {\r\n         this.setLoading(false);\r\n      }\r\n   };\r\n\r\n   setLoading(loading) {\r\n      this.setState({ loading: loading });\r\n   }\r\n\r\n   onChange = e => {\r\n      const state = this.state;\r\n      state[e.target.name] = e.target.value;\r\n      this.setState(state);\r\n      this.resetMessage();\r\n   };\r\n\r\n   resetMessage() {\r\n      this.setState({ message: '' });\r\n   }\r\n\r\n   render() {\r\n      const { authenticated, email, password, message, theme } = this.state;\r\n\r\n      if (authenticated) {\r\n         return <Redirect to='/Home' />;\r\n      }\r\n\r\n      return (\r\n         <MainContainer noAppBar displayBgImage={true}>\r\n            <Row>\r\n               <Col\r\n                  xl={{ size: 4, offset: 4 }}\r\n                  lg={{ size: 4, offset: 4 }}\r\n                  md={{ size: 4, offset: 4 }}\r\n                  sm='12'\r\n                  xs='12'\r\n                  className='mt-4'\r\n               >\r\n                  <div\r\n                     className={`${theme} bg-login-form login-card ${\r\n                        message ? 'shake' : ''\r\n                     }`}\r\n                  >\r\n                     <Card color={theme} className='bg-transparent mt-5'>\r\n                        <CardBody className=''>\r\n                           <span className='fas fa-dice-d20 float-right' />\r\n                           <h3 className='text-center'>Sign in</h3>\r\n                           <hr />\r\n                           <Form>\r\n                              <div className='mb-2'>\r\n                                 <InputGroup\r\n                                    leftIcon='user'\r\n                                    className='login-input'\r\n                                    intent={message ? 'danger' : ''}\r\n                                    onChange={e => {\r\n                                       this.setState({\r\n                                          email: e.target.value\r\n                                       });\r\n                                       this.resetMessage();\r\n                                    }}\r\n                                    placeholder='Username...'\r\n                                    type='email'\r\n                                    value={email}\r\n                                 />\r\n                              </div>\r\n                              <div className='mb-2'>\r\n                                 <InputGroup\r\n                                    leftIcon='lock'\r\n                                    className='login-input'\r\n                                    intent={message ? 'danger' : ''}\r\n                                    onChange={e => {\r\n                                       this.setState({\r\n                                          password: e.target.value\r\n                                       });\r\n                                       this.resetMessage();\r\n                                    }}\r\n                                    placeholder='Password...'\r\n                                    type='password'\r\n                                    value={password}\r\n                                 />\r\n                              </div>\r\n                              <div className={Classes.ALIGN_RIGHT}>\r\n                                 <Button\r\n                                    type='submit'\r\n                                    size='sm'\r\n                                    fill\r\n                                    minimal\r\n                                    text='Login'\r\n                                    alignText='right'\r\n                                    rightIcon='arrow-right'\r\n                                    onClick={this.onSubmit}\r\n                                 />\r\n                              </div>\r\n                           </Form>\r\n                        </CardBody>\r\n                     </Card>\r\n                  </div>\r\n               </Col>\r\n            </Row>\r\n         </MainContainer>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { Card, H2, Classes } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class Home extends Component {\r\n   state = {\r\n      testResult: '',\r\n      testServiceResult: []\r\n   };\r\n   componentDidMount() {\r\n      //this.getUserData();\r\n   }\r\n\r\n   async getUserData() {\r\n      let result = await Client.testingCurrentUserAuth();\r\n\r\n      this.setState({\r\n         testResult: result\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <div className='mt-2'>\r\n               <H2>GhOSt KPI Application</H2>\r\n            </div>\r\n\r\n            <div className='container-fluid'>\r\n               <Row>\r\n                  <Col xl={12} lg={12} md={12} sm={12} xs={12} className='mt-3'>\r\n                     <Card>\r\n                        <div className='bp3-card-header'>\r\n                           <div className='bp3-card-header-content'>\r\n                              Project info\r\n                           </div>\r\n                        </div>\r\n                        <div className='card-body'>\r\n                           <h4>This application is created for KPI analysis</h4>\r\n                           <hr></hr>\r\n                           <h5 className={Classes.TEXT_MUTED}>\r\n                              current version: 0.0.1\r\n                           </h5>\r\n                           <hr />\r\n                           <h5 className={Classes.TEXT_MUTED}>\r\n                              Author: Rafal Cymbalista\r\n                           </h5>\r\n                        </div>\r\n                     </Card>\r\n                  </Col>\r\n               </Row>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n/*Component import*/\r\nimport Settings from '../views/Settings/Settings';\r\nimport Projects from '../views/Projects/Projects';\r\nimport Reports from '../views/Reports/Reports';\r\nimport AdminPanel from '../views/AdminPanel/AdminPanel';\r\nimport Dashboards from '../views/Dashboards/Dashboards';\r\nimport KPIs from '../views/KPIs/KPIs';\r\nimport Employees from '../views/Employees/Employees';\r\nimport Teams from '../views/Teams/Teams';\r\nimport Route404 from './Route404.jsx';\r\n\r\nimport Login from '../views/Login/Login';\r\nimport Home from '../views/Home/Home';\r\n\r\nexport default class Routes extends Component {\r\n   render() {\r\n      return (\r\n         <Router>\r\n            <Switch>\r\n               <Route exact path='/' component={Login} />\r\n               <Route exact path='/Login/' component={Login} />\r\n               <PrivateRoute exact path='/Home' home component={Home} />\r\n               <PrivateRoute exact path='/Dashboards/' component={Dashboards} />\r\n               <PrivateRoute exact path='/Projects/' component={Projects} />\r\n               <PrivateRoute exact path='/KPIs/' component={KPIs} />\r\n               <PrivateRoute exact path='/Employees/' component={Employees} />\r\n               <PrivateRoute exact path='/Teams/' component={Teams} />\r\n               <PrivateRoute exact path='/Reports/' component={Reports} />\r\n               <PrivateRoute exact path='/Settings/' component={Settings} />\r\n               <PrivateRoute exact path='/AdminPanel/' component={AdminPanel} />\r\n\r\n               <Route from='*' to='/' component={Route404} />\r\n            </Switch>\r\n         </Router>\r\n      );\r\n   }\r\n}\r\n","/*Imports*/\r\nimport React, { Component } from 'react';\r\nimport Routes from './Routes/Routes';\r\n\r\n/*CSS import*/\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport './App.css';\r\n\r\n/**\r\n *    Testing BlueprintUI\r\n */\r\nimport { FocusStyleManager } from '@blueprintjs/core';\r\nimport '@blueprintjs/core/lib/css/blueprint.css';\r\nimport '@blueprintjs/table/lib/css/table.css';\r\nimport '@blueprintjs/datetime/lib/css/blueprint-datetime.css';\r\n\r\n/**\r\n *    Global UI Manager for theme switching\r\n */\r\nimport UIManager from './Modules/UIManager/UIManager';\r\n\r\n/*CSS import - theming : BOOTSTRAP*/\r\nimport './custom.css'; //<- Custom Bootstrap .css\r\nimport './blueprint_custom.css'; //<- Custom Blueprintjs.css\r\nimport './blueprint_custom_table.css'; //<- Custom Blueprintjs.table\r\nimport './blueprint_custom_datetime.css'; //<- Custom Blueprintjs.datetime\r\nimport './apexchart_custom.css'; //<- Custom ApexChart.js css\r\n\r\nexport default class App extends Component {\r\n   render() {\r\n      document.body.className =\r\n         UIManager.getTheme() === 'dark' ? 'bp3-dark' : 'bp3-body';\r\n      FocusStyleManager.onlyShowFocusOnTabs();\r\n      return (\r\n         <div className='App'>\r\n            <Routes />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}