{"version":3,"sources":["Data_OldStatic/old_data.js","Modules/Client/API/Routes/Auth/Auth.js","Modules/Client/API/Routes/Employees/Employees.js","Modules/Client/API/Routes/Employees_Types/Employees_Types.js","Modules/Client/API/Routes/Projects/Projects.js","Modules/Client/API/Routes/Teams/Teams.js","Modules/Client/API/Routes/KPIs/KPIs.js","Modules/Client/API/Routes/Reports/Reports.js","Modules/Client/API/Routes/Users/Users.js","Modules/Client/API/Routes/Routes.js","Modules/Client/API/User/User.js","Modules/Client/API/Auth/Auth.js","Modules/Client/API/Services/AuthService/AuthService.js","Modules/Client/API/Requests/Request.js","Modules/Client/API/Services/EmployeesService/DTO/Employee.js","Modules/Client/API/Services/EmployeesService/EmployeesService.js","Modules/Client/API/Services/EmployeesService/DTO/EmployeeType.js","Modules/Client/API/Services/EmployeesService/EmployeesTypesService.js","Modules/Client/API/Services/KPIsService/DTO/KPIDTO.js","Modules/Client/API/Services/KPIsService/KPIsService.js","Modules/Client/API/Services/ReportingService/DTO/Report.js","Modules/Client/API/Services/ReportingService/ReportingService.js","Modules/Client/API/Services/TeamsService/DTO/Team.js","Modules/Client/API/Services/TeamsService/TeamsService.js","Modules/Client/API/Services/ProjectsService/DTO/Project.js","Modules/Client/API/Services/ProjectsService/ProjectsService.js","Modules/Client/API/Services/UsersService/DTO/User.js","Modules/Client/API/Services/UsersService/UserService.js","Modules/Client/API/Services/Services.js","Modules/Client/API/API.js","Modules/Client/Notifications/Notifications.js","Modules/Client/Client.js","components/Sidebar/Sidebar.jsx","components/Sidebar/SidebarItem.jsx","components/Sidebar/SidebarItemSpecial.jsx","Modules/UIManager/UIManager.js","components/AppSideBar/AppSideBar.jsx","components/MainContainer/MainContainer.jsx","Routes/PrivateRoute.jsx","views/Settings/Settings.jsx","components/Tables/TableHeaders.jsx","components/Tables/Table.jsx","components/Tables/TableCell.jsx","components/Tables/ProjectsTable.jsx","components/Selects/EmployeesOptions.jsx","components/Forms/ProjectForm.jsx","components/Dialogs/ProjectDialog.jsx","components/Tables/TableControllers.jsx","views/Projects/Projects.jsx","components/Tables/ReportsTable.jsx","components/Selects/KPIsOptions.jsx","components/Forms/ReportForm.jsx","components/Dialogs/ReportDialog.jsx","views/Reports/Reports.jsx","components/Tables/UsersTable.jsx","components/Selects/UserTypeOptions.jsx","components/Forms/UserForm.jsx","components/Dialogs/UserDialog.jsx","components/Alerts/BeforeDeleteAlert.jsx","views/AdminPanel/AdminPanel.jsx","components/Card/CardHeader.jsx","components/Card/CardBody.jsx","components/Charts/Chart/Chart.jsx","components/Card/ChartCard/ChartCard.jsx","views/Dashboards/components/MainDashboard.jsx","views/Dashboards/components/DashboardControllers.jsx","components/Card/CardWithModal.jsx","components/Charts/ApexChart/LineChart.jsx","views/Dashboards/components/ChartsBuilder.jsx","components/Selects/ProjectOptions.jsx","views/Dashboards/Dashboards.jsx","components/Tables/KPIsTable.jsx","components/Forms/KPIForm.jsx","components/Dialogs/KPIDialog.jsx","views/KPIs/KPIs.jsx","components/Tables/EmployeesTable.jsx","components/Selects/UsersOptions.jsx","components/Selects/EmployeesTypesOptions.jsx","components/Selects/TeamsOptions.jsx","components/Forms/EmployeeForm.jsx","components/Dialogs/EmployeeDialog.jsx","components/Panels/EmployeePanel.jsx","views/Employees/Employees.jsx","components/Tables/TeamsTable.jsx","components/Forms/TeamForm.jsx","components/Dialogs/TeamDialog.jsx","views/Teams/Teams.jsx","Routes/Route404.jsx","views/Login/Login.jsx","views/Home/Home.jsx","Routes/Routes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Project_Name","Result","Target","Auth","LOGIN","MAIN_PATH","Employees","GET_EMPLOYEES","GET_EMPLOYEE_BY_ID","GET_EMPLOYEE_BY_NAME","GET_EMPLOYEE_BY_TYPE","GET_EMPLOYEE_BY_USER_ID","CREATE_EMPLOYEE","UPDATE_EMPLOYEE","DELETE_EMPLOYEE_BY_ID","Employees_TYPES","GET_EMPLOYEES_TYPES","GET_EMPLOYEES_TYPE_BY_ID","CREATE_EMPLOYEES_TYPE","DELETE_EMPLOYEES_TYPE_BY_ID","PROJECTS","GET_PROJECTS","GET_PROJECT_BY_NAME","GET_PROJECT_BY_ID","CREATE_NEW_PROEJCT","UPDATE_PROJECT","DELETE_PROJECT_BY_ID","teamS","GET_TEAMS","GET_TEAM_BY_NAME","GET_TEAM_BY_ID","CREATE_NEW_TEAM","UPDATE_TEAM","DELETE_TEAM_BY_ID","KPI","GET_KPIS","GET_KPI_BY_ID","GET_KPI_BY_PROJECT_ID","CREATE_NEW_KPI","UPDATE_KPI","DELETE_KPI_BY_ID","Reports","GET_REPORTS","GET_REPORT_BY_ID","GET_REPORT_BY_KPI_ID","GET_REPORT_BY_PROJECT_ID","CREATE_REPORT","UPDATE_REPORT","DELETE_REPORT_BY_ID","Users","UPDATE_USER","CREATE_NEW_USER","DELETE_USER","GET_CURRENT_USER","GET_ALL_USERS","ROUTES","Object","classCallCheck","this","AUTH","EMPLOYEES","EMPLOYEES_TYPES","EmployeesTypes","Projects","TEAMS","Teams","KPIs","REPORTS","USERS","User","user","localStorage","getItem","JSON","parse","getUser","_id","employeeInfo","name","usertype","userType","token","sap","getUserType","role","email","project","rm","setItem","stringify","isUserAuthenticated","removeItem","arguments","length","undefined","AuthService","username","password","axios","post","API","getLoginItem","then","result","authorized","authenticateUser","data","window","location","reload","catch","error","deauthenticateUser","Request","create","headers","Authorization","getToken","Employee","type","team","employee","emp","EmployeesService","getEmployeeDTO","id","createEmployeeDTO","get","err","put","delete","EmployeeType","EmployeesTypesService","EmployeeTypeDTO","Type","res","getEmployeeTypeByID","time_from","time_to","target","manager","kpi","KPIService","KPIDTO","getKPIDTO","Report","reportedBy","completed","status","reportedAt","ReportsService","getReportDTO","kpiID","Team","TeamsService","getTeamDTO","Project","ProjectsService","getProjectDTO","active","createdAt","Date","UserService","getUserDTO","USER_TYPES","GET_USER_TYPES","Services","KPIsService","ReportingService","UsersService","Routes","SERVICES","REQUEST","doToast","Toaster","className","position","maxToasts","Notifications","message","show","intent","icon","timeout","info","require","Client","console","log","login","isAuthenticated","logout","Sidebar","state","selected","setState","react_default","a","createElement","props","children","Component","SidebarItem","_this","link","_this$props","to","onClick","tooltip","components","content","Position","RIGHT","fill","react_router_dom","minimal","large","UIManager","theme","t","toLowerCase","isThemeSet","setTheme","document","body","getTheme","isDarkThemeEnabled","applySelectedTheme","setChartView","getCurrentView","defaults","global","defaultFontColor","legend","fontColor","view","_v","pathname","toString","slice","toLocaleLowerCase","AppSideBar","possibleConstructorReturn","getPrototypeOf","call","handleLogout","e","preventDefault","themeIcon","themeToSwitch","goHome","isOpen","switchTheme","bind","assertThisInitialized","swtichTheme","_this2","react_router","Sidebar_Sidebar_Sidebar","SidebarItem_SidebarItem","changeSelection","SidebarItemSpecial_SidebarItem","MainContainer","displayBgImage","appView","app","homeView","disply","noAppBar","_this$props2","concat","selectPlace","PrivateRoute","_ref","component","rest","objectWithoutProperties","assign","render","AppSideBar_AppSideBar","MainContainer_MainContainer_MainContainer","Settings","TableHeaders","map","header","center","text","renderTableHeader","defaultProps","Table","errorMsg","TableHeaders_TableHeaders","renderTableRows","rows","information","Classes","TEXT_MUTED","onRefresh","renderNonIdealState","striped","condensed","interactive","renderTableBody","isLoading","renderContent","TableCell","value","key","handleCellValue","ProjectsTable","handleSelection","TableCell_TableCell","onSelection","Table_Table","EmployeesOptions","options","option","getOptions","getEmployees","Array","ref","onChange","disabled","hidden","placeholder","renderOptions","ProjectForm","onSubmit","buttonCaption","onClear","selectedManager","Form","label","labelFor","labelInfo","colSpan","EmployeesOptions_EmployeesOptions","addButtonCaption","ProjectDialog","onClose","toClose","toggle","toOpen","ProjectForm_ProjectForm","handleSubmit","isAlertOpen","confirmButtonText","onConfirm","cancelButtonText","onCancel","closeAlert","ussePortal","container","getElementById","errorMessage","TableControllers","onEdit","canEdit","onAdd","onDelete","canDelete","small","activeTabID","selectedTabId","openAlert","isAddDialogOpen","isEditDialogOpen","isDeleteAlertOpen","getSelected","sel","isSelected","_callee","_this$state","regenerator_default","wrap","_context","prev","next","createProjectDTO","sent","saveProject","success","getProjectsData","t0","response","alert","stop","handleUpdate","_callee2","_this$state2","_context2","updateProject","openEditDialog","_callee3","_context3","getProjectById","handleTabChange","setLoading","getProjects","_context4","resetErrorMsg","deleteProjectByID","_context5","closeDeleteAlert","msg","loading","TableControllers_TableControllers","openDialog","openDeleteAlert","_this3","_this$state3","title","panel","ProjectsTable_ProjectsTable","Expander","renderControlls","ProjectDialog_ProjectDialog","closeEditDialog","clearForm","closeDialog","deleteUser","ReportsTable","report","getCompletedValue","toDateString","val","toFixed","KPIsOptions","getKPIs","ReportForm","selectedKPI","KPIsOptions_KPIsOptions","vale","dateInput","formatDate","toLocaleDateString","handleDateChange","parseDate","defaultValue","minDate","onValueChange","onResultValueChange","renderRest","UserDialog","ReportForm_ReportForm","isEmployeesDialogOpen","isUserEditDialogOpen","createReportDTO","saveReport","getData","updateReport","handleResultValueChange","number","handleValueChange","newFromDate","getReportById","setUserId","getReports","getEmployeeByUserID","getUserId","deleteReportByID","_context6","ReportsTable_ReportsTable","ReportDialog_UserDialog","closeUserEditDialog","handleDateFromChange","closeEmployeesDialog","UsersTable","usersData","UserTypesOptions","roles","renderPlaceholder","UserForm","leftIcon","UserTypeOptions_UserTypesOptions","checked","defaultChecked","clearButtonCaption","UserForm_UserForm","BeforeDeleteAlert","portalID","AdminPanel","users","isUserDialogOpen","usr","createUserDTO","saveNewUser","getUsersData","updateUser","getUsers","openUserEditDialog","openUserDialog","UsersTable_UsersTable","UserDialog_UserDialog","closeUserDialog","BeforeDeleteAlert_BeforeDeleteAlert","CardHeader","isBodyOpen","CardBody","Chart_","setChartFontColor","_displyGridLinesX","_displyGridLinesY","_isDoughnut","_doughnutHole","maintainAspectRatio","labels","responsive","cutoutPercentage","scales","xAxes","ticks","display","gridLines","drawBorder","color","yAxes","chartType","height","width","es","getChartOption","getChart","CardWithChart","collapse","modal","windowMaximize","headerText","CardHeader_CardHeader","class","iconSize","CardBody_CardBody","Chart_Chart_","size","testData","MainDashboard","testd","datasets","backgroundColor","borderColor","getKPITargetData","dataBar","getKPIData","data_line","dataRound","switchShowReportFilter","showReportFilter","activeTab","tab","P","Row","Col","xl","lg","md","sm","xs","ChartCard_CardWithChart","DashboardControllers","CardWithModal","LineChart","chart","background","dropShadow","enabled","top","left","blur","opacity","foreColor","toolbar","dataLabels","stroke","curve","align","grid","row","colors","xaxis","style","cssClass","categories","axisBorder","yaxis","max","Math","series","targetValue","annotations","y","y2","strokeDashArray","fillColor","offsetX","offsetY","yAxisIndex","targetInfo","getAverage","horizontalAlign","floating","values","reduce","previous","current","toPrecision","description","react_apexcharts_min_default","ChartsBuilder","kpis","unpackData","k","d","reports","r","toLocaleString","CardWithModal_CardWithModal","LineChart_LineChart","yaxisLabel","xasisLabel","renderKPIs","ProjectOptions","Dashboard","onChangeProject","getReportByProjectID","DashboardControllers_DashboardControllers","ProjectOptions_ProjectOptions","renderProjectOptions","ChartsBuilder_ChartsBuilder","MainDashboard_MainDashboard","KPIsTable","KPIForm","onTargetValueChange","selectedProject","handleDateToChange","KPIForm_KPIForm","isNoData","setDefaultToDate","createKPIDTO","saveKPI","handleError","updateKPI","handleTargetValueChange","newToDate","getKPIById","finalDate","setDate","getDate","deleteKPIById","KPIsTable_KPIsTable","isEmpty","KPIDialog_UserDialog","deleteItem","EmployeesTable","getEmployeeTypes","TeamsOptions","getTeams","EmployeeForm","selectedUser","selectedType","selectedTeam","UsersOptions_EmployeesOptions","EmployeesTypesOptions_EmployeesOptions","TeamsOptions_TeamsOptions","EmployeeForm_EmployeeForm","EmployeePanel","toOpenUserEditDialog","toCloseUserEditDialog","toOpenEmployeesDialog","toCloseEmployeesDialog","onAlertClose","onDeleteConfirm","onDeleteCancel","beforeDeleteInfo","EmployeesTable_EmployeesTable","EmployeeDialog_UserDialog","saveEmployee","getEmployeesData","getEmployeeUpdateDTO","updateEmployee","getEmployeeById","deleteEmployeeById","openEmployeesDialog","EmployeePanel_EmployeePanel","deleteEmployee","TeamsTable","TeamForm","TeamForm_TeamForm","createTeamDTO","saveTeam","updateTeam","getTeamById","deleteTeamByID","TeamsTable_TeamsTable","TeamDialog_UserDialog","Route404","handleGoHome","Fragment","action","Login","alertVisible","authenticated","finish","resetMessage","checkLogin","offset","es_CardBody","ALIGN_RIGHT","alignText","rightIcon","Home","testResult","testServiceResult","testingCurrentUserAuth","exact","path","home","Dashboards","from","App","FocusStyleManager","onlyShowFocusOnTabs","Routes_Routes","Boolean","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.295a41a0.chunk.js","sourcesContent":["const Projects = [\r\n   {\r\n      Project_Name: 'A',\r\n      Result: 0.6,\r\n      Target: 0.78\r\n   },\r\n   {\r\n      Project_Name: 'B',\r\n      Result: 1.1,\r\n      Target: 1.43\r\n   },\r\n   {\r\n      Project_Name: 'C',\r\n      Result: 0.27,\r\n      Target: 0.33\r\n   },\r\n   {\r\n      Project_Name: 'D',\r\n      Result: 1.12,\r\n      Target: 1.33\r\n   },\r\n   {\r\n      Project_Name: 'E',\r\n      Result: 0.57,\r\n      Target: 0.66\r\n   },\r\n   {\r\n      Project_Name: 'F',\r\n      Result: 0.54,\r\n      Target: 0.66\r\n   },\r\n   {\r\n      Project_Name: 'G',\r\n      Result: 1.31,\r\n      Target: 1.49\r\n   }\r\n];\r\n\r\nmodule.exports = Projects;\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/users'\r\n\r\nexport default class Auth {\r\n   static LOGIN = MAIN_PATH + '/login'\r\n}","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/employees';\r\n\r\nexport default class Employees {\r\n   static GET_EMPLOYEES = MAIN_PATH + '/';\r\n   static GET_EMPLOYEE_BY_ID = MAIN_PATH + '/id/';\r\n   static GET_EMPLOYEE_BY_NAME = MAIN_PATH + '/name/';\r\n   static GET_EMPLOYEE_BY_TYPE = MAIN_PATH + '/type/';\r\n   static GET_EMPLOYEE_BY_USER_ID = MAIN_PATH + '/user/';\r\n   static CREATE_EMPLOYEE = MAIN_PATH + '/';\r\n   static UPDATE_EMPLOYEE = MAIN_PATH + '/';\r\n   static DELETE_EMPLOYEE_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\n * @description Returns {String} of HTTP path requests\n */\nconst MAIN_PATH = '/api/employeesTypes';\n\nexport default class Employees_TYPES {\n   static GET_EMPLOYEES_TYPES = MAIN_PATH + '/';\n   static GET_EMPLOYEES_TYPE_BY_ID = MAIN_PATH + '/id/';\n   static CREATE_EMPLOYEES_TYPE = MAIN_PATH + '/';\n   static DELETE_EMPLOYEES_TYPE_BY_ID = MAIN_PATH + '/';\n}\n","/**\n * @description Returns {String} of HTTP path requests\n */\nconst MAIN_PATH = '/api/projects';\n\nexport default class PROJECTS {\n   /**\n    * @description HTTP GET\n    */\n   static GET_PROJECTS = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP GET\n    */\n   static GET_PROJECT_BY_NAME = MAIN_PATH + '/name/';\n\n   /**\n    * @description HTTP GET\n    */\n   static GET_PROJECT_BY_ID = MAIN_PATH + '/id/';\n\n   /**\n    * @description HTTP POST\n    */\n   static CREATE_NEW_PROEJCT = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP PUT\n    */\n   static UPDATE_PROJECT = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP DELETE => +PROJECT.ID\n    */\n   static DELETE_PROJECT_BY_ID = MAIN_PATH + '/';\n}\n","/**\n * @description Returns {String} of HTTP path requests\n */\nconst MAIN_PATH = '/api/teams';\n\nexport default class teamS {\n   /**\n    * @description HTTP GET\n    */\n   static GET_TEAMS = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP GET\n    */\n   static GET_TEAM_BY_NAME = MAIN_PATH + '/name/';\n\n   /**\n    * @description HTTP GET\n    */\n   static GET_TEAM_BY_ID = MAIN_PATH + '/id/';\n\n   /**\n    * @description HTTP POST\n    */\n   static CREATE_NEW_TEAM = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP PUT\n    */\n   static UPDATE_TEAM = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP DELETE => +team.ID\n    */\n   static DELETE_TEAM_BY_ID = MAIN_PATH + '/';\n}\n","/**\n * @description Returns {String} of HTTP path requests\n */\nconst MAIN_PATH = '/api/kpi';\n\nexport default class KPI {\n   /**\n    * @description HTTP GET\n    */\n   static GET_KPIS = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP GET\n    */\n   static GET_KPI_BY_ID = MAIN_PATH + '/id/';\n   static GET_KPI_BY_PROJECT_ID = MAIN_PATH + '/project/';\n\n   /**\n    * @description HTTP POST\n    */\n   static CREATE_NEW_KPI = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP PUT\n    */\n   static UPDATE_KPI = MAIN_PATH + '/';\n\n   /**\n    * @description HTTP DELETE => +KPI.ID\n    */\n   static DELETE_KPI_BY_ID = MAIN_PATH + '/';\n}\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/reports';\r\n\r\nexport default class Reports {\r\n   static GET_REPORTS = MAIN_PATH + '/';\r\n   static GET_REPORT_BY_ID = MAIN_PATH + '/id/';\r\n   static GET_REPORT_BY_KPI_ID = MAIN_PATH + '/kpi/';\r\n   static GET_REPORT_BY_PROJECT_ID = MAIN_PATH + '/project/';\r\n   static CREATE_REPORT = MAIN_PATH + '/';\r\n   static UPDATE_REPORT = MAIN_PATH + '/';\r\n   static DELETE_REPORT_BY_ID = MAIN_PATH + '/';\r\n}\r\n","/**\r\n * @description Returns {String} of HTTP path requests\r\n */\r\nconst MAIN_PATH = '/api/users';\r\n\r\nexport default class Users {\r\n   static UPDATE_USER = MAIN_PATH + '/';\r\n   static CREATE_NEW_USER = MAIN_PATH + '/create/';\r\n   static DELETE_USER = MAIN_PATH + '/';\r\n   static LOGIN = MAIN_PATH + '/login/';\r\n   static GET_CURRENT_USER = MAIN_PATH + '/current/';\r\n   static GET_ALL_USERS = MAIN_PATH + '/';\r\n}\r\n","import Auth from './Auth/Auth';\r\nimport Employees from './Employees/Employees';\r\nimport EmployeesTypes from './Employees_Types/Employees_Types';\r\nimport Projects from './Projects/Projects';\r\nimport Teams from './Teams/Teams';\r\nimport KPIs from './KPIs/KPIs';\r\nimport Reports from './Reports/Reports';\r\nimport Users from './Users/Users';\r\n\r\nexport default class ROUTES {\r\n   constructor() {\r\n      return this;\r\n   }\r\n\r\n   static AUTH = Auth;\r\n   static EMPLOYEES = Employees;\r\n   static EMPLOYEES_TYPES = EmployeesTypes;\r\n   static PROJECTS = Projects;\r\n   static TEAMS = Teams;\r\n   static KPI = KPIs;\r\n   static REPORTS = Reports;\r\n   static USERS = Users;\r\n}\r\n","class User {\r\n   /**\r\n    * @returns {Object} User\r\n    */\r\n   static getUser() {\r\n      var user = localStorage.getItem('user') || null;\r\n      if (!user) {\r\n         return null;\r\n      }\r\n      user = JSON.parse(user);\r\n      return user;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Object.Id\r\n    */\r\n   static getUserId() {\r\n      return this.getUser()._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} Username\r\n    */\r\n   static getName() {\r\n      return this.getUser().employeeInfo.name;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} UserType ['user','team leader','service manager','operations manager','general manager','admin','root']\r\n    */\r\n   static getUserType() {\r\n      return this.getUser().usertype;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} UserType ['user','team leader','service manager','operations manager','general manager','admin','root']\r\n    *          AS Object.Id\r\n    */\r\n   static getUserTypeId() {\r\n      return this.getUser().userType._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User JWT token\r\n    */\r\n   static getUserJWTToken() {\r\n      if (this.getUser() != null) {\r\n         return this.getUser().token;\r\n      }\r\n      return '';\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User SAP ID Number\r\n    */\r\n   static getSAP() {\r\n      return this.getUser().employeeInfo.sap;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Role\r\n    */\r\n   static getRole() {\r\n      return this.getUserType();\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Role Object.Id\r\n    */\r\n   static getRoleId() {\r\n      return this.getUser().employeeInfo.role._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Email address\r\n    */\r\n   static getEmployeeEmail() {\r\n      return this.getUser().employeeInfo.email;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Email address\r\n    */\r\n   static getUserEmail() {\r\n      return this.getUser().email;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Project Name\r\n    */\r\n   static getProject() {\r\n      return this.getUser().employeeInfo.project.name;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee Project Object.id\r\n    */\r\n   static getProjectID() {\r\n      return this.getUser().employeeInfo.project._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee RM name\r\n    */\r\n   static getRMName() {\r\n      return this.getUser().employeeInfo.rm.name;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee RM Object.Id\r\n    */\r\n   static getRMId() {\r\n      return this.getUser().employeeInfo.rm._id;\r\n   }\r\n\r\n   /**\r\n    * @returns {String} User Employee RM email address\r\n    */\r\n   static getRMemail() {\r\n      return this.getUser().employeeInfo.rm.email;\r\n   }\r\n}\r\n\r\nexport default User;\r\n","import User from '../User/User';\n\nclass Auth {\n   /**\n    * Authenticate a user. Save a token string in Local Storage\n    *\n    * @param {object} user\n    */\n   static authenticateUser(user) {\n      localStorage.setItem('user', JSON.stringify(user));\n      return this.isUserAuthenticated();\n   }\n\n   /**\n    * Check if a user is authenticated - check if a token is saved in Local Storage\n    * @async\n    * @returns {boolean}\n    */\n   static isUserAuthenticated() {\n      return localStorage.getItem('user') !== null;\n   }\n\n   /**\n    * Deauthenticate a user. Remove a token from Local Storage.\n    * @return {boolean}\n    */\n   static deauthenticateUser() {\n      localStorage.removeItem('user');\n      return localStorage.getItem('user') === null;\n   }\n\n   /**\n    * Get a token value.\n    *\n    * @returns {string}\n    */\n   static getToken(whoCall = '') {\n      var user = localStorage.getItem('user') || null;\n      if (!user) {\n         return null;\n      }\n      user = JSON.parse(user);\n      return user.token;\n   }\n\n   /**\n    *  @returns {Boolean} Authorized : ['root','admin','ops manager', 'general manager']\n    */\n   static isAuthorizedToRemove() {\n      var userType = User.getUserType();\n\n      if (\n         userType === 'root' ||\n         userType === 'admin' ||\n         userType === 'operations manager' ||\n         userType === 'general manager'\n      ) {\n         return true;\n      }\n      return false;\n   }\n\n   /**\n    * @returns {Boolean} Admin or Root : ['root','admin']\n    */\n   static isAdminOrRoot() {\n      var userType = User.getUserType();\n\n      if (userType === 'root' || userType === 'admin') {\n         return true;\n      }\n      return false;\n   }\n}\nexport default Auth;\n","import axios from 'axios';\nimport API from '../../API';\nimport Auth from '../../Auth/Auth';\n\nexport default class AuthService {\n   static getLoginItem(username, password) {\n      return {\n         user: {\n            email: username,\n            password: password\n         }\n      };\n   }\n\n   static async login(username, password) {\n      return await axios\n         .post(API.ROUTES.AUTH.LOGIN, this.getLoginItem(username, password))\n         .then(result => {\n            let authorized = Auth.authenticateUser(result.data.user);\n            //============================\n            //reload local storage HOTFIX\n            if (authorized) {\n               window.location.reload()\n            }\n            //============================\n            return authorized;\n         })\n         .catch(error => {\n            throw error;\n         });\n   }\n\n   static isAuthenticated() {\n      return Auth.isUserAuthenticated();\n   }\n\n   static async logout() {\n      return await Auth.deauthenticateUser();\n   }\n}\n","import axios from 'axios';\nimport Auth from '../Auth/Auth';\n\n/**\n * @returns {Object} axios custom instance with Authorization JWT token header\n * @description Requests are modified with Authorization header (JWT)\n */\nvar Request = axios.create({\n   headers: {\n      Authorization: 'Token ' + Auth.getToken()\n   }\n});\n\nexport default Request;\n//JSON.parse(localStorage.getItem('user')).token\n//axios.defaults.headers.common['Authorization'] = 'Token ' + Auth.getToken();\n","export default class Employee {\n   constructor(name, email, user, type, project, team) {\n      this.name = name;\n      this.email = email;\n      this.user = user === '' ? null : user;\n      this.type = type;\n      this.project = project;\n      this.team = team;\n   }\n\n   getEmployeeDTO() {\n      return {\n         employee: {\n            name: this.name,\n            email: this.email,\n            user: this.user,\n            type: this.type,\n            project: this.project,\n            team: this.team\n         }\n      };\n   }\n\n   getCollapsedEmployeeDTO(emp) {\n      return {\n         employee: {\n            _id: emp._id,\n            email: emp.email,\n            user: emp.user._id,\n            type: emp.type._id,\n            project: emp.project._id,\n            team: emp.team._id\n         }\n      };\n   }\n}\n","import API from '../../API';\nimport Request from '../../Requests/Request';\nimport Employee from './DTO/Employee';\n\nexport default class EmployeesService {\n   static async createEmployeeDTO(name, email, user, type, project, team) {\n      return new Employee(\n         name,\n         email,\n         user,\n         type,\n         project,\n         team\n      ).getEmployeeDTO();\n   }\n\n   static async getEmployeeUpdateDTO(\n      id,\n      name,\n      email,\n      user,\n      type,\n      project,\n      team\n   ) {\n      var emp = await this.createEmployeeDTO(\n         name,\n         email,\n         user,\n         type,\n         project,\n         team\n      );\n      emp.employee._id = id;\n      return emp;\n   }\n\n   static async getEmployees() {\n      return await Request.get(API.ROUTES.EMPLOYEES.GET_EMPLOYEES)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async getEmployeeById(id) {\n      return await Request.get(API.ROUTES.EMPLOYEES.GET_EMPLOYEE_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async getEmployeeByName(name) {\n      return await Request.get(API.ROUTES.EMPLOYEES.GET_EMPLOYEE_BY_NAME + name)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async getEmployeeByUserID(id) {\n      return await Request.get(\n         API.ROUTES.EMPLOYEES.GET_EMPLOYEE_BY_USER_ID + id\n      )\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async saveEmployee(employee) {\n      return await Request.post(API.ROUTES.EMPLOYEES.CREATE_EMPLOYEE, employee)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async updateEmployee(employee) {\n      return await Request.put(API.ROUTES.EMPLOYEES.UPDATE_EMPLOYEE, employee)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async deleteEmployeeById(id) {\n      return await Request.delete(\n         API.ROUTES.EMPLOYEES.DELETE_EMPLOYEE_BY_ID + id\n      )\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n","export default class EmployeeType {\n   constructor(type) {\n      this.type = type;\n   }\n   getEmployeeDTO() {\n      return {\n         type: {\n            type: this.type\n         }\n      };\n   }\n}\n","import API from '../../API';\nimport Request from '../../Requests/Request';\nimport EmployeeTypeDTO from './DTO/EmployeeType';\n\nexport default class EmployeesTypesService {\n   static createEmployeeTypeDTO(type) {\n      return new EmployeeTypeDTO(type).getEmployeeDTO();\n   }\n   static async createEmployeeType(Type) {\n      return Request.post(\n         API.ROUTES.EMPLOYEES_TYPES.CREATE_EMPLOYEES_TYPE,\n         Type\n      )\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async getEmployeeTypes() {\n      return Request.get(API.ROUTES.EMPLOYEES_TYPES.GET_EMPLOYEES_TYPES)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async getEmployeeTypeByID(id) {\n      return Request.get(API.ROUTES.EMPLOYEES_TYPES.getEmployeeTypeByID + id)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async deleteEmployeeTypeByID(id) {\n      return Request.delete(\n         API.ROUTES.EMPLOYEES_TYPES.DELETE_EMPLOYEES_TYPE_BY_ID + id\n      )\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n","export default class KPI {\n   constructor(name, time_from, time_to, target, project, manager) {\n      this.name = name;\n      this.time_from = time_from;\n      this.time_to = time_to;\n      this.target = target;\n      this.project = project;\n      this.manager = manager;\n   }\n\n   getKPIDTO() {\n      return {\n         kpi: {\n            name: this.name,\n            time_from: this.time_from,\n            time_to: this.time_to,\n            target: this.target,\n            project: this.project,\n            manager: this.manager\n         }\n      };\n   }\n}\n","import API from '../../API';\nimport Request from '../../Requests/Request';\nimport KPIDTO from './DTO/KPIDTO';\n\nexport default class KPIService {\n   static async createKPIDTO(\n      name,\n      time_from,\n      time_to,\n      target,\n      project,\n      manager\n   ) {\n      return new KPIDTO(\n         name,\n         time_from,\n         time_to,\n         target,\n         project,\n         manager\n      ).getKPIDTO();\n   }\n\n   static async getKPIs() {\n      return await Request.get(API.ROUTES.KPI.GET_KPIS)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async getKPIById(id) {\n      return await Request.get(API.ROUTES.KPI.GET_KPI_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async getKPIByProjectId(id) {\n      return await Request.get(API.ROUTES.KPI.GET_KPI_BY_PROJECT_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async saveKPI(KPI) {\n      return await Request.post(API.ROUTES.KPI.CREATE_NEW_KPI, KPI)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async updateKPI(KPI) {\n      return await Request.put(API.ROUTES.KPI.UPDATE_KPI, KPI)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async deleteKPIById(id) {\n      return await Request.delete(API.ROUTES.KPI.DELETE_KPI_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n","export default class Report {\n   constructor(kpi, reportedBy, result, completed, status, reportedAt) {\n      this.kpi = kpi;\n      this.reportedBy = reportedBy;\n      this.result = result;\n      this.completed = completed;\n      this.status = status;\n      this.reportedAt = reportedAt;\n   }\n   /**\n    * @public\n    * @returns {Report} DTO\n    */\n   getReportDTO() {\n      return {\n         Report: {\n            kpi: this.kpi,\n            reportedBy: this.reportedBy,\n            result: this.result,\n            completed: this.completed,\n            status: this.status,\n            reportedAt: this.reportedAt\n         }\n      };\n   }\n}\n","import API from '../../API';\nimport Request from '../../Requests/Request';\nimport Report from './DTO/Report';\n\n/**\n * @author Rafal Cymbalsita\n * @class ReportsService\n * @description ReportsService : HTTP communication layer\n * @static\n */\nexport default class ReportsService {\n   /**\n    * @public\n    * @param {String} Name\n    * @param {ObjectID} Manager\n    *\n    */\n   static createReportDTO(\n      kpi,\n      reportedBy,\n      result,\n      completed,\n      status,\n      reportedAt\n   ) {\n      return new Report(\n         kpi,\n         reportedBy,\n         result,\n         completed,\n         status,\n         reportedAt\n      ).getReportDTO();\n   }\n\n   /**\n    * @public\n    * @param {Report} Report\n    * @returns - HTTP Response\n    */\n   static async saveReport(Report) {\n      return await Request.post(API.ROUTES.REPORTS.CREATE_REPORT, Report)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {Report} Report\n    * @returns - HTTP Response\n    */\n   static async updateReport(Report) {\n      return await Request.put(API.ROUTES.REPORTS.UPDATE_REPORT, Report)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} Report._id\n    * @returns - HTTP Response\n    */\n   static async deleteReportByID(id) {\n      return await Request.delete(API.ROUTES.REPORTS.DELETE_REPORT_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @returns - HTTP Response\n    * @throws - HTTP Axios Error\n    */\n   static async getReports() {\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORTS)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} Report._id\n    * @returns - HTTP Response\n    */\n   static async getReportById(id) {\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async getReportByKPIID(kpiID) {\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_KPI_ID + kpiID)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async getReportByProjectID(id) {\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_PROJECT_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n","export default class Team {\n   constructor(name, manager) {\n      this.name = name;\n      this.manager = manager;\n   }\n   getTeamDTO() {\n      return {\n         team: {\n            name: this.name,\n            manager: this.manager\n         }\n      };\n   }\n}\n","import API from '../../API';\nimport Request from '../../Requests/Request';\nimport Team from './DTO/Team';\n\n/**\n * @author Rafal Cymbalsita\n * @class TeamsService\n * @description TeamsService : HTTP communication layer\n * @static\n */\nexport default class TeamsService {\n   /**\n    * @public\n    * @param {String} Name\n    * @param {ObjectID} Manager\n    *\n    */\n   static createTeamDTO(name, manager) {\n      return new Team(name, manager).getTeamDTO();\n   }\n\n   /**\n    * @public\n    * @param {Team} Team\n    * @returns - HTTP Response\n    */\n   static async saveTeam(Team) {\n      return await Request.post(API.ROUTES.TEAMS.CREATE_NEW_TEAM, Team)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {Team} Team\n    * @returns - HTTP Response\n    */\n   static async updateTeam(Team) {\n      return await Request.put(API.ROUTES.TEAMS.UPDATE_TEAM, Team)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} Team._id\n    * @returns - HTTP Response\n    */\n   static async deleteTeamByID(id) {\n      return await Request.delete(API.ROUTES.TEAMS.DELETE_TEAM_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @returns - HTTP Response\n    * @throws - HTTP Axios Error\n    */\n   static async getTeams() {\n      return await Request.get(API.ROUTES.TEAMS.GET_TEAMS)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} Team._id\n    * @returns - HTTP Response\n    */\n   static async getTeamById(id) {\n      return await Request.get(API.ROUTES.TEAMS.GET_TEAM_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {name} Team.name\n    * @returns - HTTP Response\n    */\n   static async getTeamByName(name) {\n      return await Request.get(API.ROUTES.TEAMS.GET_TEAM_BY_NAME + name)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n","export default class Project {\n   constructor(name, manager) {\n      this.name = name;\n      this.manager = manager;\n   }\n   /**\n    * @public\n    * @returns {Project} DTO\n    */\n   getProjectDTO() {\n      return {\n         project: {\n            name: this.name,\n            manager: this.manager\n         }\n      };\n   }\n}\n","import API from '../../API';\nimport Request from '../../Requests/Request';\nimport Project from './DTO/Project';\n\n/**\n * @author Rafal Cymbalsita\n * @class ProjectsService\n * @description ProjectsService : HTTP communication layer\n * @static\n */\nexport default class ProjectsService {\n   /**\n    * @public\n    * @param {String} Name\n    * @param {ObjectID} Manager\n    *\n    */\n   static createProjectDTO(name, manager) {\n      return new Project(name, manager).getProjectDTO();\n   }\n\n   /**\n    * @public\n    * @param {Project} project\n    * @returns - HTTP Response\n    */\n   static async saveProject(project) {\n      return await Request.post(API.ROUTES.PROJECTS.CREATE_NEW_PROEJCT, project)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {Project} project\n    * @returns - HTTP Response\n    */\n   static async updateProject(project) {\n      return await Request.put(API.ROUTES.PROJECTS.UPDATE_PROJECT, project)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} project._id\n    * @returns - HTTP Response\n    */\n   static async deleteProjectByID(id) {\n      return await Request.delete(API.ROUTES.PROJECTS.DELETE_PROJECT_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @returns - HTTP Response\n    * @throws - HTTP Axios Error\n    */\n   static async getProjects() {\n      return await Request.get(API.ROUTES.PROJECTS.GET_PROJECTS)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} project._id\n    * @returns - HTTP Response\n    */\n   static async getProjectById(id) {\n      return await Request.get(API.ROUTES.PROJECTS.GET_PROJECT_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {name} project.name\n    * @returns - HTTP Response\n    */\n   static async getProjectByName(name) {\n      return await Request.get(API.ROUTES.PROJECTS.GET_PROJECT_BY_NAME + name)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n","export default class User {\n   constructor(username, email, password, usertype, active = true) {\n      this.username = username;\n      this.email = email;\n      this.password = password;\n      this.usertype = usertype;\n      this.active = active;\n   }\n\n   getUserDTO() {\n      return {\n         user: {\n            username: this.username,\n            email: this.email,\n            password: this.password,\n            usertype: this.usertype,\n            active: this.active,\n            createdAt: new Date()\n         }\n      };\n   }\n}\n","import API from '../../API';\nimport Request from '../../Requests/Request';\nimport User from './DTO/User';\n\n/**\n * @class UserService\n * @description UserService HTTP communication layer\n */\nexport default class UserService {\n   static createUserDTO(username, email, password, usertype, active = true) {\n      return new User(username, email, password, usertype, active).getUserDTO();\n   }\n   /**\n    * @public\n    * @param {User} user DTO\n    * @returns HTTP Response\n    */\n   static async saveNewUser(user) {\n      return await Request.post(API.ROUTES.USERS.CREATE_NEW_USER, user)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   /**\n    * @public\n    * @param {User} user DTO\n    * @returns HTTP Response\n    */\n   static async updateUser(user) {\n      return await Request.put(API.ROUTES.USERS.UPDATE_USER, user)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   /**\n    * @public\n    * @returns HTTP Response\n    */\n   static async deleteUser(id) {\n      return await Request.delete(API.ROUTES.USERS.DELETE_USER + id)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @returns HHTP response\n    */\n   static async getUsers() {\n      return await Request.get(API.ROUTES.USERS.GET_ALL_USERS)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @returns HTTP Response\n    */\n   static async getUserTypes() {\n      return await Request.get(API.ROUTES.USERS.USER_TYPES.GET_USER_TYPES)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n","import AuthService from './AuthService/AuthService';\nimport EmployeesService from './EmployeesService/EmployeesService';\nimport EmployeesTypesService from './EmployeesService/EmployeesTypesService';\nimport KPIsService from './KPIsService/KPIsService';\nimport ReportingService from './ReportingService/ReportingService';\nimport TeamsService from './TeamsService/TeamsService';\nimport ProjectsService from './ProjectsService/ProjectsService';\nimport UsersService from './UsersService/UserService';\n\nexport default class Services {\n   static AuthService = AuthService;\n   static EmployeesService = EmployeesService;\n   static EmployeesTypesService = EmployeesTypesService;\n   static KPIsService = KPIsService;\n   static ReportingService = ReportingService;\n   static TeamsService = TeamsService;\n   static ProjectsService = ProjectsService;\n   static UsersService = UsersService;\n}\n","import Routes from './Routes/Routes';\r\nimport Services from './Services/Services';\r\nimport Request from './Requests/Request';\r\n\r\n/**\r\n * @description Gives access to API Routes Services and Authorized Request with (JWT)\r\n */\r\nexport default class API {\r\n   /**\r\n    * @static\r\n    * @returns {Object}\r\n    * @description Gives access to all API routes\r\n    */\r\n   static ROUTES = Routes;\r\n\r\n   /**\r\n    * @static\r\n    * @returns {Object}\r\n    * @description Returns API services objects\r\n    */\r\n   static SERVICES = Services;\r\n\r\n   static REQUEST = Request;\r\n}\r\n","import { Toaster } from '@blueprintjs/core';\n\nconst doToast = Toaster.create({\n   className: '',\n   position: 'top-right',\n   maxToasts: 10\n});\n\nexport default class Notifications {\n   static simple(message) {\n      doToast.show({ message: message });\n   }\n   static success(message) {\n      doToast.show({\n         message: message,\n         intent: 'success',\n         icon: 'tick'\n      });\n   }\n   static alert(message) {\n      doToast.show({\n         message: message,\n         intent: 'warning',\n         icon: 'warning-sign'\n      });\n   }\n   static failure(message) {\n      doToast.show({\n         message: message,\n         intent: 'danger',\n         icon: 'delete'\n      });\n   }\n   static error(message) {\n      doToast.show({\n         message: message,\n         intent: 'danger',\n         icon: 'issue'\n      });\n   }\n   static custom(message, intent, icon, timeout) {\n      doToast.show({\n         message: message,\n         intent: intent,\n         icon: icon,\n         timeout: timeout\n      });\n   }\n}\n","//import User from './API/User/User';\r\nimport API from './API/API';\r\nimport Notifications from './Notifications/Notifications';\r\nimport User from './API/User/User';\r\nvar info = require('./info/info.json');\r\n\r\nexport default class Client {\r\n   /**\r\n    * @public\r\n    * @description Give access to client basic information\r\n    * @returns {JSON} ./info/info.json\r\n    */\r\n   static info = info;\r\n\r\n   /**\r\n    * @public\r\n    * @description API Object\r\n    */\r\n   static API = API;\r\n\r\n   /**\r\n    * @public\r\n    * @description API.Services\r\n    */\r\n   static Services = API.SERVICES;\r\n\r\n   /**\r\n    * @public\r\n    * @description React Client Notifications / Toasts\r\n    */\r\n   static Notifications = Notifications;\r\n\r\n   /**\r\n    * @public\r\n    * @description User Object\r\n    */\r\n   static User = User;\r\n\r\n   /**\r\n    * @public\r\n    * @description testing Authentication API route\r\n    * @returns {Object} user.username\r\n    *                   user.role\r\n    */\r\n   static async testingCurrentUserAuth() {\r\n      var data = await API.REQUEST.get(API.ROUTES.USERS.GET_CURRENT_USER)\r\n         .then(data => {\r\n            return data;\r\n         })\r\n         .catch(err => {\r\n            console.log(err);\r\n            return err;\r\n         });\r\n      if (data.err) {\r\n         return '';\r\n      }\r\n      return data.data.username + ' is ' + data.data.usertype;\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @description Login user with username and password and save USER (JWT) in localStorage\r\n    * @param {String} username\r\n    * @param {String} password\r\n    * @return {Boolean} TRUE - if successfull, FALSE othervise\r\n    */\r\n   static async login(username, password) {\r\n      return await API.SERVICES.AuthService.login(username, password);\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @returns {Boolean} if user is Authenticated\r\n    */\r\n   static isAuthenticated() {\r\n      return API.SERVICES.AuthService.isAuthenticated();\r\n   }\r\n\r\n   /**\r\n    * @public\r\n    * @return {boolean} - TRUE once operation is completed, FALSE - if error\r\n    */\r\n   static async logout() {\r\n      return await API.SERVICES.AuthService.logout(); //this.Auth.deauthenticateUser()\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Sidebar.css';\r\n\r\nexport default class Sidebar extends Component {\r\n   state = {\r\n      selected: 1\r\n   };\r\n\r\n   changeSelection(id) {\r\n      this.setState({ selected: id });\r\n   }\r\n\r\n   render() {\r\n      return <nav className='side-bar'>{this.props.children}</nav>;\r\n   }\r\n}\r\n","import React, { Component } from 'react';\n\nimport { Button, Tooltip, Position } from '@blueprintjs/core';\nimport { Link } from 'react-router-dom';\n\nexport default class SidebarItem extends Component {\n   state = {\n      selected: this.props.selected,\n      link: this.props.link\n   };\n\n   render() {\n      const { to, selected, icon, onClick, tooltip } = this.props;\n      return (\n         <div className=''>\n            <Tooltip content={tooltip} position={Position.RIGHT} fill>\n               <Link to={to}>\n                  <Button\n                     minimal\n                     large\n                     icon={icon}\n                     fill={true}\n                     active={selected ? true : false}\n                     onClick={onClick}\n                  />\n               </Link>\n            </Tooltip>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\n\nimport { Button, Tooltip, Position } from '@blueprintjs/core';\n\nexport default class SidebarItem extends Component {\n   state = {\n      selected: this.props.selected,\n      link: this.props.link\n   };\n\n   render() {\n      const { intent, icon, onClick, tooltip } = this.props;\n\n      return (\n         <div>\n            <Tooltip content={tooltip} position={Position.RIGHT} fill>\n               <Button\n                  minimal\n                  large\n                  icon={icon}\n                  fill={true}\n                  intent={intent}\n                  onClick={onClick}\n               />\n            </Tooltip>\n         </div>\n      );\n   }\n}\n","/**\n *    UIManager controls the user specific preferences in local storage\n *    ver:  0.0.1\n *    info: init release\n */\n\nimport { defaults } from 'react-chartjs-2';\n\nclass UIManager {\n   /**\n    * Save user theme in local storage\n    *\n    * @param {String} theme\n    */\n   static setTheme(theme) {\n      var t = theme.toLowerCase();\n      if (t === 'dark' || t === 'light') {\n         localStorage.setItem('theme', t);\n      }\n   }\n\n   /**\n    * Get user theme from local storage and set default theme if no theme selected\n    *    -- set light theme if no theme is set\n    *    -- return theme as {String}\n    * @returns {String} light || dark\n    *\n    */\n   static getTheme() {\n      if (!this.isThemeSet()) this.setTheme('light');\n      return localStorage.getItem('theme');\n   }\n\n   /**\n    * Check if theme is saved in local storage\n    * @returns {boolean} if light or dark theme is set\n    */\n   static isThemeSet() {\n      return localStorage.getItem('theme') !== null;\n   }\n\n   /**\n    *    Apply Selected theme\n    *       -- keeps selection in localstorage\n    *       -- theme can be selected by setTheme(theme) method\n    *       -- apply CSS class to 'bp3-dark' || 'bp3-body' to <body></body> tag\n    *       -- idea of BLUEPRINTJS UI framework\n    * @returns {void}\n    */\n   static applySelectedTheme() {\n      document.body.className =\n         UIManager.getTheme() === 'dark' ? 'bp3-dark' : 'bp3-body';\n   }\n\n   /**\n    * Switch doc theme based on selection :\n    *    -- dark\n    *    -- light\n    *\n    * @returns {void}\n    */\n   static swtichTheme() {\n      if (this.isDarkThemeEnabled()) {\n         this.setTheme('light');\n      } else {\n         this.setTheme('dark');\n      }\n      this.applySelectedTheme();\n      this.setChartView();\n      if (this.getCurrentView() === 'dashboards') {\n         window.location.reload();\n      }\n   }\n\n   /**\n    *    @returns {Boolean} if dark theme is set\n    */\n   static isDarkThemeEnabled() {\n      var th = this.getTheme();\n      if (th === 'dark') {\n         return true;\n      }\n      return false;\n   }\n\n   /**\n    * @returns {Boolean} if light theme is set\n    */\n   static isLightThemeEnabled() {\n      return !this.isDarkThemeEnabled();\n   }\n\n   static setChartView() {\n      var theme = this.getTheme();\n      if (theme === 'dark') {\n         defaults.global.defaultFontColor = 'lightgray';\n         defaults.global.legend.fontColor = 'white';\n      }\n      if (theme === 'light') {\n         defaults.global.defaultFontColor = 'black';\n         defaults.global.legend.fontColor = 'black';\n      }\n   }\n\n   static setCurrentView(view) {\n      localStorage.setItem('view', view);\n   }\n   static getCurrentView() {\n      let v = localStorage.getItem('view');\n      if (v == null) {\n         var _v = window.location.pathname.toString();\n         _v = _v.slice(1, _v.length);\n         return _v.toLocaleLowerCase();\n      }\n   }\n}\n\nexport default UIManager;\n","import React, { Component } from 'react';\nimport Sidebar from '../Sidebar/Sidebar';\nimport SidebarItem from '../Sidebar/SidebarItem';\nimport SidebarItemSpecial from '../Sidebar/SidebarItemSpecial';\nimport Client from '../../Modules/Client/Client';\nimport UIManager from '../../Modules/UIManager/UIManager';\nimport { MenuDivider } from '@blueprintjs/core';\nimport { Redirect } from 'react-router-dom';\n\nexport default class AppSideBar extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         selected: UIManager.getCurrentView(),\n         themeIcon: UIManager.isDarkThemeEnabled() ? 'flash' : 'moon',\n         themeToSwitch: UIManager.isDarkThemeEnabled() ? 'Light' : 'Dark',\n         logout: false,\n         goHome: false,\n         isOpen: false\n      };\n      this.switchTheme = this.switchTheme.bind(this);\n      this.handleLogout = this.handleLogout.bind(this);\n   }\n   componentDidMount() {\n      this.setState({\n         selected: UIManager.getCurrentView()\n      });\n   }\n\n   changeSelection(id) {\n      this.setState({ selected: id });\n      UIManager.setChartView(id);\n   }\n\n   switchTheme() {\n      UIManager.swtichTheme();\n      UIManager.setChartView();\n      this.setState({\n         themeIcon: UIManager.isDarkThemeEnabled() ? 'flash' : 'moon',\n         themeToSwitch: UIManager.isDarkThemeEnabled() ? 'Light' : 'Dark'\n      });\n   }\n\n   handleLogout = e => {\n      e.preventDefault();\n      Client.logout();\n      this.setState({\n         logout: true\n      });\n   };\n\n   render() {\n      const { selected } = this.state;\n\n      if (this.state.logout) {\n         return <Redirect to='/login' />;\n      }\n\n      return (\n         <Sidebar>\n            <div className='side-bar-logo bp3-fill'>\n               <i className='fas fa-dice-d20'></i>\n            </div>\n            <MenuDivider />\n            <div className='side-bar-group-center'>\n               <SidebarItem\n                  to='/home'\n                  icon='home'\n                  tooltip='Home'\n                  selected={selected === 'home'}\n                  onClick={() => this.changeSelection('home')}\n               />\n               <SidebarItem\n                  to='/Dashboards'\n                  icon='dashboard'\n                  tooltip='Dashboard'\n                  selected={selected === 'dashboard'}\n                  onClick={() => this.changeSelection('dashboard')}\n               />\n               <SidebarItem\n                  to='/KPIs'\n                  icon='locate'\n                  tooltip='KPIs'\n                  selected={selected === 'kpis'}\n                  onClick={() => this.changeSelection('kpis')}\n               />\n               <SidebarItem\n                  to='/Reports'\n                  icon='manually-entered-data'\n                  tooltip='Reports'\n                  selected={selected === 'reports'}\n                  onClick={() => this.changeSelection('reports')}\n               />\n               <SidebarItem\n                  to='/Projects'\n                  icon='gantt-chart'\n                  tooltip='Projects'\n                  selected={selected === 'projects'}\n                  onClick={() => this.changeSelection('projects')}\n               />\n               <SidebarItem\n                  to='/Teams'\n                  icon='people'\n                  tooltip='Teams'\n                  selected={selected === 'teams'}\n                  onClick={() => this.changeSelection('teams')}\n               />\n               <SidebarItem\n                  to='/Employees'\n                  icon='user'\n                  tooltip='Employees'\n                  selected={selected === 'employees'}\n                  onClick={() => this.changeSelection('employees')}\n               />\n\n               <SidebarItem\n                  to='/AdminPanel'\n                  icon='control'\n                  tooltip='Admin Panel'\n                  selected={selected === 'adminpanel'}\n                  onClick={() => this.changeSelection('adminpanel')}\n               />\n            </div>\n\n            <div className='side-bar-group-bottom'>\n               <MenuDivider />\n               <SidebarItemSpecial\n                  icon={this.state.themeIcon}\n                  intent=''\n                  tooltip='Switch theme'\n                  onClick={this.switchTheme}\n               />\n               <SidebarItem\n                  to='/Settings'\n                  icon='cog'\n                  tooltip='Settings'\n                  selected={selected === 'settings'}\n                  onClick={() => this.changeSelection('settings')}\n               />\n               <SidebarItemSpecial\n                  icon='power'\n                  intent='danger'\n                  tooltip='Logout'\n                  onClick={this.handleLogout}\n               />\n            </div>\n         </Sidebar>\n      );\n   }\n}\n","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport './MainContainer.css';\r\n\r\nexport default class MainContainer extends Component {\r\n   state = {\r\n      displayBgImage: this.displayBgImage(this.props.displayBgImage),\r\n      appView: this.props.app === undefined ? true : false,\r\n      homeView: this.props.app === undefined ? false : true\r\n   };\r\n\r\n   displayBgImage(disply) {\r\n      if (disply) {\r\n         return 'bg-image';\r\n      }\r\n      return '';\r\n   }\r\n\r\n   selectPlace() {\r\n      const { appView, homeView, noAppBar } = this.props;\r\n      if (appView) {\r\n         return 'main-data-app';\r\n      }\r\n      if (homeView) {\r\n         return 'main-data-home';\r\n      }\r\n      if (noAppBar) {\r\n         return 'main-data-home';\r\n      }\r\n      return '';\r\n   }\r\n\r\n   render() {\r\n      const { appView, homeView, noAppBar } = this.props;\r\n\r\n      if (appView || homeView) {\r\n         return (\r\n            <div className='main-container'>\r\n               <div\r\n                  className={`${this.displayBgImage(this.props.displayBgImage)}\r\n                        ${this.selectPlace()} `}\r\n                  id='MainContainer'\r\n               >\r\n                  {this.props.children}\r\n               </div>\r\n            </div>\r\n         );\r\n      }\r\n      if (noAppBar) {\r\n         return (\r\n            <div\r\n               className={`${this.displayBgImage(this.props.displayBgImage)}\r\n                        ${this.selectPlace()}`}\r\n               id='MainContainer'\r\n            >\r\n               {this.props.children}\r\n            </div>\r\n         );\r\n      }\r\n   }\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Client from '../Modules/Client/Client';\r\n//import AppBar from '../components/AppBar/AppBar';\r\nimport AppSidebar from '../components/AppSideBar/AppSideBar';\r\nimport MainContainer from '../components/MainContainer/MainContainer';\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n   //const { layout: Layout, component: Component, ...rest } = this.props;\r\n   return (\r\n      // Show the component only when the user is logged in\r\n      // Otherwise, redirect the user to /signin page\r\n      <Route\r\n         {...rest}\r\n         render={props =>\r\n            Client.isAuthenticated() ? (\r\n               <div>\r\n                  <AppSidebar />\r\n                  <MainContainer appView>\r\n                     <Component {...props} />\r\n                  </MainContainer>\r\n               </div>\r\n            ) : (\r\n               <Redirect to='/login' />\r\n            )\r\n         }\r\n      />\r\n   );\r\n}\r\n","import React, { Component } from 'react';\n\nexport default class Settings extends Component {\n   render() {\n      return <div></div>;\n   }\n}\n","import React, { Component } from 'react';\r\n\r\nexport default class TableHeaders extends Component {\r\n   renderTableHeader() {\r\n      return this.props.headers.map(header => {\r\n         return (\r\n            <th className={header.center ? 'text-center' : ''}>\r\n               {header.text}\r\n            </th>\r\n         );\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <thead>\r\n            <tr>{this.renderTableHeader()}</tr>\r\n         </thead>\r\n      );\r\n   }\r\n}\r\n\r\nTableHeaders.defaultProps = {\r\n   headers: []\r\n};\r\n","import React, { Component } from 'react';\r\nimport {\r\n   HTMLTable,\r\n   Button,\r\n   NonIdealState,\r\n   H5,\r\n   Spinner,\r\n   Classes\r\n} from '@blueprintjs/core';\r\n\r\nimport TableHeaders from './TableHeaders';\r\n\r\nexport default class Table extends Component {\r\n   state = {\r\n      errorMsg: ''\r\n   };\r\n   renderTableHeader() {\r\n      return <TableHeaders headers={this.props.headers} />;\r\n   }\r\n   renderTableBody() {\r\n      return <tbody>{this.renderTableRows()}</tbody>;\r\n   }\r\n   renderTableRows() {\r\n      return this.props.rows;\r\n   }\r\n\r\n   renderNonIdealState(header, information = '') {\r\n      return (\r\n         <div className='card-body'>\r\n            <NonIdealState icon='issue'>\r\n               <H5>\r\n                  <strong>{header}</strong>\r\n               </H5>\r\n               <i className={Classes.TEXT_MUTED}>{information}</i>\r\n               <Button\r\n                  icon='refresh'\r\n                  minimal\r\n                  onClick={() => {\r\n                     this.props.onRefresh();\r\n                     this.setState({\r\n                        errorMsg: ''\r\n                     });\r\n                  }}\r\n               ></Button>\r\n            </NonIdealState>\r\n         </div>\r\n      );\r\n   }\r\n\r\n   renderContent() {\r\n      if (this.props.errorMsg) {\r\n         this.renderNonIdealState('Something went wrong', 'Cannot load table');\r\n      }\r\n\r\n      if (this.props.rows.length === 0) {\r\n         return this.renderNonIdealState('There are no items to display');\r\n      }\r\n\r\n      return (\r\n         <HTMLTable\r\n            fill='true'\r\n            striped={true}\r\n            condensed\r\n            interactive\r\n            className={this.props.className}\r\n         >\r\n            {this.renderTableHeader()}\r\n            {this.renderTableBody()}\r\n         </HTMLTable>\r\n      );\r\n   }\r\n\r\n   render() {\r\n      const { isLoading } = this.props;\r\n\r\n      if (isLoading) {\r\n         return <Spinner intent='primary'></Spinner>;\r\n      }\r\n      return this.renderContent();\r\n   }\r\n}\r\n\r\nTable.defaultProps = {\r\n   rows: [],\r\n   onRefresh: function() {\r\n      return;\r\n   }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Icon } from '@blueprintjs/core';\r\n\r\nexport default class TableCell extends Component {\r\n   handleCellValue(value) {\r\n      if (typeof value === 'boolean') {\r\n         if (value) {\r\n            return <Icon icon='tick' intent='success' />;\r\n         }\r\n         return <Icon icon='cross' intent='danger' />;\r\n      }\r\n      if (typeof value === 'undefined') {\r\n         return 'N/A';\r\n      }\r\n      if (value == null) {\r\n         return 'null';\r\n      }\r\n      return value;\r\n   }\r\n\r\n   render() {\r\n      const { center, value, key } = this.props;\r\n      return (\r\n         <td className={center ? 'text-center' : ''} key={key}>\r\n            {this.handleCellValue(value)}\r\n         </td>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\n\nexport default class ProjectsTable extends Component {\n   state = {\n      selected: '',\n      headers: [\n         { text: '#', center: true },\n         { text: 'Name' },\n         { text: 'Manager' }\n      ]\n   };\n\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n   renderTableRows() {\n      const { data } = this.props;\n      return data.map((project, key) => {\n         return (\n            <tr\n               key={project._id}\n               onClick={e => this.handleSelection(e, project)}\n               className={` ${\n                  this.state.selected._id === project._id ? 'bg-selected' : ''\n               }`}\n            >\n               <TableCell center value={key} key={key} />\n               <TableCell value={project.name} />\n               <TableCell value={project.manager.name} />\n            </tr>\n         );\n      });\n   }\n\n   handleSelection(e, project) {\n      e.preventDefault();\n      const { selected } = this.state;\n      if (selected._id !== project._id) {\n         this.props.onSelection(project, false);\n         this.setState({\n            selected: project\n         });\n         return;\n      }\n      this.props.onSelection({}, true);\n      this.setState({ selected: {} });\n   }\n\n   render() {\n      return (\n         <Table\n            headers={this.state.headers}\n            rows={this.renderTableRows()}\n            errorMsg={this.props.errorMsg}\n            isLoading={this.props.isLoading}\n            onRefresh={this.props.onRefresh}\n         />\n      );\n   }\n}\nProjectsTable.defaultProps = {\n   data: [],\n   onRefresh: function() {\n      return;\n   }\n};\n","import React, { Component } from 'react';\r\nimport { HTMLSelect } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class EmployeesOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         var result = await Client.Services.EmployeesService.getEmployees();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      }\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable\r\n} from '@blueprintjs/core';\r\nimport EmployeesOptions from '../Selects/EmployeesOptions';\r\n\r\nexport default class ProjectForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name,\r\n         manager,\r\n         selectedManager\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createProjectForm'>\r\n               <HTMLTable condensed>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Project Name'\r\n                           labelFor='name'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <InputGroup\r\n                           id='name'\r\n                           onChange={onChange}\r\n                           placeholder='Project Name...'\r\n                           type='text'\r\n                           value={name}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Manager'\r\n                           labelFor='manager'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <EmployeesOptions\r\n                           id='manager'\r\n                           onChange={onChange}\r\n                           placeholder='Project Manager...'\r\n                           value={manager}\r\n                           fill\r\n                           selected={selectedManager}\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nProjectForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\nimport ProjectForm from '../Forms/ProjectForm';\n\nexport default class ProjectDialog extends Component {\n   render() {\n      return (\n         <div id='ProjectDialog'>\n            <Dialog\n               isOpen={this.props.isOpen}\n               onClose={this.props.toClose}\n               toggle={this.props.toOpen}\n            >\n               <Card>\n                  <div className='card-body'>\n                     <div id={this.props.id}>\n                        <ProjectForm\n                           name={this.props.name}\n                           manager={this.props.manager}\n                           selectedManager={this.props.selectedManager}\n                           onChange={this.props.onChange}\n                           onSubmit={this.props.handleSubmit}\n                           buttonCaption={this.props.buttonCaption}\n                           onClear={this.props.onClear}\n                        />\n                     </div>\n                  </div>\n               </Card>\n               <Alert\n                  isOpen={this.props.isAlertOpen}\n                  confirmButtonText='Clear form'\n                  onConfirm={this.props.onClear}\n                  cancelButtonText='Cancel'\n                  onCancel={this.props.closeAlert}\n                  intent='danger'\n                  icon='issue'\n                  ussePortal={\n                     <Portal\n                        container={document.getElementById('ProjectDialog')}\n                     />\n                  }\n               >\n                  <H5>{this.props.errorMessage}</H5>\n                  <strong>Do you want to clear the data?</strong>\n               </Alert>\n            </Dialog>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { ButtonGroup, Button, Divider } from '@blueprintjs/core';\n\nexport default class TableControllers extends Component {\n   render() {\n      const {\n         onEdit,\n         canEdit,\n         onAdd,\n         onDelete,\n         canDelete,\n         onRefresh\n      } = this.props;\n      return (\n         <div>\n            <ButtonGroup>{this.props.children}</ButtonGroup>\n            <ButtonGroup>\n               <Button\n                  icon='edit'\n                  small\n                  minimal\n                  onClick={onEdit}\n                  disabled={canEdit}\n               />\n               <Button icon='add' small minimal onClick={onAdd} />\n               <Button\n                  icon='trash'\n                  small\n                  minimal\n                  onClick={onDelete}\n                  disabled={canDelete}\n               />\n               <Divider />\n               <Button icon='refresh' small minimal onClick={onRefresh} />\n            </ButtonGroup>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport {\n   Tabs,\n   Tab,\n   H2,\n   Alert,\n   Portal,\n   H5,\n   Classes,\n   Card\n} from '@blueprintjs/core';\nimport ProjectsTable from '../../components/Tables/ProjectsTable';\nimport ProjectDialog from '../../components/Dialogs/ProjectDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\n\nexport default class Projects extends Component {\n   state = {\n      activeTabID: 'Projects',\n      selectedTabId: 'Projects',\n      isLoading: true,\n      data: [],\n      openAlert: true,\n      errorMessage: '',\n      isAddDialogOpen: false,\n      isEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false,\n      name: '',\n      manager: '',\n      selected: {}\n   };\n\n   getSelected = (sel, isSelected) => {\n      this.setState({\n         selected: sel,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getProjectsData();\n   }\n\n   async getProjectsData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.ProjectsService.getProjects();\n         this.setState({\n            data: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading Projects list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteUser(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.ProjectsService.deleteProjectByID(id);\n         if (result.status === 200) {\n            Client.Notifications.success('Project removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete Project');\n      } finally {\n         this.getProjectsData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { name, manager } = this.state;\n      var errorMsg = 'Unknown Error';\n      let project = await Client.Services.ProjectsService.createProjectDTO(\n         name,\n         manager\n      );\n      try {\n         let result = await Client.Services.ProjectsService.saveProject(\n            project\n         );\n         if (result.status === 200) {\n            Client.Notifications.success(`Project ${name} successfully saved`);\n            this.getProjectsData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} Project`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   handleUpdate = async e => {\n      e.preventDefault();\n      const { name, manager, selected } = this.state;\n\n      var errorMsg = 'Unknown Error';\n      try {\n         let project = await Client.Services.ProjectsService.createProjectDTO(\n            name,\n            manager\n         );\n         project.project._id = selected._id;\n         let result = await Client.Services.ProjectsService.updateProject(\n            project\n         );\n         if (result.status === 200) {\n            Client.Notifications.success(`Project ${name} successfully saved`);\n            this.getProjectsData();\n            console.log(result.data.employee);\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} project`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openDialog() {\n      this.setState({\n         isAddDialogOpen: true\n      });\n   }\n   closeDialog() {\n      this.setState({\n         isAddDialogOpen: false\n      });\n   }\n\n   openEditDialog = async e => {\n      e.preventDefault();\n      const { selected } = this.state;\n      try {\n         let result = await Client.Services.ProjectsService.getProjectById(\n            selected._id\n         );\n         if (result.status === 200) {\n            let project = result.data;\n            this.setState({\n               isEditDialogOpen: true,\n               name: project.name,\n               manager: project.manager._id\n            });\n         }\n      } catch (err) {\n         console.log(err);\n         this.setState({\n            isEditDialogOpen: true,\n            name: selected.name,\n            manager: selected.manager._id\n         });\n      }\n   };\n   closeEditDialog() {\n      this.setState({\n         isEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         name: '',\n         manager: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Projects') {\n         return (\n            <TableControllers\n               onEdit={this.openEditDialog}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getProjectsData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         data,\n         isLoading,\n         name,\n         manager,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='ProjectsPanel'>\n            <div className='mt-2'>\n               <H2>Projects Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Projects'\n                  title='Projects'\n                  panel={\n                     <Card>\n                        <ProjectsTable\n                           data={data}\n                           onRefresh={() => this.getProjectsData()}\n                           isLoading={isLoading}\n                           onSelection={this.getSelected}\n                        />\n                     </Card>\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n            <ProjectDialog\n               isOpen={this.state.isEditDialogOpen}\n               toOpen={() => this.openEditDialog()}\n               toClose={() => this.closeEditDialog()}\n               name={name}\n               manager={manager}\n               selectedManager={manager}\n               onChange={this.onChange}\n               handleSubmit={this.handleUpdate}\n               buttonCaption='Update'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n            <ProjectDialog\n               isOpen={this.state.isAddDialogOpen}\n               toOpen={() => this.openDialog()}\n               toClose={() => this.closeDialog()}\n               name={name}\n               manager={manager}\n               onChange={this.onChange}\n               handleSubmit={this.handleSubmit}\n               buttonCaption='Add'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n            <Alert\n               isOpen={this.state.isDeleteAlertOpen}\n               confirmButtonText='Delete'\n               onConfirm={() => this.deleteUser(selected._id)}\n               cancelButtonText='Cancel'\n               onCancel={() => this.closeDeleteAlert()}\n               intent='danger'\n               icon='issue'\n               ussePortal={\n                  <Portal container={document.getElementById('AdminPanel')} />\n               }\n            >\n               <H5>Are you sure that you want to delete this user?</H5>\n               <strong>{`User: ${selected.username}`}</strong>\n               <p></p>\n               <strong\n                  className={Classes.TEXT_MUTED}\n               >{`Will be permanentyly deleted...`}</strong>\n            </Alert>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\n\nexport default class ReportsTable extends Component {\n   state = {\n      selected: '',\n      headers: [\n         { text: '#', center: true },\n         { text: 'Project' },\n         { text: 'KPI' },\n         { text: 'Reported By' },\n         { text: 'Result', center: true },\n         { text: 'Completed', center: true },\n         { text: 'Status', center: true },\n         { text: 'Reported At' }\n      ]\n   };\n\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n   renderTableRows() {\n      const { data } = this.props;\n      return data.map((report, key) => {\n         return (\n            <tr\n               key={report._id}\n               onClick={e => this.handleSelection(e, report)}\n               className={` ${\n                  this.state.selected._id === report._id ? 'bg-selected' : ''\n               }`}\n            >\n               <TableCell center key={key} value={key} />\n               <TableCell value={report.kpi.project.name} />\n               <TableCell value={report.kpi.name} />\n               <TableCell value={report.reportedBy.name} />\n               <TableCell value={report.result} center />\n               <TableCell\n                  value={this.getCompletedValue(report.completed)}\n                  center\n               />\n               <TableCell value={report.status} center />\n               <TableCell value={new Date(report.reportedAt).toDateString()} />\n            </tr>\n         );\n      });\n   }\n\n   getCompletedValue(val) {\n      if (val === null) {\n         return 0;\n      }\n      let v = val.toFixed(2) * 100;\n      return v.toFixed(0) + '%';\n   }\n\n   handleSelection(e, report) {\n      e.preventDefault();\n      const { selected } = this.state;\n      if (selected._id !== report._id) {\n         this.props.onSelection(report, false);\n         this.setState({\n            selected: report\n         });\n         return;\n      }\n      this.props.onSelection({}, true);\n      this.setState({ selected: {} });\n   }\n\n   render() {\n      return (\n         <Table\n            headers={this.state.headers}\n            rows={this.renderTableRows()}\n            errorMsg={this.props.errorMsg}\n            isLoading={this.props.isLoading}\n            onRefresh={this.props.onRefresh}\n         />\n      );\n   }\n}\nReportsTable.defaultProps = {\n   data: [],\n   onRefresh: function() {\n      return;\n   }\n};\n","import React, { Component } from 'react';\r\nimport { HTMLSelect } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class KPIsOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         var result = await Client.Services.KPIsService.getKPIs();\r\n         console.log(result.data);\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      }\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.project.name + ' @ ' + option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\nimport { Form } from 'reactstrap';\nimport {\n   Button,\n   ButtonGroup,\n   FormGroup,\n   InputGroup,\n   HTMLTable,\n   NumericInput,\n   Icon,\n   Spinner\n} from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\n\nimport KPIsOptions from '../Selects/KPIsOptions';\n\nexport default class ReportForm extends Component {\n   renderRest() {\n      if (this.props.target >= this.props.result) {\n         return (\n            <div>\n               <tr>\n                  <td>Passed</td>\n                  <td>Status</td>\n               </tr>\n               <tr>\n                  <td className='text-center'>\n                     <Icon icon='tick' intent='success' />\n                  </td>\n                  <td className='text-center'>\n                     <Spinner value={this.props.result / this.props.target} />\n                  </td>\n               </tr>\n            </div>\n         );\n      }\n   }\n\n   render() {\n      const {\n         onChange,\n         onSubmit,\n         buttonCaption,\n         onClear,\n         kpi,\n         reportedBy,\n         result,\n         reportedAt,\n         selectedKPI\n      } = this.props;\n\n      return (\n         <div>\n            <Form className='mb-2' ref='createProjectForm'>\n               <HTMLTable condensed>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='KPI'\n                           labelFor='kpi'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <KPIsOptions\n                           id='kpi'\n                           ref='kpi'\n                           onChange={onChange}\n                           vale={kpi}\n                           selected={selectedKPI}\n                           fill\n                           placeholder='Select KPI...'\n                        />\n                     </td>\n                  </tr>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='Name'\n                           labelFor='name'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <InputGroup\n                           id='reportedBy'\n                           onChange={onChange}\n                           placeholder='Reported By...'\n                           type='text'\n                           value={reportedBy}\n                           disabled\n                           fill\n                        />\n                     </td>\n                  </tr>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='Reported At'\n                           labelFor='reportedAt'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <DateInput\n                           formatDate={reportedAt =>\n                              reportedAt.toLocaleDateString()\n                           }\n                           onChange={this.props.handleDateChange}\n                           parseDate={reportedAt =>\n                              new Date(reportedAt).toLocaleDateString()\n                           }\n                           placeholder='DD/MM/YYYY'\n                           defaultValue={new Date()}\n                           value={reportedAt}\n                           minDate={new Date()}\n                           fill\n                        />\n                     </td>\n                  </tr>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='Result'\n                           labelFor='result'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <NumericInput\n                           id='result'\n                           onValueChange={this.props.onResultValueChange}\n                           placeholder='Result...'\n                           type='number'\n                           value={result}\n                           fill\n                        />\n                     </td>\n                  </tr>\n\n                  {this.renderRest()}\n               </HTMLTable>\n\n               <div className='text-right'>\n                  <ButtonGroup>\n                     <Button icon='refresh' onClick={onClear}>\n                        Clear\n                     </Button>\n                     <Button icon='saved' onClick={onSubmit}>\n                        {buttonCaption}\n                     </Button>\n                  </ButtonGroup>\n               </div>\n            </Form>\n         </div>\n      );\n   }\n}\nReportForm.defaultProps = {\n   addButtonCaption: 'Add'\n};\n","import React, { Component } from 'react';\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\nimport ReportDialog from '../Forms/ReportForm';\n\nexport default class UserDialog extends Component {\n   render() {\n      return (\n         <div id='userDialog'>\n            <Dialog\n               isOpen={this.props.isOpen}\n               onClose={this.props.toClose}\n               toggle={this.props.toOpen}\n            >\n               <Card>\n                  <div className='card-body'>\n                     <div id={this.props.id}>\n                        <ReportDialog\n                           onChange={this.props.onChange}\n                           onResultValueChange={this.props.onResultValueChange}\n                           onSubmit={this.props.handleSubmit}\n                           buttonCaption={this.props.buttonCaption}\n                           onClear={this.props.onClear}\n                           kpi={this.props.kpi}\n                           reportedBy={this.props.reportedBy}\n                           result={this.props.result}\n                           completed={this.props.completed}\n                           status={this.props.status}\n                           reportedAt={this.props.reportedAt}\n                           selectedKPI={this.props.selectedKPI}\n                           handleDateChange={this.props.handleDateChange}\n                        />\n                     </div>\n                  </div>\n               </Card>\n               <Alert\n                  isOpen={this.props.isAlertOpen}\n                  confirmButtonText='Clear form'\n                  onConfirm={this.props.onClear}\n                  cancelButtonText='Cancel'\n                  onCancel={this.props.closeAlert}\n                  intent='danger'\n                  icon='issue'\n                  ussePortal={\n                     <Portal\n                        container={document.getElementById('userDialog')}\n                     />\n                  }\n               >\n                  <H5>{this.props.errorMessage}</H5>\n                  <strong>Do you want to clear the data?</strong>\n               </Alert>\n            </Dialog>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport {\n   Tabs,\n   Tab,\n   H2,\n   Alert,\n   Portal,\n   H5,\n   Classes,\n   Card\n} from '@blueprintjs/core';\nimport ReportsTable from '../../components/Tables/ReportsTable';\nimport ReportDialog from '../../components/Dialogs/ReportDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\n\nexport default class Reports extends Component {\n   state = {\n      activeTabID: 'Reports',\n      selectedTabId: 'Reports',\n      isLoading: true,\n      data: [],\n      openAlert: true,\n      errorMessage: '',\n      isEmployeesDialogOpen: false,\n      kpi: '',\n      reportedBy: '',\n      result: 0,\n      completed: '',\n      status: '',\n      reportedAt: new Date(),\n      selected: {},\n      emp: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n   };\n\n   getSelected = (emp, isSelected) => {\n      this.setState({\n         selected: emp,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getData();\n      this.setUserId();\n   }\n\n   async getData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.ReportingService.getReports();\n         this.setState({\n            data: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading reports');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async setUserId() {\n      this.setLoading(true);\n      var result;\n      try {\n         result = await Client.Services.EmployeesService.getEmployeeByUserID(\n            Client.User.getUserId()\n         );\n         this.setState({\n            emp: result.data,\n            reportedBy: result.data._id\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading Employee info');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteReportByID(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.ReportingService.deleteReportByID(id);\n         if (result.status === 200) {\n            Client.Notifications.success('Report removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete Report');\n      } finally {\n         this.getData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { kpi, emp, result, completed, status, reportedAt } = this.state;\n      var errorMsg = 'Unknown Error';\n      let report = await Client.Services.ReportingService.createReportDTO(\n         kpi,\n         emp._id,\n         result,\n         completed,\n         status,\n         reportedAt\n      );\n      try {\n         let result = await Client.Services.ReportingService.saveReport(report);\n         if (result.status === 200) {\n            Client.Notifications.success(`Report successfully saved`);\n            this.getData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving the report`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   handleUpdate = async e => {\n      e.preventDefault();\n      const { emp, kpi, completed, status, reportedAt } = this.state;\n\n      var errorMsg = 'Unknown Error';\n      try {\n         let report = await Client.Services.ReportingService.createReportDTO(\n            kpi,\n            emp._id,\n            completed,\n            status,\n            reportedAt\n         );\n         let result = await Client.Services.ReportingService.updateReport(\n            report\n         );\n         if (result.status === 200) {\n            Client.Notifications.success(`Report updated successfully`);\n            this.getData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while updating the report`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   handleResultValueChange = number => {\n      this.setState({ result: number });\n   };\n\n   handleValueChange = number => {\n      this.setState({ result: number });\n   };\n\n   handleDateChange = newFromDate => {\n      this.setState({ time_from: newFromDate });\n   };\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openDialog() {\n      this.setState({\n         isEmployeesDialogOpen: true\n      });\n   }\n   closeEmployeesDialog() {\n      this.setState({\n         isEmployeesDialogOpen: false\n      });\n   }\n\n   openEditDialog = async e => {\n      e.preventDefault();\n      const { selected } = this.state;\n      try {\n         let result = await Client.Services.ReportingService.getReportById(\n            selected._id\n         );\n         if (result.status === 200) {\n            let report = result.data;\n            this.setState({\n               isUserEditDialogOpen: true,\n               kpi: report.kpi._id,\n               reportedBy: report.reportedBy.name,\n               result: report.result,\n               completed: report.completed,\n               status: report.status,\n               reportedAt: report.reportedAt\n            });\n         }\n      } catch (err) {\n         console.log(err);\n         this.setState({\n            isUserEditDialogOpen: true,\n            kpi: selected.kpi._id,\n            reportedBy: selected.reportedBy.name,\n            result: selected.result,\n            completed: selected.completed,\n            status: selected.status,\n            reportedAt: selected.reportedAt\n         });\n      }\n   };\n   closeUserEditDialog() {\n      this.setState({\n         isUserEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         kpi: '',\n         reportedBy: '',\n         result: '',\n         completed: '',\n         status: '',\n         reportedAt: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Reports') {\n         return (\n            <TableControllers\n               onEdit={this.openEditDialog}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         emp,\n         data,\n         isLoading,\n         kpi,\n         result,\n         completed,\n         status,\n         reportedAt,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='AdminPanel'>\n            <div className='mt-2'>\n               <H2>Reports Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Reports'\n                  title='Reports'\n                  panel={\n                     <Card>\n                        <ReportsTable\n                           data={data}\n                           onRefresh={() => this.getData()}\n                           isLoading={isLoading}\n                           onSelection={this.getSelected}\n                        />\n                     </Card>\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n            <ReportDialog\n               isOpen={this.state.isUserEditDialogOpen}\n               toOpen={() => this.openEditDialog()}\n               toClose={() => this.closeUserEditDialog()}\n               kpi={kpi}\n               selectedKPI={kpi}\n               reportedBy={emp.name}\n               result={result}\n               completed={completed}\n               status={status}\n               reportedAt={reportedAt}\n               onChange={this.onChange}\n               handleDateFromChange={this.handleDateChange}\n               onResultValueChange={this.handleValueChange}\n               handleSubmit={this.handleUpdate}\n               buttonCaption='Update'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n\n            <ReportDialog\n               isOpen={this.state.isEmployeesDialogOpen}\n               toOpen={() => this.openDialog()}\n               toClose={() => this.closeEmployeesDialog()}\n               kpi={kpi}\n               reportedBy={emp.name}\n               result={result}\n               completed={completed}\n               status={status}\n               reportedAt={reportedAt}\n               onChange={this.onChange}\n               handleDateFromChange={this.handleDateChange}\n               onResultValueChange={this.handleValueChange}\n               handleSubmit={this.handleSubmit}\n               buttonCaption='Add'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n            <Alert\n               isOpen={this.state.isDeleteAlertOpen}\n               confirmButtonText='Delete'\n               onConfirm={() => this.deleteReportByID(selected._id)}\n               cancelButtonText='Cancel'\n               onCancel={() => this.closeDeleteAlert()}\n               intent='danger'\n               icon='issue'\n               ussePortal={\n                  <Portal container={document.getElementById('ReportsPanel')} />\n               }\n            >\n               <H5>Are you sure that you want to delete this user?</H5>\n               <strong>{`Report`}</strong>\n               <p></p>\n               <strong\n                  className={Classes.TEXT_MUTED}\n               >{`Will be permanentyly deleted...`}</strong>\n            </Alert>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\n\nexport default class UsersTable extends Component {\n   state = {\n      selected: '',\n      headers: [\n         { text: '#', center: true },\n         { text: 'User name' },\n         { text: 'Email' },\n         { text: 'Role' },\n         { text: 'Active', center: true }\n      ]\n   };\n\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n   renderTableRows() {\n      const { usersData } = this.props;\n      return usersData.map((user, key) => {\n         return (\n            <tr\n               key={user._id}\n               onClick={e => this.handleSelection(e, user)}\n               className={`${\n                  this.state.selected._id === user._id ? 'bg-selected' : ''\n               }`}\n            >\n               <TableCell key={key} value={key} center />\n               <TableCell value={user.username} />\n               <TableCell value={user.email} />\n               <TableCell value={user.usertype} />\n               <TableCell value={user.active} center />\n            </tr>\n         );\n      });\n   }\n\n   handleSelection(e, user) {\n      e.preventDefault();\n      const { selected } = this.state;\n      if (selected._id !== user._id) {\n         this.props.onSelection(user, false);\n         this.setState({\n            selected: user\n         });\n         return;\n      }\n      this.props.onSelection({}, true);\n      this.setState({ selected: {} });\n   }\n\n   render() {\n      return (\n         <Table\n            headers={this.state.headers}\n            rows={this.renderTableRows()}\n            errorMsg={this.props.errorMsg}\n            isLoading={this.props.isLoading}\n            onRefresh={this.props.onRefresh}\n         />\n      );\n   }\n}\nUsersTable.defaultProps = {\n   usersData: [],\n   onRefresh: function() {\n      return;\n   }\n};\n","import React, { Component } from 'react';\nimport { HTMLSelect } from '@blueprintjs/core';\n\nexport default class UserTypesOptions extends Component {\n   state = {\n      roles: ['standard', 'manager', 'director', 'admin'],\n      usertype: this.props.usertype\n   };\n\n   renderOptions() {\n      return this.state.roles.map((option, key) => {\n         return (\n            <option key={key} value={option}>\n               {option}\n            </option>\n         );\n      });\n   }\n\n   renderPlaceholder() {\n      if (this.props.selected == null) {\n         if (this.props.placeholder !== null) {\n            return (\n               <option selected hidden disabled>\n                  {this.props.placeholder}\n               </option>\n            );\n         }\n      }\n   }\n\n   render() {\n      return (\n         <HTMLSelect\n            id={this.props.id}\n            ref={this.props.ref}\n            onChange={this.props.onChange}\n            disabled={this.props.disabled}\n            fill={this.props.fill}\n            selected={this.props.selected}\n            value={this.props.selected}\n         >\n            {this.renderPlaceholder()}\n            {this.renderOptions()}\n         </HTMLSelect>\n      );\n   }\n}\nUserTypesOptions.defaultProps = {\n   placeholder: null,\n   usertype: 'standard'\n};\n","import React, { Component } from 'react';\nimport {\n   Button,\n   FormGroup,\n   InputGroup,\n   ButtonGroup,\n   Switch\n} from '@blueprintjs/core';\nimport UserTypeOptions from '../../components/Selects/UserTypeOptions';\n\nexport default class UserForm extends Component {\n   render() {\n      return (\n         <div>\n            <FormGroup\n               label='Username'\n               labelFor='username'\n               labelInfo='(required)'\n            >\n               <InputGroup\n                  id='username'\n                  leftIcon='user'\n                  onChange={this.props.onChange}\n                  placeholder='Username...'\n                  type='text'\n                  value={this.props.username}\n                  fill\n               />\n            </FormGroup>\n            <FormGroup label='Email' labelFor='email' labelInfo='(required)'>\n               <InputGroup\n                  id='email'\n                  leftIcon='envelope'\n                  onChange={this.props.onChange}\n                  placeholder='Email...'\n                  type='email'\n                  value={this.props.email}\n                  fill\n               />\n            </FormGroup>\n            <FormGroup\n               label='Password'\n               labelFor='password'\n               labelInfo='(required)'\n            >\n               <InputGroup\n                  id='password'\n                  leftIcon='key'\n                  onChange={this.props.onChange}\n                  placeholder='Username...'\n                  type='password'\n                  value={this.props.password}\n                  fill\n               />\n            </FormGroup>\n\n            <FormGroup\n               label='User Type'\n               labelFor='usertype'\n               labelInfo='(required)'\n            >\n               <UserTypeOptions\n                  id='usertype'\n                  onChange={this.props.onChange}\n                  value={this.props.usertype}\n                  selected={this.props.usertype}\n                  placeholder='Select user type'\n                  fill\n               />\n            </FormGroup>\n            <div className='text-right'>\n               <FormGroup label='Active' labelFor='active'>\n                  <Switch\n                     id='active'\n                     onChange={this.props.onChange}\n                     value={this.props.active}\n                     checked={this.props.active}\n                     defaultChecked={true}\n                     fill\n                  />\n               </FormGroup>\n            </div>\n            <div className='text-right'>\n               <ButtonGroup>\n                  <Button onClick={this.props.onClear}>\n                     {this.props.clearButtonCaption}\n                  </Button>\n                  <Button onClick={this.props.onClick}>\n                     {this.props.buttonCaption}\n                  </Button>\n               </ButtonGroup>\n            </div>\n         </div>\n      );\n   }\n}\nUserForm.defaultProps = {\n   clearButtonCaption: 'Clear',\n   buttonCaption: 'Add'\n};\n","import React, { Component } from 'react';\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\nimport UserForm from '../Forms/UserForm';\n\nexport default class UserDialog extends Component {\n   render() {\n      return (\n         <div id='userDialog'>\n            <Dialog\n               isOpen={this.props.isOpen}\n               onClose={this.props.toClose}\n               toggle={this.props.toOpen}\n            >\n               <Card>\n                  <div className='card-body'>\n                     <div id={this.props.id}>\n                        <UserForm\n                           email={this.props.email}\n                           username={this.props.username}\n                           password={this.props.password}\n                           usertype={this.props.usertype}\n                           active={this.props.active}\n                           onChange={this.props.onChange}\n                           onClick={this.props.handleSubmit}\n                           buttonCaption={this.props.buttonCaption}\n                           onClear={this.props.onClear}\n                        />\n                     </div>\n                  </div>\n               </Card>\n               <Alert\n                  isOpen={this.props.isAlertOpen}\n                  confirmButtonText='Clear form'\n                  onConfirm={this.props.onClear}\n                  cancelButtonText='Cancel'\n                  onCancel={this.props.closeAlert}\n                  intent='danger'\n                  icon='issue'\n                  ussePortal={\n                     <Portal\n                        container={document.getElementById('userDialog')}\n                     />\n                  }\n               >\n                  <H5>{this.props.errorMessage}</H5>\n                  <strong>Do you want to clear the data?</strong>\n               </Alert>\n            </Dialog>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Alert, Portal, H5, Classes } from '@blueprintjs/core';\n\nexport default class BeforeDeleteAlert extends Component {\n   render() {\n      const { isOpen, onConfirm, onCancel, portalID, info } = this.props;\n      return (\n         <Alert\n            isOpen={isOpen}\n            confirmButtonText='Delete'\n            onConfirm={onConfirm}\n            cancelButtonText='Cancel'\n            onCancel={onCancel}\n            intent='danger'\n            icon='issue'\n            ussePortal={\n               <Portal container={document.getElementById(portalID)} />\n            }\n         >\n            <H5>Are you sure that you want to delete?</H5>\n            <strong>{info}</strong>\n            <p></p>\n            <strong\n               className={Classes.TEXT_MUTED}\n            >{`Will be permanentyly deleted...`}</strong>\n         </Alert>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Tabs, Tab, H2, Card } from '@blueprintjs/core';\nimport UsersTable from '../../components/Tables/UsersTable';\nimport UserDialog from '../../components/Dialogs/UserDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\n\nexport default class AdminPanel extends Component {\n   state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: [],\n      openAlert: true,\n      errorMessage: '',\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: 'standard',\n      active: false,\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n   };\n\n   getSelected = (user, isSelected) => {\n      this.setState({\n         selected: user,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getUsersData();\n   }\n\n   async getUsersData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.UsersService.getUsers();\n         this.setState({\n            users: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading users list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteUser(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.UsersService.deleteUser(id);\n         if (result.status === 200) {\n            Client.Notifications.success('User removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete user');\n      } finally {\n         this.getUsersData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { email, username, usertype, password, active } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         usertype,\n         active\n      );\n      try {\n         let result = await Client.Services.UsersService.saveNewUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   handleUpdate = async e => {\n      e.preventDefault();\n      const {\n         email,\n         username,\n         usertype,\n         password,\n         active,\n         selected\n      } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         usertype,\n         active\n      );\n      usr.user._id = selected._id;\n      console.log(usr);\n      try {\n         let result = await Client.Services.UsersService.updateUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      if (e.target.id === 'active') {\n         let a = state.active;\n         this.setState({ active: !a });\n         return;\n      }\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openUserDialog() {\n      this.setState({\n         isUserDialogOpen: true\n      });\n   }\n   closeUserDialog() {\n      this.setState({\n         isUserDialogOpen: false\n      });\n   }\n\n   openUserEditDialog() {\n      let selected = this.state.selected;\n\n      this.setState({\n         isUserEditDialogOpen: true,\n         username: selected.username,\n         email: selected.email,\n         password: '',\n         usertype: selected.type\n      });\n   }\n   closeUserEditDialog() {\n      this.setState({\n         isUserEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         email: '',\n         username: '',\n         usertype: 'standard',\n         password: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Users') {\n         return (\n            <TableControllers\n               onEdit={() => this.openUserEditDialog()}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openUserDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getUsersData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         users,\n         isLoading,\n         email,\n         username,\n         usertype,\n         password,\n         active,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='AdminPanel'>\n            <div className='mt-2'>\n               <H2>Admin Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Users'\n                  title='Users'\n                  panel={\n                     <Card>\n                        <UsersTable\n                           usersData={users}\n                           onRefresh={() => this.getUsersData()}\n                           isLoading={isLoading}\n                           onSelection={this.getSelected}\n                        />\n                        <UserDialog\n                           isOpen={this.state.isUserEditDialogOpen}\n                           toOpen={() => this.openUserEditDialog()}\n                           toClose={() => this.closeUserEditDialog()}\n                           email={email}\n                           username={username}\n                           password={password}\n                           usertype={usertype}\n                           active={active}\n                           onChange={this.onChange}\n                           handleSubmit={this.handleUpdate}\n                           buttonCaption='Update'\n                           onClear={() => this.clearForm()}\n                           isAlertOpen={isAlertOpen}\n                           closeAlert={() => this.closeAlert()}\n                        />\n                        <UserDialog\n                           isOpen={this.state.isUserDialogOpen}\n                           toOpen={() => this.openUserDialog()}\n                           toClose={() => this.closeUserDialog()}\n                           email={email}\n                           username={username}\n                           password={password}\n                           usertype={usertype}\n                           active={active}\n                           onChange={this.onChange}\n                           handleSubmit={this.handleSubmit}\n                           buttonCaption='Add'\n                           onClear={() => this.clearForm()}\n                           isAlertOpen={isAlertOpen}\n                           closeAlert={() => this.closeAlert()}\n                        />\n                        <BeforeDeleteAlert\n                           isOpen={this.state.isDeleteAlertOpen}\n                           onConfirm={() => this.deleteUser(selected._id)}\n                           onCancel={() => this.closeDeleteAlert()}\n                           portalID='AdminPanel'\n                           info={`User: ${selected.username}`}\n                        />\n                     </Card>\n                  }\n               />\n\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport './StdCard.css';\n\nexport default class CardHeader extends Component {\n   render() {\n      return (\n         <div\n            className={`bp3-card-header ${\n               this.props.isBodyOpen ? '' : 'bp3-border-collapsed'\n            }`}\n         >\n            <div className='bp3-card-header-content'>{this.props.children}</div>\n         </div>\n      );\n   }\n}\n\nCardHeader.defaultProps = {\n   isBodyOpen: true\n};\n\n/*\n<div className='bp3-card-header'>\n   <div className='bp3-card-header-content'>{this.props.children}</div>\n</div>\n*/\n","import React, { Component } from 'react';\nimport './StdCard.css';\n\nexport default class CardBody extends Component {\n   render() {\n      return <div className='bp3-card-body'>{this.props.children}</div>;\n   }\n}\n\n//return <div className='bp3-card-body'>{this.props.children}</div>;\n","import React, { Component } from 'react';\r\nimport {\r\n   Line,\r\n   Bar,\r\n   Pie,\r\n   Doughnut,\r\n   HorizontalBar,\r\n   Radar,\r\n   defaults\r\n} from 'react-chartjs-2';\r\nimport UIManager from '../../../Modules/UIManager/UIManager';\r\n\r\nexport default class Chart_ extends Component {\r\n   state = {\r\n      theme: UIManager.getTheme()\r\n   };\r\n\r\n   componentWillReceiveProps() {\r\n      this.setChartFontColor();\r\n   }\r\n\r\n   setChartFontColor() {\r\n      const { theme } = this.state;\r\n\r\n      if (theme === 'dark') {\r\n         defaults.global.defaultFontColor = 'lightgray';\r\n         defaults.global.legend.fontColor = 'white';\r\n      }\r\n      if (theme === 'light') {\r\n         defaults.global.defaultFontColor = 'black';\r\n         defaults.global.legend.fontColor = 'black';\r\n      }\r\n   }\r\n\r\n   getChartOption(\r\n      _displyGridLinesX = true,\r\n      _displyGridLinesY = true,\r\n      _isDoughnut = false\r\n   ) {\r\n      this.setChartFontColor();\r\n      let _doughnutHole = 0;\r\n      if (_isDoughnut) _doughnutHole = 75;\r\n      let chartOption = {\r\n         maintainAspectRatio: true,\r\n         legend: {\r\n            labels: {\r\n               //fontColor: \"black\"\r\n            }\r\n         },\r\n         responsive: true,\r\n         cutoutPercentage: _doughnutHole,\r\n         scales: {\r\n            xAxes: [\r\n               {\r\n                  ticks: {\r\n                     display: !_isDoughnut\r\n                  },\r\n                  gridLines: {\r\n                     display: _displyGridLinesX,\r\n                     drawBorder: false,\r\n                     color: 'rgb(0,0,0,0.1)'\r\n                  }\r\n               }\r\n            ],\r\n            yAxes: [\r\n               {\r\n                  ticks: {\r\n                     display: !_isDoughnut\r\n                  },\r\n                  gridLines: {\r\n                     display: _displyGridLinesY,\r\n                     drawBorder: false,\r\n                     color: 'rgb(0,0,0,0.1)'\r\n                  }\r\n               }\r\n            ]\r\n         }\r\n      };\r\n      return chartOption;\r\n   }\r\n\r\n   //chart factory\r\n   getChart(chartType, data, height, width) {\r\n      if ((chartType === 'Bar') | (chartType === 'bar')) {\r\n         return (\r\n            <Bar\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if (\r\n         (chartType === 'HorizontalBar') |\r\n         (chartType === 'horizontalBar') |\r\n         (chartType === 'hBar')\r\n      ) {\r\n         return (\r\n            <HorizontalBar\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Line') | (chartType === 'line')) {\r\n         return (\r\n            <Line\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Pie') | (chartType === 'pie')) {\r\n         return (\r\n            <Pie\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Radar') | (chartType === 'radar')) {\r\n         return (\r\n            <Radar\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === 'Doughnut') | (chartType === 'doughnut')) {\r\n         return (\r\n            <Doughnut\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const { chartType, data, height, width } = this.props;\r\n\r\n      return <div>{this.getChart(chartType, data, height, width)}</div>;\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Card, Icon, Dialog } from '@blueprintjs/core';\r\nimport CardHeader from '../CardHeader';\r\nimport CardBody from '../CardBody';\r\nimport Chart from '../../Charts/Chart/Chart';\r\n\r\nexport default class CardWithChart extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         modal: false\r\n      };\r\n      this.windowMaximize = this.windowMaximize.bind(this);\r\n   }\r\n\r\n   toggle = () => {\r\n      this.setState(state => ({ collapse: !state.collapse }));\r\n   };\r\n\r\n   windowMaximize() {\r\n      this.setState(state => ({\r\n         modal: !state.modal\r\n      }));\r\n   }\r\n\r\n   render() {\r\n      const { headerText, chartType, data, height, width } = this.props;\r\n\r\n      return (\r\n         <Card>\r\n            <CardHeader>\r\n               <span class='fas fa-chart-line header-icon mr-2' />\r\n               {headerText}\r\n               <div className='float-right'>\r\n                  <Icon\r\n                     icon='maximize'\r\n                     iconSize={14}\r\n                     className='mr-2'\r\n                     onClick={this.windowMaximize}\r\n                  />\r\n               </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n               <Chart\r\n                  theme={this.state.theme}\r\n                  chartType={chartType}\r\n                  data={data}\r\n                  width={width}\r\n                  height={height}\r\n               />\r\n            </CardBody>\r\n            <Dialog\r\n               isOpen={this.state.modal}\r\n               onClose={() => this.windowMaximize()}\r\n               className='modal-full modal-my'\r\n            >\r\n               <Card>\r\n                  <CardHeader>\r\n                     <span class='fas fa-chart-line header-icon' />\r\n                     {headerText}\r\n                     <div className='float-right'>\r\n                        <Icon\r\n                           icon='minimize'\r\n                           iconSize={14}\r\n                           onClick={this.windowMaximize}\r\n                        />\r\n                     </div>\r\n                  </CardHeader>\r\n                  <CardBody className='card-body'>\r\n                     <Chart\r\n                        theme={this.props.theme}\r\n                        chartType={chartType}\r\n                        data={data}\r\n                        width={width}\r\n                        height={height}\r\n                     />\r\n                  </CardBody>\r\n               </Card>\r\n            </Dialog>\r\n         </Card>\r\n      );\r\n   }\r\n}\r\nCardWithChart.defaultProps = {\r\n   size: 'm'\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport ChartCard from '../../../components/Card/ChartCard/ChartCard';\r\n\r\nconst testData = require('../../../Data_OldStatic/old_data');\r\n\r\nexport default class MainDashboard extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         showReportFilter: false,\r\n         activeTab: '1'\r\n      };\r\n   }\r\n\r\n   switchTab(tab) {\r\n      if (this.state.activeTab !== tab) {\r\n         this.setState({\r\n            activeTab: tab\r\n         });\r\n      }\r\n   }\r\n\r\n   testd = testData;\r\n\r\n   labels() {\r\n      return this.testd.map(P => P.Project_Name);\r\n   }\r\n\r\n   getKPITargetData() {\r\n      return this.testd.map(P => P.Result);\r\n   }\r\n\r\n   getKPIData() {\r\n      return this.testd.map(P => P.Target);\r\n   }\r\n\r\n   data = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'Data',\r\n            backgroundColor: '#008FFB',\r\n            borderColor: '#008FFB',\r\n            data: this.getKPITargetData()\r\n         }\r\n      ]\r\n   };\r\n   dataBar = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'KPI 1',\r\n            backgroundColor: '#008FFB',\r\n            data: this.getKPIData()\r\n         },\r\n         {\r\n            label: 'Target',\r\n            backgroundColor: '#00E396',\r\n            data: this.getKPITargetData()\r\n         }\r\n      ]\r\n   };\r\n   data_line = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'KPI 2',\r\n            borderColor: '#008FFB',\r\n            backgroundColor: 'transparent',\r\n            data: this.getKPIData()\r\n         },\r\n         {\r\n            label: 'Target',\r\n            borderColor: '#00E396',\r\n            backgroundColor: 'rgba(0,0,0,0)',\r\n            data: this.getKPITargetData()\r\n         }\r\n      ]\r\n   };\r\n   dataRound = {\r\n      labels: ['a', 'b'],\r\n      datasets: [\r\n         {\r\n            label: 'Data',\r\n            backgroundColor: ['#4099ff', '#FFF3201'],\r\n            borderColor: 'transparent',\r\n            data: [90, 10]\r\n         }\r\n      ]\r\n   };\r\n\r\n   switchShowReportFilter = () => {\r\n      this.setState(state => ({\r\n         showReportFilter: !state.showReportFilter\r\n      }));\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <Row>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Bar'\r\n                     data={this.dataBar}\r\n                     headerText='Graf'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Line'\r\n                     data={this.data_line}\r\n                     headerText='Graf'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Line'\r\n                     data={this.data}\r\n                     headerText='Line_test'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Bar'\r\n                     data={this.data}\r\n                     headerText='Bar_test'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Pie'\r\n                     data={this.dataRound}\r\n                     headerText='Pie Test'\r\n                     size='s'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={6} lg={6} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Doughnut'\r\n                     data={this.dataRound}\r\n                     headerText='Doughnut test'\r\n                     size='s'\r\n                     height={300}\r\n                     width={700}\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={12} lg={12} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='Radar'\r\n                     data={this.dataBar}\r\n                     headerText='Radar test'\r\n                     height={300}\r\n                     width={700}\r\n                     size='s'\r\n                  />\r\n               </Col>\r\n\r\n               <Col xl={12} lg={12} md={12} sm={12} xs={12} className='mt-3'>\r\n                  <ChartCard\r\n                     chartType='hBar'\r\n                     data={this.dataBar}\r\n                     headerText='Horizontal Bar'\r\n                     height={300}\r\n                     width={700}\r\n                     size='xl'\r\n                  />\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\nimport { ButtonGroup, Button, Divider } from '@blueprintjs/core';\n\nexport default class DashboardControllers extends Component {\n   render() {\n      const { onRefresh } = this.props;\n      return (\n         <div>\n            <ButtonGroup>{this.props.children}</ButtonGroup>\n            <ButtonGroup>\n               {this.props.children}\n               <Divider />\n               <Button icon='refresh' small minimal onClick={onRefresh} />\n            </ButtonGroup>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Card, Icon, Dialog } from '@blueprintjs/core';\nimport CardHeader from './CardHeader';\nimport CardBody from './CardBody';\n\nexport default class CardWithModal extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         modal: false\n      };\n      this.windowMaximize = this.windowMaximize.bind(this);\n   }\n\n   toggle = () => {\n      this.setState(state => ({ collapse: !state.collapse }));\n   };\n\n   windowMaximize() {\n      this.setState(state => ({\n         modal: !state.modal\n      }));\n   }\n\n   render() {\n      const { headerText } = this.props;\n\n      return (\n         <Card className={this.props.className}>\n            <CardHeader>\n               <span class='fas fa-chart-line header-icon mr-2' />\n               {headerText}\n               <div className='float-right'>\n                  <Icon\n                     icon='maximize'\n                     iconSize={14}\n                     className='mr-2'\n                     onClick={this.windowMaximize}\n                  />\n               </div>\n            </CardHeader>\n            <CardBody>{this.props.children}</CardBody>\n            <Dialog\n               isOpen={this.state.modal}\n               onClose={() => this.windowMaximize()}\n               className='modal-full modal-my'\n            >\n               <Card>\n                  <CardHeader>\n                     <span class='fas fa-chart-line header-icon' />\n                     {headerText}\n                     <div className='float-right'>\n                        <Icon\n                           icon='minimize'\n                           iconSize={14}\n                           onClick={this.windowMaximize}\n                        />\n                     </div>\n                  </CardHeader>\n                  <CardBody className='card-body'>\n                     {this.props.children}\n                  </CardBody>\n               </Card>\n            </Dialog>\n         </Card>\n      );\n   }\n}\nCardWithModal.defaultProps = {\n   size: 'm'\n};\n","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport { NonIdealState } from '@blueprintjs/core';\nimport UIManager from '../../../Modules/UIManager/UIManager';\n\nexport default class LineChart extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         options: {\n            chart: {\n               id: 'basic-bar',\n               background: 'transparent',\n               dropShadow: {\n                  enabled: true,\n                  color: '#000',\n                  top: 18,\n                  left: 7,\n                  blur: 10,\n                  opacity: 0.2\n               },\n               foreColor:\n                  UIManager.getTheme() === 'dark' ? '#f5f8fa' : '#1e1e1e',\n               toolbar: false\n            },\n            dataLabels: {\n               enabled: true\n            },\n            stroke: {\n               curve: 'smooth'\n            },\n            title: {\n               text: 'Some Data',\n               align: 'left'\n            },\n            grid: {\n               borderColor: 'rbga(0,0,0,0.5)',\n               row: {\n                  colors: ['rgba(0,0,0,0.2)', 'transparent'], // takes an array which will be repeated on columns\n                  opacity: 0.5\n               }\n            },\n            xaxis: {\n               type: 'date',\n               labels: {\n                  style: {\n                     cssClass: 'text'\n                  }\n               },\n\n               categories: this.props.labels,\n               axisBorder: {\n                  show: true\n               },\n               tooltip: {\n                  enabled: false\n               }\n            },\n            yaxis: {\n               //min: 5,\n               max:\n                  Math.max(this.props.series[0].data) > this.props.targetValue\n                     ? Math.max(this.props.series[0].data) + 30\n                     : this.props.targetValue + 30\n            },\n            annotations: {\n               position: 'back',\n               yaxis: [\n                  {\n                     y: this.props.targetValue,\n                     y2: null,\n                     strokeDashArray: 3,\n                     borderColor: 'red',\n                     fillColor: '#b30000',\n                     opacity: 0.8,\n                     offsetX: 0,\n                     offsetY: 0,\n                     yAxisIndex: 0,\n                     label: {\n                        borderColor: 'transparent',\n                        style: {\n                           color: '#fff',\n                           background: '#b30000'\n                        },\n                        position: 'right',\n                        offsetX: 0,\n                        offsetY: 15,\n                        text:\n                           this.props.targetInfo + ': ' + this.props.targetValue\n                     }\n                  },\n                  {\n                     y: this.getAverage(),\n                     y2: null,\n                     strokeDashArray: 3,\n                     borderColor: '#279f27',\n                     fillColor: '#279f27',\n                     opacity: 0.8,\n                     offsetX: 0,\n                     offsetY: 0,\n                     yAxisIndex: 0,\n                     label: {\n                        borderColor: 'transparent',\n                        style: {\n                           color: '#fff',\n                           background: '#279f27'\n                        },\n                        position: 'right',\n                        text: 'Average: ' + this.getAverage(),\n                        offsetX: 0,\n                        offsetY: 0\n                     }\n                  }\n               ]\n            },\n            legend: {\n               position: 'top',\n               horizontalAlign: 'right',\n               floating: true,\n               offsetY: -25,\n               offsetX: -5\n            }\n         },\n         series: this.props.series\n      };\n   }\n\n   getAverage() {\n      if (this.props.series[0].data.length === 0) {\n         return 0;\n      }\n      let values = this.props.series[0].data;\n      let sum = values.reduce((previous, current) => (current += previous));\n      let avg = sum / values.length;\n      return avg.toPrecision(3);\n   }\n   render() {\n      if (this.props.series[0].data.length === 0) {\n         return (\n            <NonIdealState\n               icon='warning-sign'\n               description='There is no data to be displayed'\n            />\n         );\n      }\n      return (\n         <Chart\n            options={this.state.options}\n            series={this.props.series}\n            type='line'\n            width='100%'\n            height={300}\n         />\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport CardWithModal from '../../../components/Card/CardWithModal';\nimport LineChart from '../../../components/Charts/ApexChart/LineChart';\nimport { Row, Col } from 'reactstrap';\n\nexport default class ChartsBuilder extends Component {\n   state = {\n      kpis: []\n   };\n   componentDidMount() {\n      this.unpackData();\n   }\n\n   unpackData() {\n      var k = this.props.data.map(d => {\n         return {\n            name: d.name,\n            target: d.target,\n            labels: d.reports.map(r => {\n               return new Date(r.reportedAt).toLocaleString();\n            }),\n            series: [\n               {\n                  name: d.name,\n                  data: d.reports.map(r => {\n                     return r.result;\n                  })\n               }\n            ]\n         };\n      });\n      this.setState({ kpis: k });\n   }\n   renderKPIs() {\n      return this.state.kpis.map((kpi, key) => {\n         return (\n            <Col xs='12'>\n               <CardWithModal\n                  headerText={kpi.name}\n                  className={key > 0 ? 'mt-3' : ''}\n               >\n                  <LineChart\n                     labels={kpi.labels}\n                     yaxisLabel='Results'\n                     xasisLabel='Reports'\n                     series={kpi.series}\n                     targetValue={kpi.target}\n                     targetInfo='KPI target'\n                  />\n               </CardWithModal>\n            </Col>\n         );\n      });\n   }\n\n   render() {\n      return <Row>{this.renderKPIs()}</Row>;\n   }\n}\n\nChartsBuilder.defaultProps = {\n   data: []\n};\n","import React, { Component } from 'react';\r\nimport { HTMLSelect } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class ProjectOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         var result = await Client.Services.ProjectsService.getProjects();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      }\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\nimport { Tabs, Tab, H2, Spinner, NonIdealState } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport MainDashboard from './components/MainDashboard';\nimport DashboardControllers from './components/DashboardControllers';\nimport TestView2 from './components/ChartsBuilder';\nimport ProjectOptions from '../../components/Selects/ProjectOptions';\n\nexport default class Dashboard extends Component {\n   state = {\n      activeTabID: 'KPIs',\n      selectedTabId: 'KPIs',\n      isLoading: true,\n      data: [],\n      errorMessage: '',\n      project: ''\n   };\n\n   componentDidMount() {\n      this.getData();\n   }\n\n   async getData() {\n      this.setLoading(true);\n      const { project } = this.state;\n\n      if (project === '') {\n         this.setLoading(false);\n         return;\n      }\n\n      try {\n         //this.resetErrorMsg();\n         var result = await Client.Services.ReportingService.getReportByProjectID(\n            project\n         );\n         this.setState({\n            data: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading reports');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChangeProject = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n      this.getData();\n   };\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Dashboards') {\n         return <DashboardControllers onRefresh={() => this.getData()} />;\n      }\n   }\n\n   renderProjectOptions() {\n      return (\n         <ProjectOptions\n            id='project'\n            ref='project'\n            onChange={this.onChangeProject}\n            value={this.state.project}\n            placeholder='Select Project...'\n         />\n      );\n   }\n   renderContent() {\n      const { project, isLoading, data } = this.state;\n      if (project === '') {\n         return (\n            <NonIdealState\n               title='No project selected yet'\n               description='Please select project'\n            >\n               {this.renderProjectOptions()}\n            </NonIdealState>\n         );\n      }\n\n      if (isLoading) {\n         return <Spinner></Spinner>;\n      }\n\n      if (data.length === 0) {\n         return (\n            <NonIdealState\n               icon='issue'\n               title=\"Selected Project don't have KPIs\"\n               description='Please select different Project'\n            >\n               {this.renderProjectOptions()}\n            </NonIdealState>\n         );\n      }\n\n      return (\n         <Tabs\n            onChange={this.handleTabChange}\n            selectedTabId={this.state.selectedTabId}\n            large\n         >\n            <Tab\n               id='KPIs'\n               title='KPIs'\n               panel={\n                  <TestView2\n                     labels={this.state.labels}\n                     yaxisLabel='Results'\n                     xasisLabel='Reports'\n                     series={this.state.series}\n                     targetValue={this.state.target}\n                     targetInfo='KPI target'\n                     data={this.state.data}\n                  />\n               }\n            />\n            <Tab id='Beta' title='Beta' panel={<MainDashboard />} />\n            <Tabs.Expander />\n            {this.renderControlls()}\n         </Tabs>\n      );\n   }\n\n   render() {\n      return (\n         <div id='Dashboards'>\n            <div className='mt-2'>\n               <H2>\n                  Dashboard Panel\n                  <div className='float-right'>\n                     {this.renderProjectOptions()}\n                  </div>\n               </H2>\n            </div>\n            {this.renderContent()}\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\nimport TableHeaders from './TableHeaders';\n\nexport default class KPIsTable extends Component {\n   state = {\n      selected: '',\n      headers: [\n         { text: '#', center: true },\n         { text: 'KPI' },\n         { text: 'Valid From' },\n         { text: 'Valid Until' },\n         { text: 'Target', center: true },\n         { text: 'Project' },\n         { text: 'Manager' }\n      ]\n   };\n\n   renderTableHeader() {\n      return <TableHeaders headers={this.state.headers} />;\n   }\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n   renderTableRows() {\n      const { data } = this.props;\n      return data.map((kpi, key) => {\n         return (\n            <tr\n               key={kpi._id}\n               onClick={e => this.handleSelection(e, kpi)}\n               className={`${\n                  this.state.selected._id === kpi._id ? 'bg-selected' : ''\n               }`}\n            >\n               <TableCell key={key} value={key} center />\n               <TableCell value={kpi.name} />\n               <TableCell\n                  value={new Date(kpi.time_from).toLocaleDateString()}\n               />\n               <TableCell value={new Date(kpi.time_to).toLocaleDateString()} />\n               <TableCell value={kpi.target} center />\n               <TableCell value={kpi.project.name} />\n               <TableCell value={kpi.manager.name} />\n            </tr>\n         );\n      });\n   }\n\n   handleSelection(e, kpi) {\n      e.preventDefault();\n      const { selected } = this.state;\n      if (selected._id !== kpi._id) {\n         this.props.onSelection(kpi, false);\n         this.setState({\n            selected: kpi\n         });\n         return;\n      }\n      this.props.onSelection({}, true);\n      this.setState({ selected: {} });\n   }\n\n   render() {\n      return (\n         <Table\n            headers={this.state.headers}\n            rows={this.renderTableRows()}\n            errorMsg={this.props.errorMsg}\n            isLoading={this.props.isLoading}\n            onRefresh={this.props.onRefresh}\n         />\n      );\n   }\n}\nKPIsTable.defaultProps = {\n   data: [],\n   onRefresh: function() {\n      return;\n   }\n};\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable,\r\n   NumericInput\r\n} from '@blueprintjs/core';\r\nimport { DateInput } from '@blueprintjs/datetime';\r\n\r\nimport ProjectOptions from '../Selects/ProjectOptions';\r\nimport EmployeesOptions from '../Selects/EmployeesOptions';\r\n\r\nexport default class KPIForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onTargetValueChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name, //String\r\n         time_from, //Date\r\n         time_to, //date\r\n         target, // number\r\n         project, //ProjectOPt\r\n         selectedProject,\r\n         manager, //ManagerOPT\r\n         selectedManager\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createProjectForm'>\r\n               <HTMLTable condensed>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Name'\r\n                           labelFor='name'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <InputGroup\r\n                           id='name'\r\n                           onChange={onChange}\r\n                           placeholder='Name...'\r\n                           type='text'\r\n                           value={name}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Time From'\r\n                           labelFor='fime_from'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <DateInput\r\n                           formatDate={time_from =>\r\n                              time_from.toLocaleDateString()\r\n                           }\r\n                           onChange={this.props.handleDateFromChange}\r\n                           parseDate={time_from =>\r\n                              new Date(time_from).toLocaleDateString()\r\n                           }\r\n                           placeholder='DD/MM/YYYY'\r\n                           defaultValue={new Date()}\r\n                           value={time_from}\r\n                           minDate={new Date()}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Time To'\r\n                           labelFor='fime_to'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <DateInput\r\n                           formatDate={time_to => time_to.toLocaleDateString()}\r\n                           onChange={this.props.handleDateToChange}\r\n                           parseDate={time_to =>\r\n                              new Date(time_to).toLocaleDateString\r\n                           }\r\n                           placeholder='DD/MM/YYYY'\r\n                           defaultValue={new Date()}\r\n                           value={time_to}\r\n                           minDate={new Date()}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Target'\r\n                           labelFor='Target'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <NumericInput\r\n                           id='target'\r\n                           onValueChange={onTargetValueChange}\r\n                           placeholder='Target...'\r\n                           type='number'\r\n                           value={target}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Project'\r\n                           labelFor='project'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <ProjectOptions\r\n                           id='project'\r\n                           onChange={onChange}\r\n                           placeholder='Project...'\r\n                           value={project}\r\n                           selected={selectedProject}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Manager'\r\n                           labelFor='team'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <EmployeesOptions\r\n                           id='manager'\r\n                           ref='manager'\r\n                           onChange={onChange}\r\n                           vale={manager}\r\n                           selected={selectedManager}\r\n                           fill\r\n                           placeholder='Select Manager...'\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nKPIForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\nimport KPIForm from '../Forms/KPIForm';\n\nexport default class UserDialog extends Component {\n   render() {\n      return (\n         <div id='userDialog'>\n            <Dialog\n               isOpen={this.props.isOpen}\n               onClose={this.props.toClose}\n               toggle={this.props.toOpen}\n            >\n               <Card>\n                  <div className='card-body'>\n                     <div id={this.props.id}>\n                        <KPIForm\n                           kpi={this.props.kpi}\n                           reportedBy={this.props.reportedBy}\n                           result={this.props.result}\n                           completed={this.props.completed}\n                           status={this.props.status}\n                           reportedAt={this.props.reportedAt}\n                           selectedKPI={this.props.selectedKPI}\n                           onChange={this.props.onChange}\n                           handleDateChange={this.props.handleDateToChange}\n                           onResultValueChange={this.props.onResultValueChange}\n                           onSubmit={this.props.handleSubmit}\n                           buttonCaption={this.props.buttonCaption}\n                           onClear={this.props.onClear}\n                        />\n                     </div>\n                  </div>\n               </Card>\n               <Alert\n                  isOpen={this.props.isAlertOpen}\n                  confirmButtonText='Clear form'\n                  onConfirm={this.props.onClear}\n                  cancelButtonText='Cancel'\n                  onCancel={this.props.closeAlert}\n                  intent='danger'\n                  icon='issue'\n                  ussePortal={\n                     <Portal\n                        container={document.getElementById('userDialog')}\n                     />\n                  }\n               >\n                  <H5>{this.props.errorMessage}</H5>\n                  <strong>Do you want to clear the data?</strong>\n               </Alert>\n            </Dialog>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Tabs, Tab, H2, Divider, Card } from '@blueprintjs/core';\nimport KPIsTable from '../../components/Tables/KPIsTable';\nimport KPIDialog from '../../components/Dialogs/KPIDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\n\nexport default class Teams extends Component {\n   state = {\n      activeTabID: 'KPIs',\n      selectedTabId: 'KPIs',\n      isLoading: true,\n      data: [],\n      isNoData: true,\n      openAlert: true,\n      errorMessage: '',\n      isAddDialogOpen: false,\n      isEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false,\n      name: '',\n      time_from: new Date(),\n      time_to: this.setDefaultToDate(new Date()),\n      target: 0,\n      project: '',\n      manager: '',\n      selected: {}\n   };\n\n   setDefaultToDate(d) {\n      const finalDate = new Date();\n      finalDate.setDate(d.getDate() + 30);\n      return finalDate;\n   }\n\n   getSelected = (sel, isSelected) => {\n      this.setState({\n         selected: sel,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getData();\n   }\n\n   async getData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.KPIsService.getKPIs();\n         this.setState({\n            data: result.data,\n            isNoData: false\n         });\n         if (result.data.length === 0) {\n            this.setState({ isNoData: true });\n         }\n      } catch (err) {\n         this.handleError(err);\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteItem(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.KPIsService.deleteKPIById(id);\n         if (result.status === 200) {\n            Client.Notifications.success('KPI removed successfully');\n         }\n      } catch (err) {\n         this.handleError(err);\n      } finally {\n         this.getData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { name, time_from, time_to, target, project, manager } = this.state;\n      let kpi = await Client.Services.KPIsService.createKPIDTO(\n         name,\n         time_from,\n         time_to,\n         target,\n         project,\n         manager\n      );\n      console.log(kpi);\n      try {\n         let result = await Client.Services.KPIsService.saveKPI(kpi);\n         if (result.status === 200) {\n            Client.Notifications.success(`KPI ${name} successfully saved`);\n            this.getData();\n         }\n      } catch (err) {\n         this.handleError(err);\n      }\n   };\n   handleUpdate = async e => {\n      e.preventDefault();\n      const {\n         name,\n         time_from,\n         time_to,\n         target,\n         project,\n         manager,\n         selected\n      } = this.state;\n\n      try {\n         let kpi = await Client.Services.KPIsService.createKPIDTO(\n            name,\n            time_from,\n            time_to,\n            target,\n            project,\n            manager\n         );\n         kpi.kpi._id = selected._id;\n         let result = await Client.Services.KPIsService.updateKPI(kpi);\n         if (result.status === 200) {\n            Client.Notifications.success(`KPI ${name} successfully saved`);\n            this.getData();\n         }\n      } catch (err) {\n         this.handleError(err);\n      }\n   };\n\n   handleError(err) {\n      var errorMsg = 'Unknown Error';\n      if (err.response.status === 409) {\n         errorMsg = `Error: ${err.response.data.message}`;\n         Client.Notifications.alert(errorMsg);\n      }\n      if (err.response.status !== 409) {\n         errorMsg = `Error:  while saving: item`;\n         Client.Notifications.error(errorMsg);\n      }\n      this.openAlert(errorMsg);\n   }\n\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   handleTargetValueChange = number => {\n      this.setState({ target: number });\n   };\n\n   handleDateFromChange = newFromDate => {\n      this.setState({ time_from: newFromDate });\n   };\n   handleDateToChange = newToDate => {\n      this.setState({ time_to: newToDate });\n   };\n\n   openDialog() {\n      this.setState({\n         isAddDialogOpen: true\n      });\n   }\n   closeDialog() {\n      this.setState({\n         isAddDialogOpen: false\n      });\n   }\n\n   openEditDialog = async e => {\n      e.preventDefault();\n      const { selected } = this.state;\n      try {\n         let result = await Client.Services.KPIsService.getKPIById(\n            selected._id\n         );\n         if (result.status === 200) {\n            let kpi = result.data;\n            console.log(kpi);\n            this.setState({\n               isEditDialogOpen: true,\n               name: kpi.name,\n               time_from: new Date(kpi.time_from),\n               time_to: new Date(kpi.time_to),\n               target: kpi.target,\n               project: kpi.project._id,\n               manager: kpi.manager._id\n            });\n         }\n      } catch (err) {\n         console.log(err);\n         this.setState({\n            isEditDialogOpen: true,\n            name: selected.name,\n            manager: selected.manager._id\n         });\n      }\n   };\n   closeEditDialog() {\n      this.setState({\n         isEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         name: '',\n         manager: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'KPIs') {\n         return (\n            <TableControllers\n               onEdit={this.openEditDialog}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getData()}\n            >\n               <Divider></Divider>\n            </TableControllers>\n         );\n      }\n   }\n\n   render() {\n      const {\n         data,\n         isLoading,\n         name,\n         time_from,\n         time_to,\n         target,\n         project,\n         manager,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='KPIPanel'>\n            <div className='mt-2'>\n               <H2>KPIs Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='KPIs'\n                  title='KPIs'\n                  panel={\n                     <Card>\n                        <KPIsTable\n                           isEmpty={this.state.isNoData}\n                           data={data}\n                           onRefresh={() => this.getData()}\n                           isLoading={isLoading}\n                           onSelection={this.getSelected}\n                        />\n                        <KPIDialog\n                           isOpen={this.state.isEditDialogOpen}\n                           toOpen={() => this.openEditDialog()}\n                           toClose={() => this.closeEditDialog()}\n                           name={name}\n                           time_from={time_from}\n                           time_to={time_to}\n                           target={target}\n                           project={project}\n                           selectedProject={project}\n                           manager={manager}\n                           selectedManager={manager}\n                           onChange={this.onChange}\n                           handleDateFromChange={this.handleDateFromChange}\n                           handleDateToChange={this.handleDateToChange}\n                           onTargetValueChange={this.handleTargetValueChange}\n                           handleSubmit={this.handleUpdate}\n                           buttonCaption='Update'\n                           onClear={() => this.clearForm()}\n                           isAlertOpen={isAlertOpen}\n                           closeAlert={() => this.closeAlert()}\n                        />\n                        <KPIDialog\n                           isOpen={this.state.isAddDialogOpen}\n                           toOpen={() => this.openDialog()}\n                           toClose={() => this.closeDialog()}\n                           name={name}\n                           time_from={time_from}\n                           time_to={time_to}\n                           target={target}\n                           project={project}\n                           manager={manager}\n                           onChange={this.onChange}\n                           handleDateFromChange={this.handleDateFromChange}\n                           handleDateToChange={this.handleDateToChange}\n                           onTargetValueChange={this.handleTargetValueChange}\n                           handleSubmit={this.handleSubmit}\n                           buttonCaption='Add'\n                           onClear={() => this.clearForm()}\n                           isAlertOpen={isAlertOpen}\n                           closeAlert={() => this.closeAlert()}\n                        />\n                        <BeforeDeleteAlert\n                           isOpen={this.state.isDeleteAlertOpen}\n                           onConfirm={() => this.deleteItem(selected._id)}\n                           onCancel={() => this.closeDeleteAlert()}\n                           portalID='KPIPanel'\n                           info={`KPI: ${selected.name}`}\n                        />\n                     </Card>\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n         </div>\n      );\n   }\n}\n/**\n  * \n  * \n    <Button icon='annotation' minimal small></Button>\n    <Button icon='dashboard' minimal small></Button>\n    <Button icon='eye-open' minimal small></Button>\n  * \n  * \n  */\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\n\nexport default class EmployeesTable extends Component {\n   state = {\n      selected: '',\n      headers: [\n         { text: '#', center: true },\n         { text: 'Name' },\n         { text: 'Email' },\n         { text: 'Is User', center: true },\n         { text: 'Type' },\n         { text: 'Project' },\n         { text: 'Team' }\n      ]\n   };\n\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n\n   renderTableRows() {\n      const { data } = this.props;\n      return data.map((employee, key) => {\n         return (\n            <tr\n               key={employee._id}\n               onClick={e => this.handleSelection(e, employee)}\n               className={` ${\n                  this.state.selected._id === employee._id ? 'bg-selected' : ''\n               }`}\n            >\n               <TableCell key={key} value={key} center />\n               <TableCell value={employee.name} />\n               <TableCell value={employee.email} />\n               <TableCell\n                  value={employee.user === null ? false : true}\n                  center\n               />\n               <TableCell\n                  value={employee.type === null ? 'N/A' : employee.type.type}\n               />\n               <TableCell\n                  value={\n                     employee.project === null ? 'N/A' : employee.project.name\n                  }\n               />\n               <TableCell\n                  value={employee.team == null ? 'N/A' : employee.team.name}\n               />\n            </tr>\n         );\n      });\n   }\n\n   handleSelection(e, employee) {\n      e.preventDefault();\n      const { selected } = this.state;\n      if (selected._id !== employee._id) {\n         this.props.onSelection(employee, false);\n         this.setState({\n            selected: employee\n         });\n         return;\n      }\n      this.props.onSelection({}, true);\n      this.setState({ selected: {} });\n   }\n\n   render() {\n      return (\n         <Table\n            headers={this.state.headers}\n            rows={this.renderTableRows()}\n            errorMsg={this.props.errorMsg}\n            isLoading={this.props.isLoading}\n            onRefresh={this.props.onRefresh}\n         />\n      );\n   }\n}\nEmployeesTable.defaultProps = {\n   data: [],\n   onRefresh: function() {\n      return;\n   }\n};\n","import React, { Component } from 'react';\r\nimport { HTMLSelect } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class EmployeesOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         var result = await Client.Services.UsersService.getUsers();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      }\r\n   }\r\n\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  ${option.username} | ${option.email}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class EmployeesOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         var result = await Client.Services.EmployeesTypesService.getEmployeeTypes();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      }\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.type}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { HTMLSelect } from '@blueprintjs/core';\r\nimport Client from '../../Modules/Client/Client';\r\n\r\nexport default class TeamsOptions extends Component {\r\n   state = {\r\n      options: [],\r\n      option: ''\r\n   };\r\n   componentDidMount() {\r\n      this.getOptions();\r\n   }\r\n   async getOptions() {\r\n      try {\r\n         var result = await Client.Services.TeamsService.getTeams();\r\n         this.setState({\r\n            options: result.data\r\n         });\r\n      } catch (err) {\r\n         this.setState({ options: new Array('N/A'), option: 'N/A' });\r\n      }\r\n   }\r\n   renderOptions() {\r\n      if (this.state.options) {\r\n         return this.state.options.map((option, key) => {\r\n            return (\r\n               <option key={key} value={option._id}>\r\n                  {option.name}\r\n               </option>\r\n            );\r\n         });\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <HTMLSelect\r\n            id={this.props.id}\r\n            ref={this.props.ref}\r\n            onChange={this.props.onChange}\r\n            disabled={this.props.disabled}\r\n            fill={this.props.fill}\r\n            value={this.props.selected}\r\n         >\r\n            <option selected hidden disabled>\r\n               {this.props.placeholder}\r\n            </option>\r\n            {this.renderOptions()}\r\n         </HTMLSelect>\r\n      );\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable\r\n} from '@blueprintjs/core';\r\nimport UsersOptions from '../Selects/UsersOptions';\r\nimport EmployeesTypesOptions from '../Selects/EmployeesTypesOptions';\r\nimport ProjectOptions from '../Selects/ProjectOptions';\r\nimport TeamOptions from '../Selects/TeamsOptions';\r\n\r\nexport default class EmployeeForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name,\r\n         email,\r\n         user,\r\n         selectedUser,\r\n         type,\r\n         selectedType,\r\n         project,\r\n         selectedProject,\r\n         team,\r\n         selectedTeam\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createProjectForm'>\r\n               <HTMLTable condensed>\r\n                  <tbody>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Name'\r\n                              labelFor='name'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <InputGroup\r\n                              id='name'\r\n                              onChange={onChange}\r\n                              placeholder='Name...'\r\n                              type='text'\r\n                              value={name}\r\n                              fill\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Email'\r\n                              labelFor='email'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <InputGroup\r\n                              id='email'\r\n                              onChange={onChange}\r\n                              placeholder='Email...'\r\n                              type='email'\r\n                              value={email}\r\n                              fill\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup label='User' labelFor='user' />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <UsersOptions\r\n                              id='user'\r\n                              ref='user'\r\n                              onChange={onChange}\r\n                              vale={user}\r\n                              selected={selectedUser}\r\n                              fill\r\n                              placeholder='Select User'\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Employee Type'\r\n                              labelFor='user'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <EmployeesTypesOptions\r\n                              id='type'\r\n                              ref='type'\r\n                              onChange={onChange}\r\n                              vale={type}\r\n                              selected={selectedType}\r\n                              fill\r\n                              placeholder='Select Employee Type'\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Project'\r\n                              labelFor='project'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <ProjectOptions\r\n                              id='project'\r\n                              onChange={onChange}\r\n                              placeholder='Project...'\r\n                              value={project}\r\n                              selected={selectedProject}\r\n                              fill\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                           <FormGroup\r\n                              label='Team'\r\n                              labelFor='team'\r\n                              labelInfo='(required)'\r\n                           />\r\n                        </td>\r\n                        <td colSpan='3'>\r\n                           <TeamOptions\r\n                              id='team'\r\n                              ref='team'\r\n                              onChange={onChange}\r\n                              vale={team}\r\n                              selected={selectedTeam}\r\n                              fill\r\n                              placeholder='Select Team'\r\n                           />\r\n                        </td>\r\n                     </tr>\r\n                  </tbody>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nEmployeeForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\nimport EmployeeForm from '../Forms/EmployeeForm';\n\nexport default class UserDialog extends Component {\n   render() {\n      return (\n         <div id='userDialog'>\n            <Dialog\n               isOpen={this.props.isOpen}\n               onClose={this.props.toClose}\n               toggle={this.props.toOpen}\n            >\n               <Card>\n                  <div className='card-body'>\n                     <div id={this.props.id}>\n                        <EmployeeForm\n                           name={this.props.name}\n                           email={this.props.email}\n                           user={this.props.user}\n                           selectedUser={this.props.selectedUser}\n                           type={this.props.type}\n                           selectedType={this.props.selectedType}\n                           project={this.props.project}\n                           selectedProject={this.props.selectedProject}\n                           team={this.props.team}\n                           selectedTeam={this.props.selectedTeam}\n                           onChange={this.props.onChange}\n                           onSubmit={this.props.handleSubmit}\n                           buttonCaption={this.props.buttonCaption}\n                           onClear={this.props.onClear}\n                        />\n                     </div>\n                  </div>\n               </Card>\n               <Alert\n                  isOpen={this.props.isAlertOpen}\n                  confirmButtonText='Clear form'\n                  onConfirm={this.props.onClear}\n                  cancelButtonText='Cancel'\n                  onCancel={this.props.closeAlert}\n                  intent='danger'\n                  icon='issue'\n                  ussePortal={\n                     <Portal\n                        container={document.getElementById('userDialog')}\n                     />\n                  }\n               >\n                  <H5>{this.props.errorMessage}</H5>\n                  <strong>Do you want to clear the data?</strong>\n               </Alert>\n            </Dialog>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport EmployeesTable from '../Tables/EmployeesTable';\nimport EmployeeDialog from '../Dialogs/EmployeeDialog';\nimport BeforeDeleteAlert from '../Alerts/BeforeDeleteAlert';\n\nexport default class EmployeePanel extends Component {\n   render() {\n      const {\n         data,\n         onRefresh,\n         isLoading,\n         isAlertOpen,\n         isDeleteAlertOpen,\n         getSelected,\n         isUserEditDialogOpen,\n         toOpenUserEditDialog,\n         toCloseUserEditDialog,\n         isEmployeesDialogOpen,\n         toOpenEmployeesDialog,\n         toCloseEmployeesDialog,\n         name,\n         email,\n         user,\n         selectedUser,\n         type,\n         selectedType,\n         project,\n         selectedProject,\n         team,\n         selectedTeam,\n         onChange,\n         handleSubmit,\n         handleUpdate,\n         onClear,\n         onAlertClose,\n         onDeleteConfirm,\n         onDeleteCancel,\n         beforeDeleteInfo,\n         portalID\n      } = this.props;\n      return (\n         <div>\n            <EmployeesTable\n               data={data}\n               onRefresh={onRefresh}\n               isLoading={isLoading}\n               onSelection={getSelected}\n            />\n            <EmployeeDialog\n               isOpen={isUserEditDialogOpen}\n               toOpen={toOpenUserEditDialog}\n               toClose={toCloseUserEditDialog}\n               name={name}\n               email={email}\n               user={user}\n               selectedUser={selectedUser}\n               type={type}\n               selectedType={selectedType}\n               project={project}\n               selectedProject={selectedProject}\n               team={team}\n               selectedTeam={selectedTeam}\n               onChange={onChange}\n               handleSubmit={handleUpdate}\n               buttonCaption='Update'\n               onClear={onClear}\n               isAlertOpen={isAlertOpen}\n               closeAlert={onAlertClose}\n            />\n            <EmployeeDialog\n               isOpen={isEmployeesDialogOpen}\n               toOpen={toOpenEmployeesDialog}\n               toClose={toCloseEmployeesDialog}\n               name={name}\n               email={email}\n               user={user}\n               type={type}\n               project={project}\n               team={team}\n               onChange={onChange}\n               handleSubmit={handleSubmit}\n               buttonCaption='Add'\n               onClear={onClear}\n               isAlertOpen={isAlertOpen}\n               closeAlert={onAlertClose}\n            />\n            <BeforeDeleteAlert\n               isOpen={isDeleteAlertOpen}\n               onConfirm={onDeleteConfirm}\n               onCancel={onDeleteCancel}\n               portalID={portalID}\n               info={beforeDeleteInfo}\n            />\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Tabs, Tab, H2, Card } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport EmployeePanel from '../../components/Panels/EmployeePanel';\n\nexport default class Employees extends Component {\n   state = {\n      activeTabID: 'Employees',\n      selectedTabId: 'Employees',\n      isLoading: true,\n      data: [],\n      openAlert: true,\n      errorMessage: '',\n      isEmployeesDialogOpen: false,\n      name: '',\n      email: '',\n      user: '',\n      type: '',\n      project: '',\n      team: '',\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n   };\n\n   getSelected = (emp, isSelected) => {\n      this.setState({\n         selected: emp,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getEmployeesData();\n   }\n\n   async getEmployeesData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.EmployeesService.getEmployees();\n         this.setState({\n            data: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading Employees list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteEmployee(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.EmployeesService.deleteEmployeeById(id);\n         if (result.status === 200) {\n            Client.Notifications.success('Employee removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete uEmployeeser');\n      } finally {\n         this.getEmployeesData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { email, name, team, project, user, type } = this.state;\n      var errorMsg = 'Unknown Error';\n      let emp = await Client.Services.EmployeesService.createEmployeeDTO(\n         name,\n         email,\n         user,\n         type,\n         project,\n         team\n      );\n      try {\n         let result = await Client.Services.EmployeesService.saveEmployee(emp);\n         if (result.status === 200) {\n            Client.Notifications.success(`Employee ${name} successfully saved`);\n            this.getEmployeesData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} Employee`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   handleUpdate = async e => {\n      e.preventDefault();\n      const { name, email, user, type, project, team, selected } = this.state;\n\n      var errorMsg = 'Unknown Error';\n      try {\n         let emp = await Client.Services.EmployeesService.getEmployeeUpdateDTO(\n            selected._id,\n            name,\n            email,\n            user,\n            type,\n            project,\n            team\n         );\n         let result = await Client.Services.EmployeesService.updateEmployee(\n            emp\n         );\n         if (result.status === 200) {\n            Client.Notifications.success(`Employee ${name} successfully saved`);\n            this.getEmployeesData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} Employee`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openEmployeesDialog() {\n      this.setState({\n         isEmployeesDialogOpen: true\n      });\n   }\n   closeEmployeesDialog() {\n      this.setState({\n         isEmployeesDialogOpen: false\n      });\n   }\n\n   openUserEditDialog = async e => {\n      e.preventDefault();\n      const { selected } = this.state;\n      try {\n         let result = await Client.Services.EmployeesService.getEmployeeById(\n            selected._id\n         );\n         if (result.status === 200) {\n            let emp = result.data;\n            this.setState({\n               isUserEditDialogOpen: true,\n               name: emp.name,\n               email: emp.email,\n               user: emp.user._id,\n               type: emp.type._id,\n               project: emp.project._id,\n               team: emp.team._id\n            });\n         }\n      } catch (err) {\n         console.log(err);\n         this.setState({\n            isUserEditDialogOpen: true,\n            name: selected.name,\n            email: selected.email,\n            user: selected.user._id,\n            type: selected.type._id,\n            project: selected.project === null ? '' : selected.project._id,\n            team: selected.team._id\n         });\n      }\n   };\n   closeUserEditDialog() {\n      this.setState({\n         isUserEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         name: '',\n         email: '',\n         user: '',\n         type: '',\n         project: '',\n         team: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Employees') {\n         return (\n            <TableControllers\n               onEdit={this.openUserEditDialog}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openEmployeesDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getEmployeesData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         data,\n         isLoading,\n         email,\n         name,\n         team,\n         project,\n         user,\n         type,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='EmployeePanel'>\n            <div className='mt-2'>\n               <H2>Employees Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Employees'\n                  title='Employees'\n                  panel={\n                     <Card>\n                        <EmployeePanel\n                           data={data}\n                           onRefresh={() => this.getEmployeesData()}\n                           isLoading={isLoading}\n                           isAlertOpen={isAlertOpen}\n                           isDeleteAlertOpen={this.state.isDeleteAlertOpen}\n                           getSelected={this.getSelected}\n                           isUserEditDialogOpen={\n                              this.state.isUserEditDialogOpen\n                           }\n                           toOpenUserEditDialog={() =>\n                              this.openUserEditDialog()\n                           }\n                           toCloseUserEditDialog={() =>\n                              this.closeUserEditDialog()\n                           }\n                           isEmployeesDialogOpen={\n                              this.state.isEmployeesDialogOpen\n                           }\n                           toOpenEmployeesDialog={() =>\n                              this.openEmployeesDialog()\n                           }\n                           toCloseEmployeesDialog={() =>\n                              this.closeEmployeesDialog()\n                           }\n                           name={name}\n                           email={email}\n                           user={user}\n                           selectedUser={user}\n                           type={type}\n                           selectedType={type}\n                           project={project}\n                           selectedProject={project}\n                           team={team}\n                           selectedTeam={team}\n                           onChange={this.onChange}\n                           handleSubmit={this.handleSubmit}\n                           handleUpdate={this.handleUpdate}\n                           onClear={() => this.clearForm()}\n                           onAlertClose={() => this.closeAlert()}\n                           onDeleteConfirm={() =>\n                              this.deleteEmployee(selected._id)\n                           }\n                           onDeleteCancel={() => this.closeDeleteAlert()}\n                           beforeDeleteInfo={`Employee: ${selected.name}`}\n                           portalID='EmployeePanel'\n                        />\n                     </Card>\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\n\nexport default class TeamsTable extends Component {\n   state = {\n      selected: '',\n      headers: [\n         { text: '#', center: true },\n         { text: 'Team' },\n         { text: 'Manager' }\n      ]\n   };\n\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n   renderTableRows() {\n      const { data } = this.props;\n      return data.map((team, key) => {\n         return (\n            <tr\n               key={team._id}\n               onClick={e => this.handleSelection(e, team)}\n               className={`${\n                  this.state.selected._id === team._id ? 'bg-selected' : ''\n               }`}\n            >\n               <TableCell key={key} value={key} center />\n               <TableCell value={team.name} />\n               <TableCell value={team.manager.name} />\n            </tr>\n         );\n      });\n   }\n\n   handleSelection(e, team) {\n      e.preventDefault();\n      const { selected } = this.state;\n      if (selected._id !== team._id) {\n         this.props.onSelection(team, false);\n         this.setState({\n            selected: team\n         });\n         return;\n      }\n      this.props.onSelection({}, true);\n      this.setState({ selected: {} });\n   }\n\n   render() {\n      return (\n         <Table\n            headers={this.state.headers}\n            rows={this.renderTableRows()}\n            errorMsg={this.props.errorMsg}\n            isLoading={this.props.isLoading}\n            onRefresh={this.props.onRefresh}\n         />\n      );\n   }\n}\nTeamsTable.defaultProps = {\n   data: [],\n   onRefresh: function() {\n      return;\n   }\n};\n","import React, { Component } from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n   Button,\r\n   ButtonGroup,\r\n   FormGroup,\r\n   InputGroup,\r\n   HTMLTable\r\n} from '@blueprintjs/core';\r\nimport EmployeesOptions from '../Selects/EmployeesOptions';\r\n\r\nexport default class TeamForm extends Component {\r\n   render() {\r\n      const {\r\n         onChange,\r\n         onSubmit,\r\n         buttonCaption,\r\n         onClear,\r\n         name,\r\n         manager,\r\n         selectedManager\r\n      } = this.props;\r\n\r\n      return (\r\n         <div>\r\n            <Form className='mb-2' ref='createTeamForm'>\r\n               <HTMLTable condensed>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Team Name'\r\n                           labelFor='name'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <InputGroup\r\n                           id='name'\r\n                           onChange={onChange}\r\n                           placeholder='Team Name...'\r\n                           type='text'\r\n                           value={name}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td>\r\n                        <FormGroup\r\n                           label='Manager'\r\n                           labelFor='manager'\r\n                           labelInfo='(required)'\r\n                        />\r\n                     </td>\r\n                     <td colSpan='3'>\r\n                        <EmployeesOptions\r\n                           id='manager'\r\n                           onChange={onChange}\r\n                           placeholder='Team Manager...'\r\n                           value={manager}\r\n                           selected={selectedManager}\r\n                           fill\r\n                        />\r\n                     </td>\r\n                  </tr>\r\n               </HTMLTable>\r\n\r\n               <div className='text-right'>\r\n                  <ButtonGroup>\r\n                     <Button icon='refresh' onClick={onClear}>\r\n                        Clear\r\n                     </Button>\r\n                     <Button icon='saved' onClick={onSubmit}>\r\n                        {buttonCaption}\r\n                     </Button>\r\n                  </ButtonGroup>\r\n               </div>\r\n            </Form>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nTeamForm.defaultProps = {\r\n   addButtonCaption: 'Add'\r\n};\r\n","import React, { Component } from 'react';\nimport { Dialog, Card, Alert, Portal, H5 } from '@blueprintjs/core';\nimport TeamForm from '../Forms/TeamForm';\n\nexport default class UserDialog extends Component {\n   render() {\n      return (\n         <div id='userDialog'>\n            <Dialog\n               isOpen={this.props.isOpen}\n               onClose={this.props.toClose}\n               toggle={this.props.toOpen}\n            >\n               <Card>\n                  <div className='card-body'>\n                     <div id={this.props.id}>\n                        <TeamForm\n                           name={this.props.name}\n                           manager={this.props.username}\n                           selectedManager={this.props.selectedManager}\n                           onChange={this.props.onChange}\n                           onSubmit={this.props.handleSubmit}\n                           buttonCaption={this.props.buttonCaption}\n                           onClear={this.props.onClear}\n                        />\n                     </div>\n                  </div>\n               </Card>\n               <Alert\n                  isOpen={this.props.isAlertOpen}\n                  confirmButtonText='Clear form'\n                  onConfirm={this.props.onClear}\n                  cancelButtonText='Cancel'\n                  onCancel={this.props.closeAlert}\n                  intent='danger'\n                  icon='issue'\n                  ussePortal={\n                     <Portal\n                        container={document.getElementById('userDialog')}\n                     />\n                  }\n               >\n                  <H5>{this.props.errorMessage}</H5>\n                  <strong>Do you want to clear the data?</strong>\n               </Alert>\n            </Dialog>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Tabs, Tab, H2, Card } from '@blueprintjs/core';\nimport TeamsTable from '../../components/Tables/TeamsTable';\nimport TeamDialog from '../../components/Dialogs/TeamDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\n\nexport default class Teams extends Component {\n   state = {\n      activeTabID: 'Teams',\n      selectedTabId: 'Teams',\n      isLoading: true,\n      data: [],\n      openAlert: true,\n      errorMessage: '',\n      isAddDialogOpen: false,\n      isEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false,\n      name: '',\n      manager: '',\n      selected: {}\n   };\n\n   getSelected = (sel, isSelected) => {\n      this.setState({\n         selected: sel,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getData();\n   }\n\n   async getData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.TeamsService.getTeams();\n         this.setState({\n            data: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading Teams list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteItem(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.TeamsService.deleteTeamByID(id);\n         if (result.status === 200) {\n            Client.Notifications.success('Team removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete Team');\n      } finally {\n         this.getData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { name, manager } = this.state;\n      var errorMsg = 'Unknown Error';\n      let team = await Client.Services.TeamsService.createTeamDTO(\n         name,\n         manager\n      );\n      try {\n         let result = await Client.Services.TeamsService.saveTeam(team);\n         if (result.status === 200) {\n            Client.Notifications.success(`Team ${name} successfully saved`);\n            this.getData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} Team`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   handleUpdate = async e => {\n      e.preventDefault();\n      const { name, manager, selected } = this.state;\n\n      var errorMsg = 'Unknown Error';\n      try {\n         let team = await Client.Services.TeamsService.createTeamDTO(\n            name,\n            manager\n         );\n         team.team._id = selected._id;\n         let result = await Client.Services.TeamsService.updateTeam(team);\n         if (result.status === 200) {\n            Client.Notifications.success(`Team ${name} successfully saved`);\n            this.getData();\n            console.log(result.data.employee);\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} team`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openDialog() {\n      this.setState({\n         isAddDialogOpen: true\n      });\n   }\n   closeDialog() {\n      this.setState({\n         isAddDialogOpen: false\n      });\n   }\n\n   openEditDialog = async e => {\n      e.preventDefault();\n      const { selected } = this.state;\n      try {\n         let result = await Client.Services.TeamsService.getTeamById(\n            selected._id\n         );\n         if (result.status === 200) {\n            let team = result.data;\n            console.log(team);\n            this.setState({\n               isEditDialogOpen: true,\n               name: team.name,\n               manager: team.manager._id\n            });\n         }\n      } catch (err) {\n         console.log(err);\n         this.setState({\n            isEditDialogOpen: true,\n            name: selected.name,\n            manager: selected.manager._id\n         });\n      }\n   };\n   closeEditDialog() {\n      this.setState({\n         isEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         name: '',\n         manager: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Teams') {\n         return (\n            <TableControllers\n               onEdit={this.openEditDialog}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         data,\n         isLoading,\n         name,\n         manager,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='TeamsPanel'>\n            <div className='mt-2'>\n               <H2>Teams Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Teams'\n                  title='Teams'\n                  panel={\n                     <Card>\n                        <TeamsTable\n                           data={data}\n                           onRefresh={() => this.getData()}\n                           isLoading={isLoading}\n                           onSelection={this.getSelected}\n                        />\n                        <TeamDialog\n                           isOpen={this.state.isEditDialogOpen}\n                           toOpen={() => this.openEditDialog()}\n                           toClose={() => this.closeEditDialog()}\n                           name={name}\n                           manager={manager}\n                           selectedManager={manager}\n                           onChange={this.onChange}\n                           handleSubmit={this.handleUpdate}\n                           buttonCaption='Update'\n                           onClear={() => this.clearForm()}\n                           isAlertOpen={isAlertOpen}\n                           closeAlert={() => this.closeAlert()}\n                        />\n                        <TeamDialog\n                           isOpen={this.state.isAddDialogOpen}\n                           toOpen={() => this.openDialog()}\n                           toClose={() => this.closeDialog()}\n                           name={name}\n                           manager={manager}\n                           onChange={this.onChange}\n                           handleSubmit={this.handleSubmit}\n                           buttonCaption='Add'\n                           onClear={() => this.clearForm()}\n                           isAlertOpen={isAlertOpen}\n                           closeAlert={() => this.closeAlert()}\n                        />\n                        <BeforeDeleteAlert\n                           isOpen={this.state.isDeleteAlertOpen}\n                           onConfirm={() => this.deleteItem(selected._id)}\n                           onCancel={() => this.closeDeleteAlert()}\n                           portalID='TeamsPanel'\n                           info={`Team: ${selected.name}`}\n                        />\n                     </Card>\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { NonIdealState, H5, H2, H4, Button } from '@blueprintjs/core';\n\nexport default class Route404 extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         goHome: false\n      };\n\n      this.handleGoHome = this.handleGoHome.bind(this);\n   }\n   handleGoHome = e => {\n      e.preventDefault();\n      this.setState({\n         goHome: true\n      });\n   };\n\n   render() {\n      const title = <H2>Path not found</H2>;\n      const description = (\n         <>\n            <H4>Page you are looking for do not exist</H4>\n            <H5>Error: 404</H5>\n            <br />\n\n            <Button\n               icon='home'\n               minimal\n               fill\n               onClick={this.handleGoHome}\n            ></Button>\n         </>\n      );\n\n      if (this.state.goHome) {\n         return <Redirect to='/home' />;\n      }\n\n      return (\n         <NonIdealState\n            icon='error'\n            title={title}\n            description={description}\n            action=''\n         />\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Row, Col, CardBody, Form } from 'reactstrap';\nimport { Card, Button, InputGroup, Classes } from '@blueprintjs/core';\n\nimport Client from '../../Modules/Client/Client';\nimport MainContainer from '../../components/MainContainer/MainContainer';\nimport UIManager from '../../Modules/UIManager/UIManager';\n\nimport './Login.css';\n\nconst AuthService = Client.Services.AuthService;\n\nexport default class Login extends Component {\n   state = {\n      theme: UIManager.getTheme(),\n      alertVisible: true,\n      isLoading: false,\n      authenticated: false,\n      message: '',\n      email: '',\n      password: ''\n   };\n\n   componentDidMount() {\n      this.checkLogin();\n   }\n   checkLogin() {\n      if (Client.isAuthenticated()) {\n         this.setState({\n            authenticated: true\n         });\n      }\n   }\n\n   onSubmit = async e => {\n      e.preventDefault();\n      this.setLoading(true);\n      const { email, password } = this.state;\n\n      try {\n         var result = await AuthService.login(email, password); //Client.login(email, password);\n         console.log(result);\n         if (result) {\n            this.setState({\n               message: 'ok',\n               authenticated: true\n            });\n            if (result.status === 401) {\n               this.setState({\n                  message: 'User is not active'\n               });\n            }\n         }\n      } catch (err) {\n         this.setState({\n            message: 'Login failed'\n         });\n      } finally {\n         this.setLoading(false);\n      }\n   };\n\n   setLoading(loading) {\n      this.setState({ loading: loading });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.name] = e.target.value;\n      this.setState(state);\n      this.resetMessage();\n   };\n\n   resetMessage() {\n      this.setState({ message: '' });\n   }\n\n   render() {\n      const { authenticated, email, password, message, theme } = this.state;\n\n      if (authenticated) {\n         return <Redirect to='/Home' />;\n      }\n\n      return (\n         <MainContainer noAppBar displayBgImage={true}>\n            <Row>\n               <Col\n                  xl={{ size: 4, offset: 4 }}\n                  lg={{ size: 4, offset: 4 }}\n                  md={{ size: 4, offset: 4 }}\n                  sm='12'\n                  xs='12'\n                  className='mt-4'\n               >\n                  <div\n                     className={`${theme} bg-login-form login-card ${\n                        message ? 'shake' : ''\n                     }`}\n                  >\n                     <Card color={theme} className='bg-transparent mt-5'>\n                        <CardBody className=''>\n                           <span className='fas fa-dice-d20 float-right' />\n                           <h3 className='text-center'>Sign in</h3>\n                           <hr />\n                           <Form>\n                              <div className='mb-2'>\n                                 <InputGroup\n                                    leftIcon='user'\n                                    className='login-input'\n                                    intent={message ? 'danger' : ''}\n                                    onChange={e => {\n                                       this.setState({\n                                          email: e.target.value\n                                       });\n                                       this.resetMessage();\n                                    }}\n                                    placeholder='Username...'\n                                    type='email'\n                                    value={email}\n                                 />\n                              </div>\n                              <div className='mb-2'>\n                                 <InputGroup\n                                    leftIcon='lock'\n                                    className='login-input'\n                                    intent={message ? 'danger' : ''}\n                                    onChange={e => {\n                                       this.setState({\n                                          password: e.target.value\n                                       });\n                                       this.resetMessage();\n                                    }}\n                                    placeholder='Password...'\n                                    type='password'\n                                    value={password}\n                                 />\n                              </div>\n                              <div className={Classes.ALIGN_RIGHT}>\n                                 <Button\n                                    type='submit'\n                                    size='sm'\n                                    fill\n                                    minimal\n                                    text='Login'\n                                    alignText='right'\n                                    rightIcon='arrow-right'\n                                    onClick={this.onSubmit}\n                                 />\n                              </div>\n                           </Form>\n                        </CardBody>\n                     </Card>\n                  </div>\n               </Col>\n            </Row>\n         </MainContainer>\n      );\n   }\n}\n","import React, { Component } from 'react';\nimport { Row, Col } from 'reactstrap';\nimport { Card, H2, Classes } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\n\nexport default class Home extends Component {\n   state = {\n      testResult: '',\n      testServiceResult: []\n   };\n   componentDidMount() {\n      //this.getUserData();\n   }\n\n   async getUserData() {\n      let result = await Client.testingCurrentUserAuth();\n\n      this.setState({\n         testResult: result\n      });\n   }\n\n   render() {\n      return (\n         <div>\n            <div className='mt-2'>\n               <H2>GhOSt KPI Application</H2>\n            </div>\n\n            <div className='container-fluid'>\n               <Row>\n                  <Col xl={12} lg={12} md={12} sm={12} xs={12} className='mt-3'>\n                     <Card>\n                        <div className='bp3-card-header'>\n                           <div className='bp3-card-header-content'>\n                              Project info\n                           </div>\n                        </div>\n                        <div className='card-body'>\n                           <h4>This application is created for KPI analysis</h4>\n                           <hr></hr>\n                           <h5 className={Classes.TEXT_MUTED}>\n                              current version: 0.0.1\n                           </h5>\n                           <hr />\n                           <h5 className={Classes.TEXT_MUTED}>\n                              Author: Rafal Cymbalista\n                           </h5>\n                        </div>\n                     </Card>\n                  </Col>\n               </Row>\n            </div>\n         </div>\n      );\n   }\n}\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n/*Component import*/\r\nimport Settings from '../views/Settings/Settings';\r\nimport Projects from '../views/Projects/Projects';\r\nimport Reports from '../views/Reports/Reports';\r\nimport AdminPanel from '../views/AdminPanel/AdminPanel';\r\nimport Dashboards from '../views/Dashboards/Dashboards';\r\nimport KPIs from '../views/KPIs/KPIs';\r\nimport Employees from '../views/Employees/Employees';\r\nimport Teams from '../views/Teams/Teams';\r\nimport Route404 from './Route404.jsx';\r\n\r\nimport Login from '../views/Login/Login';\r\nimport Home from '../views/Home/Home';\r\n\r\nexport default class Routes extends Component {\r\n   render() {\r\n      return (\r\n         <Router>\r\n            <Switch>\r\n               <Route exact path='/' component={Login} />\r\n               <Route exact path='/login/' component={Login} />\r\n               <PrivateRoute exact path='/Home' home component={Home} />\r\n               <PrivateRoute exact path='/Dashboards/' component={Dashboards} />\r\n               <PrivateRoute exact path='/Projects/' component={Projects} />\r\n               <PrivateRoute exact path='/KPIs/' component={KPIs} />\r\n               <PrivateRoute exact path='/Employees/' component={Employees} />\r\n               <PrivateRoute exact path='/Teams/' component={Teams} />\r\n               <PrivateRoute exact path='/Reports/' component={Reports} />\r\n               <PrivateRoute exact path='/Settings/' component={Settings} />\r\n               <PrivateRoute exact path='/AdminPanel/' component={AdminPanel} />\r\n\r\n               <Route from='*' to='/' component={Route404} />\r\n            </Switch>\r\n         </Router>\r\n      );\r\n   }\r\n}\r\n","/*Imports*/\r\nimport React, { Component } from 'react';\r\nimport Routes from './Routes/Routes';\r\n\r\n/*CSS import*/\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport './App.css';\r\n\r\n/**\r\n *    Testing BlueprintUI\r\n */\r\nimport { FocusStyleManager } from '@blueprintjs/core';\r\nimport '@blueprintjs/core/lib/css/blueprint.css';\r\nimport '@blueprintjs/table/lib/css/table.css';\r\nimport '@blueprintjs/datetime/lib/css/blueprint-datetime.css';\r\n\r\n/**\r\n *    Global UI Manager for theme switching\r\n */\r\nimport UIManager from './Modules/UIManager/UIManager';\r\n\r\n/*CSS import - theming : BOOTSTRAP*/\r\nimport './custom.css'; //<- Custom Bootstrap .css\r\nimport './blueprint_custom.css'; //<- Custom Blueprintjs.css\r\nimport './blueprint_custom_table.css'; //<- Custom Blueprintjs.table\r\nimport './blueprint_custom_datetime.css'; //<- Custom Blueprintjs.datetime\r\nimport './apexchart_custom.css'; //<- Custom ApexChart.js css\r\n\r\nexport default class App extends Component {\r\n   render() {\r\n      document.body.className =\r\n         UIManager.getTheme() === 'dark' ? 'bp3-dark' : 'bp3-body';\r\n      FocusStyleManager.onlyShowFocusOnTabs();\r\n      return (\r\n         <div className='App'>\r\n            <Routes />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}